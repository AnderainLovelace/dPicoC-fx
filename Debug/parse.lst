SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\dPicoc\parse.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c     1    #include "picoc.h"
         parse.c     2    #include "interpreter.h"
         parse.c     3    
         parse.c     4    /* a chunk of heap-allocated tokens we'll cleanup when we're done */
         parse.c     5    struct CleanupTokenNode
         parse.c     6    {
         parse.c     7        void *Tokens;
         parse.c     8        const char *SourceText;
         parse.c     9        struct CleanupTokenNode *Next;
         parse.c    10    };
         parse.c    11    
         parse.c    12    static struct CleanupTokenNode *CleanupTokenList = NULL;
         parse.c    13    
         parse.c    14    
         parse.c    15    /* deallocate any memory */
         parse.c    16    void ParseCleanup()
P   00000000              _ParseCleanup:                   ; function: ParseCleanup
                                                           ; frame size=16
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 4F22                   STS.L       PR,@-R15
    00000008 DD6C                   MOV.L       L1018,R13  ; _HeapFreeMem
    0000000A DE6D                   MOV.L       L1018+4,R14; __$CleanupTokenList
         parse.c    17    {
         parse.c    18        while (CleanupTokenList != NULL)
    0000000C A00F                   BRA         L855
    0000000E 0009                   NOP
    00000010              L856:                             
         parse.c    19        {
         parse.c    20            struct CleanupTokenNode *Next = CleanupTokenList->Next;
    00000010 6CE2                   MOV.L       @R14,R12
    00000012 5CC2                   MOV.L       @(8,R12),R12
         parse.c    21            
         parse.c    22            HeapFreeMem(CleanupTokenList->Tokens);
    00000014 64E2                   MOV.L       @R14,R4
    00000016 4D0B                   JSR         @R13
    00000018 6442                   MOV.L       @R4,R4
         parse.c    23            if (CleanupTokenList->SourceText != NULL)
    0000001A 63E2                   MOV.L       @R14,R3
    0000001C 5231                   MOV.L       @(4,R3),R2
    0000001E 2228                   TST         R2,R2
    00000020 8902                   BT          L857
         parse.c    24                HeapFreeMem((void *)CleanupTokenList->SourceText);
    00000022 64E2                   MOV.L       @R14,R4
    00000024 4D0B                   JSR         @R13
    00000026 5441                   MOV.L       @(4,R4),R4
    00000028              L857:                             
         parse.c    25                
         parse.c    26            HeapFreeMem(CleanupTokenList);
    00000028 4D0B                   JSR         @R13
    0000002A 64E2                   MOV.L       @R14,R4
         parse.c    27            CleanupTokenList = Next;
    0000002C 2EC2                   MOV.L       R12,@R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000002E              L855:                             
    0000002E 63E2                   MOV.L       @R14,R3
    00000030 2338                   TST         R3,R3
    00000032 8BED                   BF          L856
         parse.c    28        }
         parse.c    29    }
    00000034 4F26                   LDS.L       @R15+,PR
    00000036 6CF6                   MOV.L       @R15+,R12
    00000038 6DF6                   MOV.L       @R15+,R13
    0000003A 000B                   RTS
    0000003C 6EF6                   MOV.L       @R15+,R14
         parse.c    30    
         parse.c    31    /* parse a statement, but only run it if Condition is TRUE */
         parse.c    32    enum ParseResult ParseStatementMaybeRun(struct ParseState *Parser, int Condition, int CheckTrailingSemicol
                         +on)
    0000003E              _ParseStatementMaybeRun:         ; function: ParseStatementMaybeRun
                                                           ; frame size=16
    0000003E 2FE6                   MOV.L       R14,@-R15
    00000040 4F22                   STS.L       PR,@-R15
    00000042 6E43                   MOV         R4,R14
    00000044 7FF8                   ADD         #-8,R15
    00000046 2F62                   MOV.L       R6,@R15
         parse.c    33    {
         parse.c    34        if (Parser->Mode != RunModeSkip && !Condition)
    00000048 50E3                   MOV.L       @(12,R14),R0
    0000004A 8801                   CMP/EQ      #1,R0
    0000004C 8910                   BT          L858
    0000004E 2558                   TST         R5,R5
    00000050 8B0E                   BF          L858
         parse.c    35        {
         parse.c    36            enum RunMode OldMode = Parser->Mode;
         parse.c    37            int Result;
         parse.c    38            Parser->Mode = RunModeSkip;
    00000052 E201                   MOV         #1,R2
    00000054 53E3                   MOV.L       @(12,R14),R3
    00000056 1F31                   MOV.L       R3,@(4,R15)
    00000058 1E23                   MOV.L       R2,@(12,R14)
         parse.c    39            Result = ParseStatement(Parser, CheckTrailingSemicolon);
    0000005A 65F2                   MOV.L       @R15,R5
    0000005C B518                   BSR         _ParseStatement
    0000005E 64E3                   MOV         R14,R4
         parse.c    40            Parser->Mode = OldMode;
    00000060 52F1                   MOV.L       @(4,R15),R2
    00000062 6403                   MOV         R0,R4
    00000064 1E23                   MOV.L       R2,@(12,R14)
         parse.c    41            return Result;
    00000066 6043                   MOV         R4,R0
    00000068 7F08                   ADD         #8,R15
    0000006A 4F26                   LDS.L       @R15+,PR
    0000006C 000B                   RTS
    0000006E 6EF6                   MOV.L       @R15+,R14
    00000070              L858:                             
         parse.c    42        }
         parse.c    43        else
         parse.c    44            return ParseStatement(Parser, CheckTrailingSemicolon);
    00000070 65F2                   MOV.L       @R15,R5
    00000072 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000074 7F08                   ADD         #8,R15
    00000076 4F26                   LDS.L       @R15+,PR
    00000078 A50A                   BRA         _ParseStatement
    0000007A 6EF6                   MOV.L       @R15+,R14
    0000007C              L859:                             
         parse.c    45    }
    0000007C 7F08                   ADD         #8,R15
    0000007E 4F26                   LDS.L       @R15+,PR
    00000080 000B                   RTS
    00000082 6EF6                   MOV.L       @R15+,R14
         parse.c    46    
         parse.c    47    /* count the number of parameters to a function or macro */
         parse.c    48    int ParseCountParams(struct ParseState *Parser)
    00000084              _ParseCountParams:               ; function: ParseCountParams
                                                           ; frame size=16
    00000084 2FE6                   MOV.L       R14,@-R15
         parse.c    49    {
         parse.c    50        int ParamCount = 0;
         parse.c    51        
         parse.c    52        enum LexToken Token = LexGetToken(Parser, NULL, TRUE);
    00000086 E601                   MOV         #1,R6
    00000088 2FD6                   MOV.L       R13,@-R15
    0000008A EE00                   MOV         #0,R14
    0000008C 2FC6                   MOV.L       R12,@-R15
    0000008E 6C43                   MOV         R4,R12
    00000090 DD4C                   MOV.L       L1018+8,R13; _LexGetToken
    00000092 4F22                   STS.L       PR,@-R15
    00000094 4D0B                   JSR         @R13
    00000096 65E3                   MOV         R14,R5
         parse.c    53        if (Token != TokenCloseBracket && Token != TokenEOF)
    00000098 882C                   CMP/EQ      #44,R0
    0000009A 8D12                   BT/S        L861
    0000009C 6403                   MOV         R0,R4
    0000009E 6043                   MOV         R4,R0
    000000A0 885D                   CMP/EQ      #93,R0
    000000A2 890E                   BT          L861
         parse.c    54        { 
         parse.c    55            /* count the number of parameters */
         parse.c    56            ParamCount++;
         parse.c    57            while ((Token = LexGetToken(Parser, NULL, TRUE)) != TokenCloseBracket && Token != TokenEOF)
    000000A4 A003                   BRA         L862
    000000A6 7E01                   ADD         #1,R14
    000000A8              L863:                             
         parse.c    58            { 
         parse.c    59                if (Token == TokenComma)
    000000A8 8801                   CMP/EQ      #1,R0
    000000AA 8B00                   BF          L862
         parse.c    60                    ParamCount++;
    000000AC 7E01                   ADD         #1,R14
    000000AE              L862:                             
    000000AE E601                   MOV         #1,R6
    000000B0 E500                   MOV         #0,R5
    000000B2 4D0B                   JSR         @R13
    000000B4 64C3                   MOV         R12,R4
    000000B6 882C                   CMP/EQ      #44,R0
    000000B8 8D03                   BT/S        L861
    000000BA 6403                   MOV         R0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000BC 6043                   MOV         R4,R0
    000000BE 885D                   CMP/EQ      #93,R0
    000000C0 8BF2                   BF          L863
    000000C2              L861:                             
         parse.c    61            } 
         parse.c    62        }
         parse.c    63        
         parse.c    64        return ParamCount;
    000000C2 60E3                   MOV         R14,R0
         parse.c    65    }
    000000C4 4F26                   LDS.L       @R15+,PR
    000000C6 6CF6                   MOV.L       @R15+,R12
    000000C8 6DF6                   MOV.L       @R15+,R13
    000000CA 000B                   RTS
    000000CC 6EF6                   MOV.L       @R15+,R14
         parse.c    66    
         parse.c    67    /* parse a function definition and store it for later */
         parse.c    68    struct Value *ParseFunctionDefinition(struct ParseState *Parser, struct ValueType *ReturnType, char *Ident
                         +ifier)
    000000CE              _ParseFunctionDefinition:        ; function: ParseFunctionDefinition
                                                           ; frame size=128
                                                           ; used runtime library name:
                                                           ; __slow_strcmp1, __quick_evn_mvn
    000000CE 2FE6                   MOV.L       R14,@-R15
    000000D0 2FD6                   MOV.L       R13,@-R15
    000000D2 6D43                   MOV         R4,R13
         parse.c    69    {
         parse.c    70        struct ValueType *ParamType;
         parse.c    71        char *ParamIdentifier;
         parse.c    72        enum LexToken Token = TokenNone;
         parse.c    73        struct ParseState ParamParser;
         parse.c    74        struct Value *FuncValue;
         parse.c    75        struct Value *OldFuncValue;
         parse.c    76        struct ParseState FuncBody;
         parse.c    77        int ParamCount = 0;
         parse.c    78    
         parse.c    79        if (TopStackFrame != NULL)
    000000D4 D23D                   MOV.L       L1018+16,R2; _TopStackFrame
    000000D6 2FC6                   MOV.L       R12,@-R15
    000000D8 2FB6                   MOV.L       R11,@-R15
    000000DA 2FA6                   MOV.L       R10,@-R15
    000000DC 2F96                   MOV.L       R9,@-R15
    000000DE 2F86                   MOV.L       R8,@-R15
    000000E0 4F22                   STS.L       PR,@-R15
    000000E2 6863                   MOV         R6,R8
    000000E4 DC38                   MOV.L       L1018+12,R12; _ProgramFail
    000000E6 7FA8                   ADD         #-88,R15
    000000E8 1F55                   MOV.L       R5,@(20,R15)
    000000EA 6322                   MOV.L       @R2,R3
    000000EC 2338                   TST         R3,R3
    000000EE 8D05                   BT/S        L867
    000000F0 EA00                   MOV         #0,R10
         parse.c    80            ProgramFail(Parser, "nested function definitions are not allowed");
    000000F2 D337                   MOV.L       L1018+20,R3; L533
    000000F4 2F36                   MOV.L       R3,@-R15
    000000F6 4C0B                   JSR         @R12
    000000F8 64D3                   MOV         R13,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000FA 7F04                   ADD         #4,R15
    000000FC              L867:                             
         parse.c    81            
         parse.c    82        LexGetToken(Parser, NULL, TRUE);  /* open bracket */
    000000FC D931                   MOV.L       L1018+8,R9 ; _LexGetToken
    000000FE E601                   MOV         #1,R6
    00000100 E500                   MOV         #0,R5
    00000102 490B                   JSR         @R9
    00000104 64D3                   MOV         R13,R4
         parse.c    83        ParserCopy(&ParamParser, Parser);
    00000106 65D3                   MOV         R13,R5
    00000108 64F3                   MOV         R15,R4
    0000010A B37E                   BSR         _ParserCopy
    0000010C 7438                   ADD         #56,R4
         parse.c    84        ParamCount = ParseCountParams(Parser);
    0000010E BFB9                   BSR         _ParseCountParams
    00000110 64D3                   MOV         R13,R4
         parse.c    85        if (ParamCount > PARAMETER_MAX)
    00000112 E310                   MOV         #16,R3
    00000114 3037                   CMP/GT      R3,R0
    00000116 8F05                   BF/S        L868
    00000118 1F02                   MOV.L       R0,@(8,R15)
         parse.c    86            ProgramFail(Parser, "too many parameters");
    0000011A D12E                   MOV.L       L1018+24,R1; L534
    0000011C 2F16                   MOV.L       R1,@-R15
    0000011E 4C0B                   JSR         @R12
    00000120 64D3                   MOV         R13,R4
    00000122 7F04                   ADD         #4,R15
    00000124              L868:                             
         parse.c    87        
         parse.c    88        FuncValue = VariableAllocValueAndData(Parser, sizeof(struct FuncDef) + sizeof(struct ValueType *) * Pa
                         +ramCount + sizeof(const char *) * ParamCount, FALSE, NULL, TRUE);
    00000124 D22C                   MOV.L       L1018+28,R2; _VariableAllocValueAndData
    00000126 E301                   MOV         #1,R3
    00000128 2F36                   MOV.L       R3,@-R15
    0000012A E700                   MOV         #0,R7
    0000012C 5BF3                   MOV.L       @(12,R15),R11
    0000012E 6673                   MOV         R7,R6
    00000130 4B08                   SHLL2       R11
    00000132 65B3                   MOV         R11,R5
    00000134 35BC                   ADD         R11,R5
    00000136 7538                   ADD         #56,R5
    00000138 420B                   JSR         @R2
    0000013A 64D3                   MOV         R13,R4
         parse.c    89        FuncValue->Typ = &FunctionType;
    0000013C D327                   MOV.L       L1018+32,R3; _FunctionType
    0000013E 7F04                   ADD         #4,R15
    00000140 6E03                   MOV         R0,R14
    00000142 2E32                   MOV.L       R3,@R14
         parse.c    90        FuncValue->Val->FuncDef.ReturnType = ReturnType;
    00000144 52E1                   MOV.L       @(4,R14),R2
    00000146 53F5                   MOV.L       @(20,R15),R3
    00000148 2232                   MOV.L       R3,@R2
         parse.c    91        FuncValue->Val->FuncDef.NumParams = ParamCount;
    0000014A 52E1                   MOV.L       @(4,R14),R2
    0000014C 53F2                   MOV.L       @(8,R15),R3
    0000014E 1231                   MOV.L       R3,@(4,R2)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c    92        FuncValue->Val->FuncDef.VarArgs = FALSE;
    00000150 52E1                   MOV.L       @(4,R14),R2
    00000152 E300                   MOV         #0,R3
    00000154 1232                   MOV.L       R3,@(8,R2)
         parse.c    93        FuncValue->Val->FuncDef.ParamType = (struct ValueType **)((char *)FuncValue->Val + sizeof(struct FuncD
                         +ef));
    00000156 54E1                   MOV.L       @(4,R14),R4
    00000158 6243                   MOV         R4,R2
    0000015A 7238                   ADD         #56,R2
    0000015C 1423                   MOV.L       R2,@(12,R4)
         parse.c    94        FuncValue->Val->FuncDef.ParamName = (char **)((char *)FuncValue->Val->FuncDef.ParamType + sizeof(struc
                         +t ValueType *) * ParamCount);
    0000015E 54E1                   MOV.L       @(4,R14),R4
    00000160 5343                   MOV.L       @(12,R4),R3
    00000162 3B3C                   ADD         R3,R11
    00000164 14B4                   MOV.L       R11,@(16,R4)
         parse.c    95       
         parse.c    96        for (ParamCount = 0; ParamCount < FuncValue->Val->FuncDef.NumParams; ParamCount++)
    00000166 A05A                   BRA         L869
    00000168 EB00                   MOV         #0,R11
    0000016A              L870:                             
         parse.c    97        { 
         parse.c    98            /* harvest the parameters into the function definition */
         parse.c    99            if (ParamCount == FuncValue->Val->FuncDef.NumParams-1 && LexGetToken(&ParamParser, NULL, FALSE) ==
                         + TokenEllipsis)
    0000016A 53E1                   MOV.L       @(4,R14),R3
    0000016C 5231                   MOV.L       @(4,R3),R2
    0000016E 72FF                   ADD         #-1,R2
    00000170 3B20                   CMP/EQ      R2,R11
    00000172 8B10                   BF          L871
    00000174 D213                   MOV.L       L1018+8,R2 ; _LexGetToken
    00000176 E600                   MOV         #0,R6
    00000178 6563                   MOV         R6,R5
    0000017A 64F3                   MOV         R15,R4
    0000017C 420B                   JSR         @R2
    0000017E 7438                   ADD         #56,R4
    00000180 8833                   CMP/EQ      #51,R0
    00000182 8B08                   BF          L871
         parse.c   100            { 
         parse.c   101                /* ellipsis at end */
         parse.c   102                FuncValue->Val->FuncDef.NumParams--;
    00000184 52E1                   MOV.L       @(4,R14),R2
    00000186 5321                   MOV.L       @(4,R2),R3
    00000188 73FF                   ADD         #-1,R3
    0000018A 1231                   MOV.L       R3,@(4,R2)
         parse.c   103                FuncValue->Val->FuncDef.VarArgs = TRUE;
    0000018C 52E1                   MOV.L       @(4,R14),R2
    0000018E E301                   MOV         #1,R3
    00000190 1232                   MOV.L       R3,@(8,R2)
         parse.c   104                break;
    00000192 A048                   BRA         L872
    00000194 0009                   NOP
    00000196              L871:                             
         parse.c   105            }
         parse.c   106            else
         parse.c   107            { 
         parse.c   108                /* add a parameter */




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   109                TypeParse(&ParamParser, &ParamType, &ParamIdentifier, NULL);
    00000196 E700                   MOV         #0,R7
    00000198 D311                   MOV.L       L1018+36,R3; _TypeParse
    0000019A 66F3                   MOV         R15,R6
    0000019C 7604                   ADD         #4,R6
    0000019E 65F3                   MOV         R15,R5
    000001A0 64F3                   MOV         R15,R4
    000001A2 430B                   JSR         @R3
    000001A4 7438                   ADD         #56,R4
         parse.c   110                if (ParamType->Base == TypeVoid)
    000001A6 62F2                   MOV.L       @R15,R2
    000001A8 6322                   MOV.L       @R2,R3
    000001AA 2338                   TST         R3,R3
    000001AC 8F1A                   BF/S        L874
         parse.c   111                {
         parse.c   112                    /* this isn't a real parameter at all - delete it */
         parse.c   113                    ParamCount--;
         parse.c   114                    FuncValue->Val->FuncDef.NumParams--;
         parse.c   115                }
         parse.c   116                else
         parse.c   117                {
         parse.c   118                    FuncValue->Val->FuncDef.ParamType[ParamCount] = ParamType;
         parse.c   119                    FuncValue->Val->FuncDef.ParamName[ParamCount] = ParamIdentifier;
         parse.c   120                }
         parse.c   121            }
         parse.c   122            
         parse.c   123            Token = LexGetToken(&ParamParser, NULL, TRUE);
    000001AE E601                   MOV         #1,R6
    000001B0 53E1                   MOV.L       @(4,R14),R3
    000001B2 5231                   MOV.L       @(4,R3),R2
    000001B4 72FF                   ADD         #-1,R2
    000001B6 1321                   MOV.L       R2,@(4,R3)
    000001B8 A01E                   BRA         L873
    000001BA 7BFF                   ADD         #-1,R11
    000001BC              L1018:                            
    000001BC <00000000>             .DATA.L     _HeapFreeMem
    000001C0 <00000000>             .DATA.L     __$CleanupTokenList
    000001C4 <00000000>             .DATA.L     _LexGetToken
    000001C8 <00000000>             .DATA.L     _ProgramFail
    000001CC <00000000>             .DATA.L     _TopStackFrame
    000001D0 <00000000>             .DATA.L     L533
    000001D4 <00000000>             .DATA.L     L534
    000001D8 <00000000>             .DATA.L     _VariableAllocValueAndData
    000001DC <00000000>             .DATA.L     _FunctionType
    000001E0 <00000000>             .DATA.L     _TypeParse
    000001E4              L874:                             
    000001E4 50E1                   MOV.L       @(4,R14),R0
    000001E6 64B3                   MOV         R11,R4
    000001E8 63F2                   MOV.L       @R15,R3
    000001EA 4408                   SHLL2       R4
    000001EC 5003                   MOV.L       @(12,R0),R0
    000001EE 0436                   MOV.L       R3,@(R0,R4)
    000001F0 50E1                   MOV.L       @(4,R14),R0
    000001F2 5004                   MOV.L       @(16,R0),R0
    000001F4 53F1                   MOV.L       @(4,R15),R3
    000001F6 0436                   MOV.L       R3,@(R0,R4)
    000001F8              L873:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001F8 E500                   MOV         #0,R5
    000001FA 64F3                   MOV         R15,R4
    000001FC 490B                   JSR         @R9
    000001FE 7438                   ADD         #56,R4
         parse.c   124            if (Token != TokenComma && ParamCount < FuncValue->Val->FuncDef.NumParams-1)
    00000200 8801                   CMP/EQ      #1,R0
    00000202 8D0B                   BT/S        L876
    00000204 6A03                   MOV         R0,R10
    00000206 52E1                   MOV.L       @(4,R14),R2
    00000208 5321                   MOV.L       @(4,R2),R3
    0000020A 73FF                   ADD         #-1,R3
    0000020C 3B33                   CMP/GE      R3,R11
    0000020E 8905                   BT          L876
         parse.c   125                ProgramFail(&ParamParser, "comma expected");
    00000210 D36C                   MOV.L       L1019+2,R3 ; L540
    00000212 2F36                   MOV.L       R3,@-R15
    00000214 64F3                   MOV         R15,R4
    00000216 4C0B                   JSR         @R12
    00000218 743C                   ADD         #60,R4
    0000021A 7F04                   ADD         #4,R15
    0000021C              L876:                             
    0000021C 7B01                   ADD         #1,R11
    0000021E              L869:                             
    0000021E 52E1                   MOV.L       @(4,R14),R2
    00000220 5321                   MOV.L       @(4,R2),R3
    00000222 3B33                   CMP/GE      R3,R11
    00000224 8BA1                   BF          L870
    00000226              L872:                             
         parse.c   126        }
         parse.c   127        
         parse.c   128        if (FuncValue->Val->FuncDef.NumParams != 0 && Token != TokenCloseBracket && Token != TokenComma && Tok
                         +en != TokenEllipsis)
    00000226 51E1                   MOV.L       @(4,R14),R1
    00000228 5311                   MOV.L       @(4,R1),R3
    0000022A 2338                   TST         R3,R3
    0000022C 890E                   BT          L877
    0000022E 60A3                   MOV         R10,R0
    00000230 882C                   CMP/EQ      #44,R0
    00000232 890B                   BT          L877
    00000234 60A3                   MOV         R10,R0
    00000236 8801                   CMP/EQ      #1,R0
    00000238 8908                   BT          L877
    0000023A 60A3                   MOV         R10,R0
    0000023C 8833                   CMP/EQ      #51,R0
    0000023E 8905                   BT          L877
         parse.c   129            ProgramFail(&ParamParser, "bad parameter");
    00000240 D261                   MOV.L       L1019+6,R2 ; L541
    00000242 2F26                   MOV.L       R2,@-R15
    00000244 64F3                   MOV         R15,R4
    00000246 4C0B                   JSR         @R12
    00000248 743C                   ADD         #60,R4
    0000024A 7F04                   ADD         #4,R15
    0000024C              L877:                             
         parse.c   130        
         parse.c   131        if (strcmp(Identifier, "main") == 0)
    0000024C D55F                   MOV.L       L1019+10,R5; L542
    0000024E D360                   MOV.L       L1019+14,R3; __slow_strcmp1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000250 430B                   JSR         @R3
    00000252 6483                   MOV         R8,R4
    00000254 2008                   TST         R0,R0
    00000256 8B1E                   BF          L878
         parse.c   132        {
         parse.c   133            /* make sure it's int main() */
         parse.c   134            if ( FuncValue->Val->FuncDef.ReturnType != &IntType &&
         parse.c   135                 FuncValue->Val->FuncDef.ReturnType != &VoidType )
    00000258 54E1                   MOV.L       @(4,R14),R4
    0000025A 1F44                   MOV.L       R4,@(16,R15)
    0000025C 6442                   MOV.L       @R4,R4
    0000025E D35D                   MOV.L       L1019+18,R3; _IntType
    00000260 3430                   CMP/EQ      R3,R4
    00000262 8907                   BT          L879
    00000264 D15C                   MOV.L       L1019+22,R1; _VoidType
    00000266 3410                   CMP/EQ      R1,R4
    00000268 8904                   BT          L879
         parse.c   136                ProgramFail(Parser, "main() should return an int or void");
    0000026A D35C                   MOV.L       L1019+26,R3; L544
    0000026C 2F36                   MOV.L       R3,@-R15
    0000026E 4C0B                   JSR         @R12
    00000270 64D3                   MOV         R13,R4
    00000272 7F04                   ADD         #4,R15
    00000274              L879:                             
         parse.c   137    
         parse.c   138            if (FuncValue->Val->FuncDef.NumParams != 0 &&
         parse.c   139                 (FuncValue->Val->FuncDef.NumParams != 2 || FuncValue->Val->FuncDef.ParamType[0] != &IntType) 
                         +)
    00000274 55E1                   MOV.L       @(4,R14),R5
    00000276 5451                   MOV.L       @(4,R5),R4
    00000278 2448                   TST         R4,R4
    0000027A 890C                   BT          L878
    0000027C 6043                   MOV         R4,R0
    0000027E 8802                   CMP/EQ      #2,R0
    00000280 8B04                   BF          L881
    00000282 5253                   MOV.L       @(12,R5),R2
    00000284 D353                   MOV.L       L1019+18,R3; _IntType
    00000286 6122                   MOV.L       @R2,R1
    00000288 3130                   CMP/EQ      R3,R1
    0000028A 8904                   BT          L878
    0000028C              L881:                             
         parse.c   140                ProgramFail(Parser, "bad parameters to main()");
    0000028C D054                   MOV.L       L1019+30,R0; L545
    0000028E 2F06                   MOV.L       R0,@-R15
    00000290 4C0B                   JSR         @R12
    00000292 64D3                   MOV         R13,R4
    00000294 7F04                   ADD         #4,R15
    00000296              L878:                             
         parse.c   141        }
         parse.c   142        
         parse.c   143        /* look for a function body */
         parse.c   144        Token = LexGetToken(Parser, NULL, FALSE);
    00000296 E600                   MOV         #0,R6
    00000298 6563                   MOV         R6,R5
    0000029A 490B                   JSR         @R9
    0000029C 64D3                   MOV         R13,R4
         parse.c   145        if (Token == TokenSemicolon)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000029E 8832                   CMP/EQ      #50,R0
    000002A0 8F06                   BF/S        L882
    000002A2 6403                   MOV         R0,R4
         parse.c   146            LexGetToken(Parser, NULL, TRUE);    /* it's a prototype, absorb the trailing semicolon */
    000002A4 E601                   MOV         #1,R6
    000002A6 E500                   MOV         #0,R5
    000002A8 490B                   JSR         @R9
    000002AA 64D3                   MOV         R13,R4
    000002AC A04A                   BRA         L883
    000002AE 0009                   NOP
    000002B0              L882:                             
         parse.c   147        else
         parse.c   148        {
         parse.c   149            /* it's a full function definition with a body */
         parse.c   150            if (Token != TokenLeftBrace)
    000002B0 6043                   MOV         R4,R0
    000002B2 8834                   CMP/EQ      #52,R0
    000002B4 8904                   BT          L884
         parse.c   151                ProgramFail(Parser, "bad function definition");
    000002B6 D24B                   MOV.L       L1019+34,R2; L547
    000002B8 2F26                   MOV.L       R2,@-R15
    000002BA 4C0B                   JSR         @R12
    000002BC 64D3                   MOV         R13,R4
    000002BE 7F04                   ADD         #4,R15
    000002C0              L884:                             
         parse.c   152            
         parse.c   153            ParserCopy(&FuncBody, Parser);
    000002C0 65D3                   MOV         R13,R5
    000002C2 64F3                   MOV         R15,R4
    000002C4 B2A1                   BSR         _ParserCopy
    000002C6 7418                   ADD         #24,R4
         parse.c   154            if (ParseStatementMaybeRun(Parser, FALSE, TRUE) != ParseResultOk)
    000002C8 E601                   MOV         #1,R6
    000002CA E500                   MOV         #0,R5
    000002CC BEB7                   BSR         _ParseStatementMaybeRun
    000002CE 64D3                   MOV         R13,R4
    000002D0 8802                   CMP/EQ      #2,R0
    000002D2 8904                   BT          L885
         parse.c   155                ProgramFail(Parser, "function definition expected");
    000002D4 D244                   MOV.L       L1019+38,R2; L548
    000002D6 2F26                   MOV.L       R2,@-R15
    000002D8 4C0B                   JSR         @R12
    000002DA 64D3                   MOV         R13,R4
    000002DC 7F04                   ADD         #4,R15
    000002DE              L885:                             
         parse.c   156    
         parse.c   157            FuncValue->Val->FuncDef.Body = FuncBody;
    000002DE 62F3                   MOV         R15,R2
    000002E0 D342                   MOV.L       L1019+42,R3; __quick_evn_mvn
    000002E2 7218                   ADD         #24,R2
    000002E4 51E1                   MOV.L       @(4,R14),R1
    000002E6 7118                   ADD         #24,R1
    000002E8 430B                   JSR         @R3
    000002EA E020                   MOV         #32,R0
         parse.c   158            FuncValue->Val->FuncDef.Body.Pos = LexCopyTokens(&FuncBody, Parser);
    000002EC 52E1                   MOV.L       @(4,R14),R2
    000002EE E118                   MOV         #24,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002F0 D33F                   MOV.L       L1019+46,R3; _LexCopyTokens
    000002F2 65D3                   MOV         R13,R5
    000002F4 312C                   ADD         R2,R1
    000002F6 2F16                   MOV.L       R1,@-R15
    000002F8 64F3                   MOV         R15,R4
    000002FA 430B                   JSR         @R3
    000002FC 741C                   ADD         #28,R4
         parse.c   159    
         parse.c   160            /* is this function already in the global table? */
         parse.c   161            if (TableGet(&GlobalTable, Identifier, &OldFuncValue, NULL, NULL, NULL))
    000002FE E200                   MOV         #0,R2
    00000300 D43C                   MOV.L       L1019+50,R4; _GlobalTable
    00000302 6723                   MOV         R2,R7
    00000304 63F6                   MOV.L       @R15+,R3
    00000306 2302                   MOV.L       R0,@R3
    00000308 2F26                   MOV.L       R2,@-R15
    0000030A 2F26                   MOV.L       R2,@-R15
    0000030C D33A                   MOV.L       L1019+54,R3; _TableGet
    0000030E 66F3                   MOV         R15,R6
    00000310 7614                   ADD         #20,R6
    00000312 430B                   JSR         @R3
    00000314 6583                   MOV         R8,R5
    00000316 2008                   TST         R0,R0
    00000318 8D14                   BT/S        L883
    0000031A 7F08                   ADD         #8,R15
         parse.c   162            {
         parse.c   163                if (OldFuncValue->Val->FuncDef.Body.Pos == NULL)
    0000031C 53F3                   MOV.L       @(12,R15),R3
    0000031E 5231                   MOV.L       @(4,R3),R2
    00000320 5126                   MOV.L       @(24,R2),R1
    00000322 2118                   TST         R1,R1
    00000324 8B08                   BF          L887
         parse.c   164                {
         parse.c   165                    /* override an old function prototype */
         parse.c   166                    VariableFree(TableDelete(&GlobalTable, Identifier));
    00000326 D433                   MOV.L       L1019+50,R4; _GlobalTable
    00000328 D334                   MOV.L       L1019+58,R3; _TableDelete
    0000032A 430B                   JSR         @R3
    0000032C 6583                   MOV         R8,R5
    0000032E D234                   MOV.L       L1019+62,R2; _VariableFree
    00000330 420B                   JSR         @R2
    00000332 6403                   MOV         R0,R4
    00000334 A006                   BRA         L883
    00000336 0009                   NOP
    00000338              L887:                             
         parse.c   167                }
         parse.c   168                else
         parse.c   169                    ProgramFail(Parser, "'%s' is already defined", Identifier);
    00000338 2F86                   MOV.L       R8,@-R15
    0000033A D232                   MOV.L       L1019+66,R2; L551
    0000033C 2F26                   MOV.L       R2,@-R15
    0000033E 4C0B                   JSR         @R12
    00000340 64D3                   MOV         R13,R4
    00000342 7F08                   ADD         #8,R15
    00000344              L883:                             
         parse.c   170            }
         parse.c   171        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   172    
         parse.c   173        if (!TableSet(&GlobalTable, Identifier, FuncValue, (char *)Parser->FileName, Parser->Line, Parser->Cha
                         +racterPos))
    00000344 85D5                   MOV.W       @(10,R13),R0
    00000346 66E3                   MOV         R14,R6
    00000348 D42A                   MOV.L       L1019+50,R4; _GlobalTable
    0000034A 2F06                   MOV.L       R0,@-R15
    0000034C 85D4                   MOV.W       @(8,R13),R0
    0000034E 2F06                   MOV.L       R0,@-R15
    00000350 57D1                   MOV.L       @(4,R13),R7
    00000352 D32D                   MOV.L       L1019+70,R3; _TableSet
    00000354 430B                   JSR         @R3
    00000356 6583                   MOV         R8,R5
    00000358 2008                   TST         R0,R0
    0000035A 8F06                   BF/S        L889
    0000035C 7F08                   ADD         #8,R15
         parse.c   174            ProgramFail(Parser, "'%s' is already defined", Identifier);
    0000035E 2F86                   MOV.L       R8,@-R15
    00000360 D328                   MOV.L       L1019+66,R3; L551
    00000362 2F36                   MOV.L       R3,@-R15
    00000364 4C0B                   JSR         @R12
    00000366 64D3                   MOV         R13,R4
    00000368 7F08                   ADD         #8,R15
    0000036A              L889:                             
         parse.c   175            
         parse.c   176        return FuncValue;
    0000036A 60E3                   MOV         R14,R0
         parse.c   177    }
    0000036C 7F58                   ADD         #88,R15
    0000036E 4F26                   LDS.L       @R15+,PR
    00000370 68F6                   MOV.L       @R15+,R8
    00000372 69F6                   MOV.L       @R15+,R9
    00000374 6AF6                   MOV.L       @R15+,R10
    00000376 6BF6                   MOV.L       @R15+,R11
    00000378 6CF6                   MOV.L       @R15+,R12
    0000037A 6DF6                   MOV.L       @R15+,R13
    0000037C 000B                   RTS
    0000037E 6EF6                   MOV.L       @R15+,R14
         parse.c   178    
         parse.c   179    /* assign an initial value to a variable */
         parse.c   180    void ParseDeclarationAssignment(struct ParseState *Parser, struct Value *NewVariable, int DoAssignment)
    00000380              _ParseDeclarationAssignment:     ; function: ParseDeclarationAssignment
                                                           ; frame size=60
    00000380 2FE6                   MOV.L       R14,@-R15
    00000382 6E43                   MOV         R4,R14
         parse.c   181    {
         parse.c   182        struct Value *CValue;
         parse.c   183        int ArrayIndex;
         parse.c   184        enum LexToken Token = TokenComma;
         parse.c   185    
         parse.c   186        if (LexGetToken(Parser, NULL, FALSE) == TokenLeftBrace)
    00000384 D323                   MOV.L       L1019+82,R3; _LexGetToken
    00000386 2FD6                   MOV.L       R13,@-R15
    00000388 2FC6                   MOV.L       R12,@-R15
    0000038A ED00                   MOV         #0,R13
    0000038C 2FB6                   MOV.L       R11,@-R15
    0000038E 6C53                   MOV         R5,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000390 2FA6                   MOV.L       R10,@-R15
    00000392 EB01                   MOV         #1,R11
    00000394 2F96                   MOV.L       R9,@-R15
    00000396 65D3                   MOV         R13,R5
    00000398 DA1D                   MOV.L       L1019+78,R10; _ProgramFail
    0000039A 2F86                   MOV.L       R8,@-R15
    0000039C 4F22                   STS.L       PR,@-R15
    0000039E 4F12                   STS.L       MACL,@-R15
    000003A0 D81A                   MOV.L       L1019+74,R8; _VariableStackPop
    000003A2 7FF4                   ADD         #-12,R15
    000003A4 1F62                   MOV.L       R6,@(8,R15)
    000003A6 66D3                   MOV         R13,R6
    000003A8 430B                   JSR         @R3
    000003AA 64E3                   MOV         R14,R4
    000003AC 8834                   CMP/EQ      #52,R0
    000003AE 8901                   BT          L1020
    000003B0 A09D                   BRA         L891
    000003B2 0009                   NOP
    000003B4              L1020:                            
         parse.c   187        {
         parse.c   188            /* this is an array initialiser */
         parse.c   189            LexGetToken(Parser, NULL, TRUE);
    000003B4 D317                   MOV.L       L1019+82,R3; _LexGetToken
    000003B6 E601                   MOV         #1,R6
    000003B8 E500                   MOV         #0,R5
    000003BA 430B                   JSR         @R3
    000003BC 64E3                   MOV         R14,R4
         parse.c   190            
         parse.c   191            for (ArrayIndex = 0; (Parser->Mode != RunModeRun && Token == TokenComma) || (Parser->Mode == RunMo
                         +deRun && ArrayIndex < NewVariable->Typ->ArraySize); ArrayIndex++)
    000003BE A076                   BRA         L892
    000003C0 1FD1                   MOV.L       R13,@(4,R15)
    000003C2              L1019:                            
    000003C2 0000                   .DATA.W     0
    000003C4 <00000000>             .DATA.L     L540
    000003C8 <00000000>             .DATA.L     L541
    000003CC <00000000>             .DATA.L     L542
    000003D0 <00000000>             .DATA.L     __slow_strcmp1
    000003D4 <00000000>             .DATA.L     _IntType
    000003D8 <00000000>             .DATA.L     _VoidType
    000003DC <00000000>             .DATA.L     L544
    000003E0 <00000000>             .DATA.L     L545
    000003E4 <00000000>             .DATA.L     L547
    000003E8 <00000000>             .DATA.L     L548
    000003EC <00000000>             .DATA.L     __quick_evn_mvn
    000003F0 <00000000>             .DATA.L     _LexCopyTokens
    000003F4 <00000000>             .DATA.L     _GlobalTable
    000003F8 <00000000>             .DATA.L     _TableGet
    000003FC <00000000>             .DATA.L     _TableDelete
    00000400 <00000000>             .DATA.L     _VariableFree
    00000404 <00000000>             .DATA.L     L551
    00000408 <00000000>             .DATA.L     _TableSet
    0000040C <00000000>             .DATA.L     _VariableStackPop
    00000410 <00000000>             .DATA.L     _ProgramFail
    00000414 <00000000>             .DATA.L     _LexGetToken
    00000418              L893:                             
         parse.c   192            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   193                struct Value *ArrayElement = NULL;
         parse.c   194                
         parse.c   195                if (Token != TokenComma)
    00000418 60B3                   MOV         R11,R0
    0000041A 8801                   CMP/EQ      #1,R0
    0000041C 8D05                   BT/S        L894
    0000041E 69D3                   MOV         R13,R9
         parse.c   196                    ProgramFail(Parser, "comma expected");
    00000420 D383                   MOV.L       L1021+2,R3 ; L540
    00000422 2F36                   MOV.L       R3,@-R15
    00000424 4A0B                   JSR         @R10
    00000426 64E3                   MOV         R14,R4
    00000428 7F04                   ADD         #4,R15
    0000042A              L894:                             
         parse.c   197                    
         parse.c   198                if (Parser->Mode == RunModeRun)
    0000042A 52E3                   MOV.L       @(12,R14),R2
    0000042C 2228                   TST         R2,R2
    0000042E 8B14                   BF          L895
         parse.c   199                    ArrayElement = VariableAllocValueFromExistingData(Parser, NewVariable->Typ->FromType, (uni
                         +on AnyValue *)(&NewVariable->Val->ArrayMem[0] + TypeSize(NewVariable->Typ->FromType, 0, TRUE) * ArrayIndex
                         +), TRUE, NewVariable);
    00000430 2FC6                   MOV.L       R12,@-R15
    00000432 E601                   MOV         #1,R6
    00000434 D37F                   MOV.L       L1021+6,R3 ; _TypeSize
    00000436 E500                   MOV         #0,R5
    00000438 59C1                   MOV.L       @(4,R12),R9
    0000043A 64C2                   MOV.L       @R12,R4
    0000043C 430B                   JSR         @R3
    0000043E 5445                   MOV.L       @(20,R4),R4
    00000440 52F2                   MOV.L       @(8,R15),R2
    00000442 64E3                   MOV         R14,R4
    00000444 D37C                   MOV.L       L1021+10,R3; _VariableAllocValueFromExistingData
    00000446 0027                   MUL.L       R2,R0
    00000448 65C2                   MOV.L       @R12,R5
    0000044A 001A                   STS         MACL,R0
    0000044C 5555                   MOV.L       @(20,R5),R5
    0000044E 390C                   ADD         R0,R9
    00000450 6693                   MOV         R9,R6
    00000452 430B                   JSR         @R3
    00000454 E701                   MOV         #1,R7
    00000456 7F04                   ADD         #4,R15
    00000458 6903                   MOV         R0,R9
    0000045A              L895:                             
         parse.c   200                    
         parse.c   201                if (!ExpressionParse(Parser, &CValue))
    0000045A 65F3                   MOV         R15,R5
    0000045C D277                   MOV.L       L1021+14,R2; _ExpressionParse
    0000045E 420B                   JSR         @R2
    00000460 64E3                   MOV         R14,R4
    00000462 2008                   TST         R0,R0
    00000464 8B04                   BF          L896
         parse.c   202                    ProgramFail(Parser, "expression expected");
    00000466 D276                   MOV.L       L1021+18,R2; L563
    00000468 2F26                   MOV.L       R2,@-R15
    0000046A 4A0B                   JSR         @R10
    0000046C 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000046E 7F04                   ADD         #4,R15
    00000470              L896:                             
         parse.c   203                    
         parse.c   204                if (Parser->Mode == RunModeRun && DoAssignment)
    00000470 53E3                   MOV.L       @(12,R14),R3
    00000472 2338                   TST         R3,R3
    00000474 8B12                   BF          L897
    00000476 53F2                   MOV.L       @(8,R15),R3
    00000478 2338                   TST         R3,R3
    0000047A 890F                   BT          L897
         parse.c   205                {
         parse.c   206                    ExpressionAssign(Parser, ArrayElement, CValue, FALSE, NULL, 0, FALSE);
    0000047C 2FD6                   MOV.L       R13,@-R15
    0000047E E700                   MOV         #0,R7
    00000480 D370                   MOV.L       L1021+22,R3; _ExpressionAssign
    00000482 6593                   MOV         R9,R5
    00000484 2FD6                   MOV.L       R13,@-R15
    00000486 2FD6                   MOV.L       R13,@-R15
    00000488 56F3                   MOV.L       @(12,R15),R6
    0000048A 430B                   JSR         @R3
    0000048C 64E3                   MOV         R14,R4
    0000048E 7F0C                   ADD         #12,R15
         parse.c   207                    VariableStackPop(Parser, CValue);
    00000490 65F2                   MOV.L       @R15,R5
    00000492 480B                   JSR         @R8
    00000494 64E3                   MOV         R14,R4
         parse.c   208                    VariableStackPop(Parser, ArrayElement);
    00000496 6593                   MOV         R9,R5
    00000498 480B                   JSR         @R8
    0000049A 64E3                   MOV         R14,R4
    0000049C              L897:                             
         parse.c   209                }
         parse.c   210                
         parse.c   211                Token = LexGetToken(Parser, NULL, TRUE);
    0000049C D36A                   MOV.L       L1021+26,R3; _LexGetToken
    0000049E E601                   MOV         #1,R6
    000004A0 E500                   MOV         #0,R5
    000004A2 430B                   JSR         @R3
    000004A4 64E3                   MOV         R14,R4
    000004A6 6B03                   MOV         R0,R11
    000004A8 52F1                   MOV.L       @(4,R15),R2
    000004AA 7201                   ADD         #1,R2
    000004AC 1F21                   MOV.L       R2,@(4,R15)
    000004AE              L892:                             
    000004AE 53E3                   MOV.L       @(12,R14),R3
    000004B0 2338                   TST         R3,R3
    000004B2 8902                   BT          L898
    000004B4 60B3                   MOV         R11,R0
    000004B6 8801                   CMP/EQ      #1,R0
    000004B8 89AE                   BT          L893
    000004BA              L898:                             
    000004BA 52E3                   MOV.L       @(12,R14),R2
    000004BC 2228                   TST         R2,R2
    000004BE 8B04                   BF          L899
    000004C0 63C2                   MOV.L       @R12,R3
    000004C2 5231                   MOV.L       @(4,R3),R2
    000004C4 51F1                   MOV.L       @(4,R15),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004C6 3123                   CMP/GE      R2,R1
    000004C8 8BA6                   BF          L893
    000004CA              L899:                             
         parse.c   212            }
         parse.c   213            
         parse.c   214            if (Token == TokenComma)
    000004CA 60B3                   MOV         R11,R0
    000004CC 8801                   CMP/EQ      #1,R0
    000004CE 8B05                   BF          L900
         parse.c   215                Token = LexGetToken(Parser, NULL, TRUE);
    000004D0 D35D                   MOV.L       L1021+26,R3; _LexGetToken
    000004D2 E601                   MOV         #1,R6
    000004D4 E500                   MOV         #0,R5
    000004D6 430B                   JSR         @R3
    000004D8 64E3                   MOV         R14,R4
    000004DA 6B03                   MOV         R0,R11
    000004DC              L900:                             
         parse.c   216    
         parse.c   217            if (Token != TokenRightBrace)
    000004DC 60B3                   MOV         R11,R0
    000004DE 8835                   CMP/EQ      #53,R0
    000004E0 8923                   BT          L902
         parse.c   218                ProgramFail(Parser, "'}' expected");
    000004E2 D35A                   MOV.L       L1021+30,R3; L565
    000004E4 2F36                   MOV.L       R3,@-R15
    000004E6 4A0B                   JSR         @R10
    000004E8 64E3                   MOV         R14,R4
    000004EA A01E                   BRA         L902
    000004EC 7F04                   ADD         #4,R15
    000004EE              L891:                             
         parse.c   219        }
         parse.c   220        else
         parse.c   221        {
         parse.c   222            /* this is a normal expression initialiser */
         parse.c   223            if (!ExpressionParse(Parser, &CValue))
    000004EE 65F3                   MOV         R15,R5
    000004F0 D352                   MOV.L       L1021+14,R3; _ExpressionParse
    000004F2 430B                   JSR         @R3
    000004F4 64E3                   MOV         R14,R4
    000004F6 2008                   TST         R0,R0
    000004F8 8B04                   BF          L903
         parse.c   224                ProgramFail(Parser, "expression expected");
    000004FA D351                   MOV.L       L1021+18,R3; L563
    000004FC 2F36                   MOV.L       R3,@-R15
    000004FE 4A0B                   JSR         @R10
    00000500 64E3                   MOV         R14,R4
    00000502 7F04                   ADD         #4,R15
    00000504              L903:                             
         parse.c   225                
         parse.c   226            if (Parser->Mode == RunModeRun && DoAssignment)
    00000504 52E3                   MOV.L       @(12,R14),R2
    00000506 2228                   TST         R2,R2
    00000508 8B0F                   BF          L902
    0000050A 53F2                   MOV.L       @(8,R15),R3
    0000050C 2338                   TST         R3,R3
    0000050E 890C                   BT          L902
         parse.c   227            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   228                ExpressionAssign(Parser, NewVariable, CValue, FALSE, NULL, 0, FALSE);
    00000510 2FD6                   MOV.L       R13,@-R15
    00000512 E700                   MOV         #0,R7
    00000514 D34B                   MOV.L       L1021+22,R3; _ExpressionAssign
    00000516 65C3                   MOV         R12,R5
    00000518 2FD6                   MOV.L       R13,@-R15
    0000051A 2FD6                   MOV.L       R13,@-R15
    0000051C 56F3                   MOV.L       @(12,R15),R6
    0000051E 430B                   JSR         @R3
    00000520 64E3                   MOV         R14,R4
    00000522 7F0C                   ADD         #12,R15
         parse.c   229                VariableStackPop(Parser, CValue);
    00000524 65F2                   MOV.L       @R15,R5
    00000526 480B                   JSR         @R8
    00000528 64E3                   MOV         R14,R4
    0000052A              L902:                             
         parse.c   230            }
         parse.c   231        }
         parse.c   232    }
    0000052A 7F0C                   ADD         #12,R15
    0000052C 4F16                   LDS.L       @R15+,MACL
    0000052E 4F26                   LDS.L       @R15+,PR
    00000530 68F6                   MOV.L       @R15+,R8
    00000532 69F6                   MOV.L       @R15+,R9
    00000534 6AF6                   MOV.L       @R15+,R10
    00000536 6BF6                   MOV.L       @R15+,R11
    00000538 6CF6                   MOV.L       @R15+,R12
    0000053A 6DF6                   MOV.L       @R15+,R13
    0000053C 000B                   RTS
    0000053E 6EF6                   MOV.L       @R15+,R14
         parse.c   233    
         parse.c   234    /* declare a variable or function */
         parse.c   235    int ParseDeclaration(struct ParseState *Parser, enum LexToken Token)
    00000540              _ParseDeclaration:               ; function: ParseDeclaration
                                                           ; frame size=56
    00000540 2FE6                   MOV.L       R14,@-R15
    00000542 6E43                   MOV         R4,R14
         parse.c   236    {
         parse.c   237        char *Identifier;
         parse.c   238        struct ValueType *BasicType;
         parse.c   239        struct ValueType *Typ;
         parse.c   240        struct Value *NewVariable = NULL;
         parse.c   241        int IsStatic = FALSE;
         parse.c   242        int FirstVisit = FALSE;
         parse.c   243    
         parse.c   244        TypeParseFront(Parser, &BasicType, &IsStatic);
    00000544 D342                   MOV.L       L1021+34,R3; _TypeParseFront
    00000546 E400                   MOV         #0,R4
    00000548 2FD6                   MOV.L       R13,@-R15
    0000054A 2FC6                   MOV.L       R12,@-R15
    0000054C 2FB6                   MOV.L       R11,@-R15
    0000054E 6C53                   MOV         R5,R12
    00000550 2FA6                   MOV.L       R10,@-R15
    00000552 6A43                   MOV         R4,R10
    00000554 2F96                   MOV.L       R9,@-R15
    00000556 2F86                   MOV.L       R8,@-R15
    00000558 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000055A 7FEC                   ADD         #-20,R15
    0000055C 1F42                   MOV.L       R4,@(8,R15)
    0000055E 66F3                   MOV         R15,R6
    00000560 1F43                   MOV.L       R4,@(12,R15)
    00000562 65F3                   MOV         R15,R5
    00000564 7608                   ADD         #8,R6
    00000566 7510                   ADD         #16,R5
    00000568 430B                   JSR         @R3
    0000056A 64E3                   MOV         R14,R4
    0000056C D839                   MOV.L       L1021+38,R8; _VariableDefineButIgnoreIdentical
    0000056E D93A                   MOV.L       L1021+42,R9; _TypeParseIdentPart
    00000570 DB3A                   MOV.L       L1021+46,R11; _ProgramFail
    00000572 DD35                   MOV.L       L1021+26,R13; _LexGetToken
         parse.c   245        do
    00000574              L905:                             
         parse.c   246        {
         parse.c   247            TypeParseIdentPart(Parser, BasicType, &Typ, &Identifier);
    00000574 55F4                   MOV.L       @(16,R15),R5
    00000576 67F3                   MOV         R15,R7
    00000578 66F3                   MOV         R15,R6
    0000057A 7604                   ADD         #4,R6
    0000057C 490B                   JSR         @R9
    0000057E 64E3                   MOV         R14,R4
         parse.c   248            if ((Token != TokenVoidType && Token != TokenStructType && Token != TokenUnionType && Token != Tok
                         +enEnumType) && Identifier == StrEmpty)
    00000580 60C3                   MOV         R12,R0
    00000582 883A                   CMP/EQ      #58,R0
    00000584 8912                   BT          L906
    00000586 60C3                   MOV         R12,R0
    00000588 8843                   CMP/EQ      #67,R0
    0000058A 890F                   BT          L906
    0000058C 60C3                   MOV         R12,R0
    0000058E 8844                   CMP/EQ      #68,R0
    00000590 890C                   BT          L906
    00000592 60C3                   MOV         R12,R0
    00000594 883B                   CMP/EQ      #59,R0
    00000596 8909                   BT          L906
    00000598 D131                   MOV.L       L1021+50,R1; _StrEmpty
    0000059A 6312                   MOV.L       @R1,R3
    0000059C 62F2                   MOV.L       @R15,R2
    0000059E 3230                   CMP/EQ      R3,R2
    000005A0 8B04                   BF          L906
         parse.c   249                ProgramFail(Parser, "identifier expected");
    000005A2 D330                   MOV.L       L1021+54,R3; L579
    000005A4 2F36                   MOV.L       R3,@-R15
    000005A6 4B0B                   JSR         @R11
    000005A8 64E3                   MOV         R14,R4
    000005AA 7F04                   ADD         #4,R15
    000005AC              L906:                             
         parse.c   250                
         parse.c   251            if (Identifier != StrEmpty)
    000005AC D12C                   MOV.L       L1021+50,R1; _StrEmpty
    000005AE 6212                   MOV.L       @R1,R2
    000005B0 63F2                   MOV.L       @R15,R3
    000005B2 3320                   CMP/EQ      R2,R3
    000005B4 8960                   BT          L907
         parse.c   252            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   253                /* handle function definitions */
         parse.c   254                if (LexGetToken(Parser, NULL, FALSE) == TokenOpenBracket)
    000005B6 E600                   MOV         #0,R6
    000005B8 6563                   MOV         R6,R5
    000005BA 4D0B                   JSR         @R13
    000005BC 64E3                   MOV         R14,R4
    000005BE 882B                   CMP/EQ      #43,R0
    000005C0 8B05                   BF          L908
         parse.c   255                {
         parse.c   256                    ParseFunctionDefinition(Parser, Typ, Identifier);
    000005C2 66F2                   MOV.L       @R15,R6
    000005C4 55F1                   MOV.L       @(4,R15),R5
    000005C6 BD82                   BSR         _ParseFunctionDefinition
    000005C8 64E3                   MOV         R14,R4
         parse.c   257                    return FALSE;
    000005CA A066                   BRA         L909
    000005CC E000                   MOV         #0,R0
    000005CE              L908:                             
         parse.c   258                }
         parse.c   259                else
         parse.c   260                {
         parse.c   261                    if (Typ == &VoidType && Identifier != StrEmpty)
    000005CE D326                   MOV.L       L1021+58,R3; _VoidType
    000005D0 52F1                   MOV.L       @(4,R15),R2
    000005D2 3230                   CMP/EQ      R3,R2
    000005D4 8B09                   BF          L911
    000005D6 D122                   MOV.L       L1021+50,R1; _StrEmpty
    000005D8 6212                   MOV.L       @R1,R2
    000005DA 61F2                   MOV.L       @R15,R1
    000005DC 3120                   CMP/EQ      R2,R1
    000005DE 8904                   BT          L911
         parse.c   262                        ProgramFail(Parser, "can't define a void variable");
    000005E0 D322                   MOV.L       L1021+62,R3; L583
    000005E2 2F36                   MOV.L       R3,@-R15
    000005E4 4B0B                   JSR         @R11
    000005E6 64E3                   MOV         R14,R4
    000005E8 7F04                   ADD         #4,R15
    000005EA              L911:                             
         parse.c   263                        
         parse.c   264                    if (Parser->Mode == RunModeRun || Parser->Mode == RunModeGoto)
    000005EA 54E3                   MOV.L       @(12,R14),R4
    000005EC 2448                   TST         R4,R4
    000005EE 8902                   BT          L913
    000005F0 6043                   MOV         R4,R0
    000005F2 8806                   CMP/EQ      #6,R0
    000005F4 8B09                   BF          L912
    000005F6              L913:                             
         parse.c   265                        NewVariable = VariableDefineButIgnoreIdentical(Parser, Identifier, Typ, IsStatic, &Fir
                         +stVisit);
    000005F6 62F3                   MOV         R15,R2
    000005F8 720C                   ADD         #12,R2
    000005FA 2F26                   MOV.L       R2,@-R15
    000005FC 57F3                   MOV.L       @(12,R15),R7
    000005FE 56F2                   MOV.L       @(8,R15),R6
    00000600 55F1                   MOV.L       @(4,R15),R5
    00000602 480B                   JSR         @R8
    00000604 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000606 7F04                   ADD         #4,R15
    00000608 6A03                   MOV         R0,R10
    0000060A              L912:                             
         parse.c   266                    
         parse.c   267                    if (LexGetToken(Parser, NULL, FALSE) == TokenAssign)
    0000060A E600                   MOV         #0,R6
    0000060C 6563                   MOV         R6,R5
    0000060E 4D0B                   JSR         @R13
    00000610 64E3                   MOV         R14,R4
    00000612 8802                   CMP/EQ      #2,R0
    00000614 8B30                   BF          L907
         parse.c   268                    {
         parse.c   269                        /* we're assigning an initial value */
         parse.c   270                        LexGetToken(Parser, NULL, TRUE);
    00000616 E601                   MOV         #1,R6
    00000618 E500                   MOV         #0,R5
    0000061A 4D0B                   JSR         @R13
    0000061C 64E3                   MOV         R14,R4
         parse.c   271                        ParseDeclarationAssignment(Parser, NewVariable, !IsStatic || FirstVisit);
    0000061E 52F2                   MOV.L       @(8,R15),R2
    00000620 2228                   TST         R2,R2
    00000622 8925                   BT          L915
    00000624 53F3                   MOV.L       @(12,R15),R3
    00000626 2338                   TST         R3,R3
    00000628 8B22                   BF          L915
    0000062A A022                   BRA         L916
    0000062C E600                   MOV         #0,R6
    0000062E              L1021:                            
    0000062E 0000                   .DATA.W     0
    00000630 <00000000>             .DATA.L     L540
    00000634 <00000000>             .DATA.L     _TypeSize
    00000638 <00000000>             .DATA.L     _VariableAllocValueFromExistingData
    0000063C <00000000>             .DATA.L     _ExpressionParse
    00000640 <00000000>             .DATA.L     L563
    00000644 <00000000>             .DATA.L     _ExpressionAssign
    00000648 <00000000>             .DATA.L     _LexGetToken
    0000064C <00000000>             .DATA.L     L565
    00000650 <00000000>             .DATA.L     _TypeParseFront
    00000654 <00000000>             .DATA.L     _VariableDefineButIgnoreIdentical
    00000658 <00000000>             .DATA.L     _TypeParseIdentPart
    0000065C <00000000>             .DATA.L     _ProgramFail
    00000660 <00000000>             .DATA.L     _StrEmpty
    00000664 <00000000>             .DATA.L     L579
    00000668 <00000000>             .DATA.L     _VoidType
    0000066C <00000000>             .DATA.L     L583
    00000670              L915:                             
    00000670 E601                   MOV         #1,R6
    00000672              L916:                             
    00000672 65A3                   MOV         R10,R5
    00000674 BE84                   BSR         _ParseDeclarationAssignment
    00000676 64E3                   MOV         R14,R4
    00000678              L907:                             
         parse.c   272                    }
         parse.c   273                }
         parse.c   274            }
         parse.c   275            
         parse.c   276            Token = LexGetToken(Parser, NULL, FALSE);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000678 E600                   MOV         #0,R6
    0000067A 6563                   MOV         R6,R5
    0000067C 4D0B                   JSR         @R13
    0000067E 64E3                   MOV         R14,R4
         parse.c   277            if (Token == TokenComma)
    00000680 8801                   CMP/EQ      #1,R0
    00000682 8F04                   BF/S        L917
    00000684 6C03                   MOV         R0,R12
         parse.c   278                LexGetToken(Parser, NULL, TRUE);
    00000686 E601                   MOV         #1,R6
    00000688 E500                   MOV         #0,R5
    0000068A 4D0B                   JSR         @R13
    0000068C 64E3                   MOV         R14,R4
    0000068E              L917:                             
         parse.c   279                
         parse.c   280        } while (Token == TokenComma);
    0000068E 60C3                   MOV         R12,R0
    00000690 8801                   CMP/EQ      #1,R0
    00000692 8B01                   BF          L1022
    00000694 AF6E                   BRA         L905
    00000696 0009                   NOP
    00000698              L1022:                            
         parse.c   281        
         parse.c   282        return TRUE;
    00000698 E001                   MOV         #1,R0
         parse.c   283    }
    0000069A              L909:                             
    0000069A 7F14                   ADD         #20,R15
    0000069C 4F26                   LDS.L       @R15+,PR
    0000069E 68F6                   MOV.L       @R15+,R8
    000006A0 69F6                   MOV.L       @R15+,R9
    000006A2 6AF6                   MOV.L       @R15+,R10
    000006A4 6BF6                   MOV.L       @R15+,R11
    000006A6 6CF6                   MOV.L       @R15+,R12
    000006A8 6DF6                   MOV.L       @R15+,R13
    000006AA 000B                   RTS
    000006AC 6EF6                   MOV.L       @R15+,R14
         parse.c   284    
         parse.c   285    /* parse a #define macro definition and store it for later */
         parse.c   286    void ParseMacroDefinition(struct ParseState *Parser)
    000006AE              _ParseMacroDefinition:           ; function: ParseMacroDefinition
                                                           ; frame size=84
         parse.c   287    {
         parse.c   288        struct Value *MacroName;
         parse.c   289        char *MacroNameStr;
         parse.c   290        struct Value *ParamName;
         parse.c   291        struct Value *MacroValue;
         parse.c   292    
         parse.c   293        if (LexGetToken(Parser, &MacroName, TRUE) != TokenIdentifier)
    000006AE E601                   MOV         #1,R6
    000006B0 2FE6                   MOV.L       R14,@-R15
    000006B2 6E43                   MOV         R4,R14
    000006B4 2FD6                   MOV.L       R13,@-R15
    000006B6 2FC6                   MOV.L       R12,@-R15
    000006B8 2FB6                   MOV.L       R11,@-R15
    000006BA 2FA6                   MOV.L       R10,@-R15
    000006BC 2F96                   MOV.L       R9,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006BE 2F86                   MOV.L       R8,@-R15
    000006C0 4F22                   STS.L       PR,@-R15
    000006C2 7FD4                   ADD         #-44,R15
    000006C4 DA6E                   MOV.L       L1023,R10  ; _ProgramFail
    000006C6 65F3                   MOV         R15,R5
    000006C8 DB6E                   MOV.L       L1023+4,R11; _LexGetToken
    000006CA 4B0B                   JSR         @R11
    000006CC 7504                   ADD         #4,R5
    000006CE 882D                   CMP/EQ      #45,R0
    000006D0 8904                   BT          L918
         parse.c   294            ProgramFail(Parser, "identifier expected");
    000006D2 D26D                   MOV.L       L1023+8,R2 ; L579
    000006D4 2F26                   MOV.L       R2,@-R15
    000006D6 4A0B                   JSR         @R10
    000006D8 64E3                   MOV         R14,R4
    000006DA 7F04                   ADD         #4,R15
    000006DC              L918:                             
         parse.c   295        
         parse.c   296        MacroNameStr = MacroName->Val->Identifier;
    000006DC 59F1                   MOV.L       @(4,R15),R9
    000006DE 5991                   MOV.L       @(4,R9),R9
         parse.c   297        
         parse.c   298        if (LexRawPeekToken(Parser) == TokenOpenMacroBracket)
    000006E0 D36A                   MOV.L       L1023+12,R3; _LexRawPeekToken
    000006E2 6992                   MOV.L       @R9,R9
    000006E4 430B                   JSR         @R3
    000006E6 64E3                   MOV         R14,R4
    000006E8 885C                   CMP/EQ      #92,R0
    000006EA 8B4F                   BF          L919
         parse.c   299        {
         parse.c   300            /* it's a parameterised macro, read the parameters */
         parse.c   301            enum LexToken Token = LexGetToken(Parser, NULL, TRUE);
    000006EC E601                   MOV         #1,R6
    000006EE E500                   MOV         #0,R5
    000006F0 4B0B                   JSR         @R11
    000006F2 64E3                   MOV         R14,R4
         parse.c   302            struct ParseState ParamParser;
         parse.c   303            int NumParams;
         parse.c   304            int ParamCount = 0;
    000006F4 E800                   MOV         #0,R8
         parse.c   305            
         parse.c   306            ParserCopy(&ParamParser, Parser);
    000006F6 65E3                   MOV         R14,R5
    000006F8 64F3                   MOV         R15,R4
    000006FA B086                   BSR         _ParserCopy
    000006FC 740C                   ADD         #12,R4
         parse.c   307            NumParams = ParseCountParams(&ParamParser);
    000006FE 64F3                   MOV         R15,R4
    00000700 BCC0                   BSR         _ParseCountParams
    00000702 740C                   ADD         #12,R4
         parse.c   308            MacroValue = VariableAllocValueAndData(Parser, sizeof(struct MacroDef) + sizeof(const char *) * Nu
                         +mParams, FALSE, NULL, TRUE);
    00000704 D262                   MOV.L       L1023+16,R2; _VariableAllocValueAndData
    00000706 6D03                   MOV         R0,R13
    00000708 E301                   MOV         #1,R3
    0000070A 6783                   MOV         R8,R7
    0000070C 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000070E 6683                   MOV         R8,R6
    00000710 65D3                   MOV         R13,R5
    00000712 4508                   SHLL2       R5
    00000714 7528                   ADD         #40,R5
    00000716 420B                   JSR         @R2
    00000718 64E3                   MOV         R14,R4
    0000071A 7F04                   ADD         #4,R15
    0000071C 6C03                   MOV         R0,R12
         parse.c   309            MacroValue->Val->MacroDef.NumParams = NumParams;
         parse.c   310            MacroValue->Val->MacroDef.ParamName = (char **)((char *)MacroValue->Val + sizeof(struct MacroDef))
                         +;
         parse.c   311    
         parse.c   312            Token = LexGetToken(Parser, &ParamName, TRUE);
    0000071E E601                   MOV         #1,R6
    00000720 53C1                   MOV.L       @(4,R12),R3
    00000722 65F3                   MOV         R15,R5
    00000724 23D2                   MOV.L       R13,@R3
    00000726 54C1                   MOV.L       @(4,R12),R4
    00000728 6243                   MOV         R4,R2
    0000072A 7228                   ADD         #40,R2
    0000072C 1421                   MOV.L       R2,@(4,R4)
    0000072E 4B0B                   JSR         @R11
    00000730 64E3                   MOV         R14,R4
         parse.c   313            
         parse.c   314            while (Token == TokenIdentifier)
    00000732 882D                   CMP/EQ      #45,R0
    00000734 8F21                   BF/S        L920
    00000736 6D03                   MOV         R0,R13
    00000738              L921:                             
         parse.c   315            {
         parse.c   316                /* store a parameter name */
         parse.c   317                MacroValue->Val->MacroDef.ParamName[ParamCount++] = ParamName->Val->Identifier;
    00000738 50C1                   MOV.L       @(4,R12),R0
    0000073A 6383                   MOV         R8,R3
    0000073C 62F2                   MOV.L       @R15,R2
         parse.c   318                
         parse.c   319                /* get the trailing comma */
         parse.c   320                Token = LexGetToken(Parser, NULL, TRUE);
    0000073E E601                   MOV         #1,R6
    00000740 5001                   MOV.L       @(4,R0),R0
    00000742 E500                   MOV         #0,R5
    00000744 5221                   MOV.L       @(4,R2),R2
    00000746 7801                   ADD         #1,R8
    00000748 6122                   MOV.L       @R2,R1
    0000074A 4308                   SHLL2       R3
    0000074C 0316                   MOV.L       R1,@(R0,R3)
    0000074E 4B0B                   JSR         @R11
    00000750 64E3                   MOV         R14,R4
         parse.c   321                if (Token == TokenComma)
    00000752 8801                   CMP/EQ      #1,R0
    00000754 8F06                   BF/S        L922
    00000756 6D03                   MOV         R0,R13
         parse.c   322                    Token = LexGetToken(Parser, &ParamName, TRUE);
    00000758 E601                   MOV         #1,R6
    0000075A 65F3                   MOV         R15,R5
    0000075C 4B0B                   JSR         @R11
    0000075E 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000760 A008                   BRA         L923
    00000762 6D03                   MOV         R0,R13
    00000764              L922:                             
         parse.c   323                    
         parse.c   324                else if (Token != TokenCloseBracket)
    00000764 60D3                   MOV         R13,R0
    00000766 882C                   CMP/EQ      #44,R0
    00000768 8904                   BT          L923
         parse.c   325                    ProgramFail(Parser, "comma expected");
    0000076A D24A                   MOV.L       L1023+20,R2; L540
    0000076C 2F26                   MOV.L       R2,@-R15
    0000076E 4A0B                   JSR         @R10
    00000770 64E3                   MOV         R14,R4
    00000772 7F04                   ADD         #4,R15
    00000774              L923:                             
    00000774 60D3                   MOV         R13,R0
    00000776 882D                   CMP/EQ      #45,R0
    00000778 89DE                   BT          L921
    0000077A              L920:                             
         parse.c   326            }
         parse.c   327            
         parse.c   328            if (Token != TokenCloseBracket)
    0000077A 60D3                   MOV         R13,R0
    0000077C 882C                   CMP/EQ      #44,R0
    0000077E 8912                   BT          L926
         parse.c   329                ProgramFail(Parser, "close bracket expected");
    00000780 D345                   MOV.L       L1023+24,R3; L598
    00000782 2F36                   MOV.L       R3,@-R15
    00000784 4A0B                   JSR         @R10
    00000786 64E3                   MOV         R14,R4
    00000788 A00D                   BRA         L926
    0000078A 7F04                   ADD         #4,R15
    0000078C              L919:                             
         parse.c   330        }
         parse.c   331        else
         parse.c   332        {
         parse.c   333            /* allocate a simple unparameterised macro */
         parse.c   334            MacroValue = VariableAllocValueAndData(Parser, sizeof(struct MacroDef), FALSE, NULL, TRUE);
    0000078C D240                   MOV.L       L1023+16,R2; _VariableAllocValueAndData
    0000078E E301                   MOV         #1,R3
    00000790 2F36                   MOV.L       R3,@-R15
    00000792 E700                   MOV         #0,R7
    00000794 6673                   MOV         R7,R6
    00000796 E528                   MOV         #40,R5
    00000798 420B                   JSR         @R2
    0000079A 64E3                   MOV         R14,R4
    0000079C 7F04                   ADD         #4,R15
    0000079E 6C03                   MOV         R0,R12
         parse.c   335            MacroValue->Val->MacroDef.NumParams = 0;
    000007A0 53C1                   MOV.L       @(4,R12),R3
    000007A2 E200                   MOV         #0,R2
    000007A4 2322                   MOV.L       R2,@R3
    000007A6              L926:                             
         parse.c   336        }
         parse.c   337        
         parse.c   338        /* copy the body of the macro to execute later */
         parse.c   339        ParserCopy(&MacroValue->Val->MacroDef.Body, Parser);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007A6 65E3                   MOV         R14,R5
    000007A8 54C1                   MOV.L       @(4,R12),R4
    000007AA B02E                   BSR         _ParserCopy
    000007AC 7408                   ADD         #8,R4
         parse.c   340        MacroValue->Typ = &MacroType;
    000007AE D23B                   MOV.L       L1023+28,R2; _MacroType
         parse.c   341        LexToEndOfLine(Parser);
    000007B0 D33B                   MOV.L       L1023+32,R3; _LexToEndOfLine
    000007B2 2C22                   MOV.L       R2,@R12
    000007B4 430B                   JSR         @R3
    000007B6 64E3                   MOV         R14,R4
         parse.c   342        MacroValue->Val->MacroDef.Body.Pos = LexCopyTokens(&MacroValue->Val->MacroDef.Body, Parser);
    000007B8 52C1                   MOV.L       @(4,R12),R2
    000007BA E108                   MOV         #8,R1
    000007BC D339                   MOV.L       L1023+36,R3; _LexCopyTokens
    000007BE 65E3                   MOV         R14,R5
    000007C0 1F22                   MOV.L       R2,@(8,R15)
    000007C2 312C                   ADD         R2,R1
    000007C4 2F16                   MOV.L       R1,@-R15
    000007C6 54F3                   MOV.L       @(12,R15),R4
    000007C8 430B                   JSR         @R3
    000007CA 7408                   ADD         #8,R4
    000007CC 63F6                   MOV.L       @R15+,R3
         parse.c   343        
         parse.c   344        if (!TableSet(&GlobalTable, MacroNameStr, MacroValue, (char *)Parser->FileName, Parser->Line, Parser->
                         +CharacterPos))
    000007CE 66C3                   MOV         R12,R6
    000007D0 D435                   MOV.L       L1023+40,R4; _GlobalTable
    000007D2 2302                   MOV.L       R0,@R3
    000007D4 85E5                   MOV.W       @(10,R14),R0
    000007D6 2F06                   MOV.L       R0,@-R15
    000007D8 85E4                   MOV.W       @(8,R14),R0
    000007DA 2F06                   MOV.L       R0,@-R15
    000007DC 57E1                   MOV.L       @(4,R14),R7
    000007DE D333                   MOV.L       L1023+44,R3; _TableSet
    000007E0 430B                   JSR         @R3
    000007E2 6593                   MOV         R9,R5
    000007E4 2008                   TST         R0,R0
    000007E6 8F06                   BF/S        L927
    000007E8 7F08                   ADD         #8,R15
         parse.c   345            ProgramFail(Parser, "'%s' is already defined", MacroNameStr);
    000007EA 2F96                   MOV.L       R9,@-R15
    000007EC D330                   MOV.L       L1023+48,R3; L551
    000007EE 2F36                   MOV.L       R3,@-R15
    000007F0 4A0B                   JSR         @R10
    000007F2 64E3                   MOV         R14,R4
    000007F4 7F08                   ADD         #8,R15
    000007F6              L927:                             
         parse.c   346    }
    000007F6 7F2C                   ADD         #44,R15
    000007F8 4F26                   LDS.L       @R15+,PR
    000007FA 68F6                   MOV.L       @R15+,R8
    000007FC 69F6                   MOV.L       @R15+,R9
    000007FE 6AF6                   MOV.L       @R15+,R10
    00000800 6BF6                   MOV.L       @R15+,R11
    00000802 6CF6                   MOV.L       @R15+,R12
    00000804 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000806 000B                   RTS
    00000808 6EF6                   MOV.L       @R15+,R14
         parse.c   347    
         parse.c   348    /* copy the entire parser state */
         parse.c   349    void ParserCopy(struct ParseState *To, struct ParseState *From)
    0000080A              _ParserCopy:                     ; function: ParserCopy
                                                           ; frame size=0
         parse.c   350    {
         parse.c   351        memcpy((void *)To, (void *)From, sizeof(*To));
    0000080A D32A                   MOV.L       L1023+52,R3; _memcpy
    0000080C 432B                   JMP         @R3
    0000080E E620                   MOV         #32,R6
         parse.c   352    }
         parse.c   353    
         parse.c   354    /* copy where we're at in the parsing */
         parse.c   355    void ParserCopyPos(struct ParseState *To, struct ParseState *From)
    00000810              _ParserCopyPos:                  ; function: ParserCopyPos
                                                           ; frame size=0
         parse.c   356    {
         parse.c   357        To->Pos = From->Pos;
    00000810 6352                   MOV.L       @R5,R3
    00000812 2432                   MOV.L       R3,@R4
         parse.c   358        To->Line = From->Line;
    00000814 8554                   MOV.W       @(8,R5),R0
    00000816 8144                   MOV.W       R0,@(8,R4)
         parse.c   359        To->HashIfLevel = From->HashIfLevel;
    00000818 855C                   MOV.W       @(24,R5),R0
    0000081A 814C                   MOV.W       R0,@(24,R4)
         parse.c   360        To->HashIfEvaluateToLevel = From->HashIfEvaluateToLevel;
    0000081C 855D                   MOV.W       @(26,R5),R0
    0000081E 814D                   MOV.W       R0,@(26,R4)
         parse.c   361        To->CharacterPos = From->CharacterPos;
    00000820 8555                   MOV.W       @(10,R5),R0
         parse.c   362    }
    00000822 000B                   RTS
    00000824 8145                   MOV.W       R0,@(10,R4)
         parse.c   363    
         parse.c   364    /* parse a "for" statement */
         parse.c   365    void ParseFor(struct ParseState *Parser)
    00000826              _ParseFor:                       ; function: ParseFor
                                                           ; frame size=160
         parse.c   366    {
         parse.c   367        int Condition;
         parse.c   368        struct ParseState PreConditional;
         parse.c   369        struct ParseState PreIncrement;
         parse.c   370        struct ParseState PreStatement;
         parse.c   371        struct ParseState After;
         parse.c   372    
         parse.c   373        if (LexGetToken(Parser, NULL, TRUE) != TokenOpenBracket)
    00000826 E601                   MOV         #1,R6
    00000828 2FE6                   MOV.L       R14,@-R15
    0000082A 6E43                   MOV         R4,R14
    0000082C 2FD6                   MOV.L       R13,@-R15
    0000082E 2FC6                   MOV.L       R12,@-R15
    00000830 2FB6                   MOV.L       R11,@-R15
    00000832 2FA6                   MOV.L       R10,@-R15
    00000834 2F96                   MOV.L       R9,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000836 4F22                   STS.L       PR,@-R15
    00000838 DB11                   MOV.L       L1023,R11  ; _ProgramFail
    0000083A 7F80                   ADD         #-128,R15
    0000083C DC11                   MOV.L       L1023+4,R12; _LexGetToken
    0000083E 4C0B                   JSR         @R12
    00000840 E500                   MOV         #0,R5
    00000842 882B                   CMP/EQ      #43,R0
    00000844 8904                   BT          L928
         parse.c   374            ProgramFail(Parser, "'(' expected");
    00000846 D21C                   MOV.L       L1023+56,R2; L614
    00000848 2F26                   MOV.L       R2,@-R15
    0000084A 4B0B                   JSR         @R11
    0000084C 64E3                   MOV         R14,R4
    0000084E 7F04                   ADD         #4,R15
    00000850              L928:                             
         parse.c   375                            
         parse.c   376        if (ParseStatement(Parser, TRUE) != ParseResultOk)
    00000850 E501                   MOV         #1,R5
    00000852 B11D                   BSR         _ParseStatement
    00000854 64E3                   MOV         R14,R4
    00000856 8802                   CMP/EQ      #2,R0
    00000858 8904                   BT          L929
         parse.c   377            ProgramFail(Parser, "statement expected");
    0000085A D318                   MOV.L       L1023+60,R3; L615
    0000085C 2F36                   MOV.L       R3,@-R15
    0000085E 4B0B                   JSR         @R11
    00000860 64E3                   MOV         R14,R4
    00000862 7F04                   ADD         #4,R15
    00000864              L929:                             
         parse.c   378        
         parse.c   379        ParserCopyPos(&PreConditional, Parser);
    00000864 65E3                   MOV         R14,R5
    00000866 64F3                   MOV         R15,R4
    00000868 BFD2                   BSR         _ParserCopyPos
    0000086A 7460                   ADD         #96,R4
         parse.c   380        if (LexGetToken(Parser, NULL, FALSE) == TokenSemicolon)
    0000086C D914                   MOV.L       L1023+64,R9; _ExpressionParseInt
    0000086E EA01                   MOV         #1,R10
    00000870 E600                   MOV         #0,R6
    00000872 6563                   MOV         R6,R5
    00000874 4C0B                   JSR         @R12
    00000876 64E3                   MOV         R14,R4
    00000878 8832                   CMP/EQ      #50,R0
    0000087A 8B23                   BF          L930
         parse.c   381            Condition = TRUE;
    0000087C A025                   BRA         L931
    0000087E 6DA3                   MOV         R10,R13
    00000880              L1023:                            
    00000880 <00000000>             .DATA.L     _ProgramFail
    00000884 <00000000>             .DATA.L     _LexGetToken
    00000888 <00000000>             .DATA.L     L579
    0000088C <00000000>             .DATA.L     _LexRawPeekToken
    00000890 <00000000>             .DATA.L     _VariableAllocValueAndData
    00000894 <00000000>             .DATA.L     L540
    00000898 <00000000>             .DATA.L     L598
    0000089C <00000000>             .DATA.L     _MacroType
    000008A0 <00000000>             .DATA.L     _LexToEndOfLine




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008A4 <00000000>             .DATA.L     _LexCopyTokens
    000008A8 <00000000>             .DATA.L     _GlobalTable
    000008AC <00000000>             .DATA.L     _TableSet
    000008B0 <00000000>             .DATA.L     L551
    000008B4 <00000000>             .DATA.L     _memcpy
    000008B8 <00000000>             .DATA.L     L614
    000008BC <00000000>             .DATA.L     L615
    000008C0 <00000000>             .DATA.L     _ExpressionParseInt
    000008C4              L930:                             
         parse.c   382        else
         parse.c   383            Condition = ExpressionParseInt(Parser);
    000008C4 490B                   JSR         @R9
    000008C6 64E3                   MOV         R14,R4
    000008C8 6D03                   MOV         R0,R13
    000008CA              L931:                             
         parse.c   384        
         parse.c   385        if (LexGetToken(Parser, NULL, TRUE) != TokenSemicolon)
    000008CA E601                   MOV         #1,R6
    000008CC E500                   MOV         #0,R5
    000008CE 4C0B                   JSR         @R12
    000008D0 64E3                   MOV         R14,R4
    000008D2 8832                   CMP/EQ      #50,R0
    000008D4 8904                   BT          L932
         parse.c   386            ProgramFail(Parser, "';' expected");
    000008D6 D235                   MOV.L       L1024+2,R2 ; L616
    000008D8 2F26                   MOV.L       R2,@-R15
    000008DA 4B0B                   JSR         @R11
    000008DC 64E3                   MOV         R14,R4
    000008DE 7F04                   ADD         #4,R15
    000008E0              L932:                             
         parse.c   387        
         parse.c   388        ParserCopyPos(&PreIncrement, Parser);
    000008E0 65E3                   MOV         R14,R5
    000008E2 64F3                   MOV         R15,R4
    000008E4 BF94                   BSR         _ParserCopyPos
    000008E6 7440                   ADD         #64,R4
         parse.c   389        ParseStatementMaybeRun(Parser, FALSE, FALSE);
    000008E8 E600                   MOV         #0,R6
    000008EA 6563                   MOV         R6,R5
    000008EC BBA7                   BSR         _ParseStatementMaybeRun
    000008EE 64E3                   MOV         R14,R4
         parse.c   390        
         parse.c   391        if (LexGetToken(Parser, NULL, TRUE) != TokenCloseBracket)
    000008F0 E601                   MOV         #1,R6
    000008F2 E500                   MOV         #0,R5
    000008F4 4C0B                   JSR         @R12
    000008F6 64E3                   MOV         R14,R4
    000008F8 882C                   CMP/EQ      #44,R0
    000008FA 8904                   BT          L933
         parse.c   392            ProgramFail(Parser, "')' expected");
    000008FC D22C                   MOV.L       L1024+6,R2 ; L617
    000008FE 2F26                   MOV.L       R2,@-R15
    00000900 4B0B                   JSR         @R11
    00000902 64E3                   MOV         R14,R4
    00000904 7F04                   ADD         #4,R15
    00000906              L933:                             
         parse.c   393        




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   394        ParserCopyPos(&PreStatement, Parser);
    00000906 65E3                   MOV         R14,R5
    00000908 64F3                   MOV         R15,R4
    0000090A BF81                   BSR         _ParserCopyPos
    0000090C 7420                   ADD         #32,R4
         parse.c   395        if (ParseStatementMaybeRun(Parser, Condition, TRUE) != ParseResultOk)
    0000090E E601                   MOV         #1,R6
    00000910 65D3                   MOV         R13,R5
    00000912 BB94                   BSR         _ParseStatementMaybeRun
    00000914 64E3                   MOV         R14,R4
    00000916 8802                   CMP/EQ      #2,R0
    00000918 8904                   BT          L934
         parse.c   396            ProgramFail(Parser, "statement expected");
    0000091A D226                   MOV.L       L1024+10,R2; L615
    0000091C 2F26                   MOV.L       R2,@-R15
    0000091E 4B0B                   JSR         @R11
    00000920 64E3                   MOV         R14,R4
    00000922 7F04                   ADD         #4,R15
    00000924              L934:                             
         parse.c   397        
         parse.c   398        if (Parser->Mode == RunModeContinue)
    00000924 50E3                   MOV.L       @(12,R14),R0
    00000926 8805                   CMP/EQ      #5,R0
    00000928 8F01                   BF/S        L935
    0000092A EB00                   MOV         #0,R11
         parse.c   399            Parser->Mode = RunModeRun;
    0000092C 1EB3                   MOV.L       R11,@(12,R14)
    0000092E              L935:                             
         parse.c   400            
         parse.c   401        ParserCopyPos(&After, Parser);
    0000092E 65E3                   MOV         R14,R5
    00000930 BF6E                   BSR         _ParserCopyPos
    00000932 64F3                   MOV         R15,R4
         parse.c   402            
         parse.c   403        while (Condition && Parser->Mode == RunModeRun)
    00000934 A023                   BRA         L936
    00000936 0009                   NOP
    00000938              L937:                             
         parse.c   404        {
         parse.c   405            ParserCopyPos(Parser, &PreIncrement);
    00000938 65F3                   MOV         R15,R5
    0000093A 7540                   ADD         #64,R5
    0000093C BF68                   BSR         _ParserCopyPos
    0000093E 64E3                   MOV         R14,R4
         parse.c   406            ParseStatement(Parser, FALSE);
    00000940 E500                   MOV         #0,R5
    00000942 B0A5                   BSR         _ParseStatement
    00000944 64E3                   MOV         R14,R4
         parse.c   407                            
         parse.c   408            ParserCopyPos(Parser, &PreConditional);
    00000946 65F3                   MOV         R15,R5
    00000948 7560                   ADD         #96,R5
    0000094A BF61                   BSR         _ParserCopyPos
    0000094C 64E3                   MOV         R14,R4
         parse.c   409            if (LexGetToken(Parser, NULL, FALSE) == TokenSemicolon)
    0000094E E600                   MOV         #0,R6
    00000950 6563                   MOV         R6,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000952 4C0B                   JSR         @R12
    00000954 64E3                   MOV         R14,R4
    00000956 8832                   CMP/EQ      #50,R0
    00000958 8B01                   BF          L938
         parse.c   410                Condition = TRUE;
    0000095A A003                   BRA         L939
    0000095C 6DA3                   MOV         R10,R13
    0000095E              L938:                             
         parse.c   411            else
         parse.c   412                Condition = ExpressionParseInt(Parser);
    0000095E 490B                   JSR         @R9
    00000960 64E3                   MOV         R14,R4
    00000962 6D03                   MOV         R0,R13
    00000964              L939:                             
         parse.c   413            
         parse.c   414            if (Condition)
    00000964 2DD8                   TST         R13,R13
    00000966 890F                   BT          L942
         parse.c   415            {
         parse.c   416                ParserCopyPos(Parser, &PreStatement);
    00000968 65F3                   MOV         R15,R5
    0000096A 7520                   ADD         #32,R5
    0000096C BF50                   BSR         _ParserCopyPos
    0000096E 64E3                   MOV         R14,R4
         parse.c   417                ParseStatement(Parser, TRUE);
    00000970 E501                   MOV         #1,R5
    00000972 B08D                   BSR         _ParseStatement
    00000974 64E3                   MOV         R14,R4
         parse.c   418                
         parse.c   419                if (Parser->Mode == RunModeContinue)
    00000976 50E3                   MOV.L       @(12,R14),R0
    00000978 8805                   CMP/EQ      #5,R0
    0000097A 8B00                   BF          L936
         parse.c   420                    Parser->Mode = RunModeRun;                
    0000097C 1EB3                   MOV.L       R11,@(12,R14)
    0000097E              L936:                             
    0000097E 2DD8                   TST         R13,R13
    00000980 8902                   BT          L942
    00000982 52E3                   MOV.L       @(12,R14),R2
    00000984 2228                   TST         R2,R2
    00000986 89D7                   BT          L937
    00000988              L942:                             
         parse.c   421            }
         parse.c   422        }
         parse.c   423        
         parse.c   424        if (Parser->Mode == RunModeBreak)
    00000988 50E3                   MOV.L       @(12,R14),R0
    0000098A 8804                   CMP/EQ      #4,R0
    0000098C 8B00                   BF          L943
         parse.c   425            Parser->Mode = RunModeRun;
    0000098E 1EB3                   MOV.L       R11,@(12,R14)
    00000990              L943:                             
         parse.c   426            
         parse.c   427        ParserCopyPos(Parser, &After);
    00000990 65F3                   MOV         R15,R5
    00000992 BF3D                   BSR         _ParserCopyPos
    00000994 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   428    }
    00000996 9108                   MOV.W       L1024,R1   ; H'0080
    00000998 3F1C                   ADD         R1,R15
    0000099A 4F26                   LDS.L       @R15+,PR
    0000099C 69F6                   MOV.L       @R15+,R9
    0000099E 6AF6                   MOV.L       @R15+,R10
    000009A0 6BF6                   MOV.L       @R15+,R11
    000009A2 6CF6                   MOV.L       @R15+,R12
    000009A4 6DF6                   MOV.L       @R15+,R13
    000009A6 000B                   RTS
    000009A8 6EF6                   MOV.L       @R15+,R14
    000009AA              L1024:                            
    000009AA 0080                   .DATA.W     H'0080
    000009AC <00000000>             .DATA.L     L616
    000009B0 <00000000>             .DATA.L     L617
    000009B4 <00000000>             .DATA.L     L615
         parse.c   429    
         parse.c   430    /* parse a block of code and return what mode it returned in */
         parse.c   431    enum RunMode ParseBlock(struct ParseState *Parser, int AbsorbOpenBrace, int Condition)
    000009B8              _ParseBlock:                     ; function: ParseBlock
                                                           ; frame size=20
    000009B8 2FE6                   MOV.L       R14,@-R15
    000009BA 4F22                   STS.L       PR,@-R15
    000009BC 7FF8                   ADD         #-8,R15
    000009BE 2F52                   MOV.L       R5,@R15
    000009C0 1F61                   MOV.L       R6,@(4,R15)
         parse.c   432    {
         parse.c   433        if (AbsorbOpenBrace && LexGetToken(Parser, NULL, TRUE) != TokenLeftBrace)
    000009C2 63F2                   MOV.L       @R15,R3
    000009C4 2338                   TST         R3,R3
    000009C6 8D0D                   BT/S        L944
    000009C8 6E43                   MOV         R4,R14
    000009CA E601                   MOV         #1,R6
    000009CC D329                   MOV.L       L1025,R3   ; _LexGetToken
    000009CE E500                   MOV         #0,R5
    000009D0 430B                   JSR         @R3
    000009D2 64E3                   MOV         R14,R4
    000009D4 8834                   CMP/EQ      #52,R0
    000009D6 8905                   BT          L944
         parse.c   434            ProgramFail(Parser, "'{' expected");
    000009D8 D327                   MOV.L       L1025+4,R3 ; L625
    000009DA 2F36                   MOV.L       R3,@-R15
    000009DC D227                   MOV.L       L1025+8,R2 ; _ProgramFail
    000009DE 420B                   JSR         @R2
    000009E0 64E3                   MOV         R14,R4
    000009E2 7F04                   ADD         #4,R15
    000009E4              L944:                             
         parse.c   435        
         parse.c   436        if (Parser->Mode == RunModeSkip || !Condition)
    000009E4 50E3                   MOV.L       @(12,R14),R0
    000009E6 8801                   CMP/EQ      #1,R0
    000009E8 8902                   BT          L946
    000009EA 52F1                   MOV.L       @(4,R15),R2
    000009EC 2228                   TST         R2,R2
    000009EE 8B0B                   BF          L950
    000009F0              L946:                             
         parse.c   437        { 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   438            /* condition failed - skip this block instead */
         parse.c   439            enum RunMode OldMode = Parser->Mode;
    000009F0 53E3                   MOV.L       @(12,R14),R3
         parse.c   440            Parser->Mode = RunModeSkip;
    000009F2 E201                   MOV         #1,R2
    000009F4 2F32                   MOV.L       R3,@R15
    000009F6 1E23                   MOV.L       R2,@(12,R14)
         parse.c   441            while (ParseStatement(Parser, TRUE) == ParseResultOk)
         parse.c   442            {}
    000009F8              L947:                             
    000009F8 E501                   MOV         #1,R5
    000009FA B049                   BSR         _ParseStatement
    000009FC 64E3                   MOV         R14,R4
    000009FE 8802                   CMP/EQ      #2,R0
    00000A00 89FA                   BT          L947
         parse.c   443            Parser->Mode = OldMode;
    00000A02 62F2                   MOV.L       @R15,R2
    00000A04 A005                   BRA         L949
    00000A06 1E23                   MOV.L       R2,@(12,R14)
    00000A08              L950:                             
         parse.c   444        }
         parse.c   445        else
         parse.c   446        { 
         parse.c   447            /* just run it in its current mode */
         parse.c   448            while (ParseStatement(Parser, TRUE) == ParseResultOk)
    00000A08 E501                   MOV         #1,R5
    00000A0A B041                   BSR         _ParseStatement
    00000A0C 64E3                   MOV         R14,R4
    00000A0E 8802                   CMP/EQ      #2,R0
    00000A10 89FA                   BT          L950
    00000A12              L949:                             
         parse.c   449            {}
         parse.c   450        }
         parse.c   451        
         parse.c   452        if (LexGetToken(Parser, NULL, TRUE) != TokenRightBrace)
    00000A12 E601                   MOV         #1,R6
    00000A14 D317                   MOV.L       L1025,R3   ; _LexGetToken
    00000A16 E500                   MOV         #0,R5
    00000A18 430B                   JSR         @R3
    00000A1A 64E3                   MOV         R14,R4
    00000A1C 8835                   CMP/EQ      #53,R0
    00000A1E 8905                   BT          L952
         parse.c   453            ProgramFail(Parser, "'}' expected");
    00000A20 D317                   MOV.L       L1025+12,R3; L565
    00000A22 2F36                   MOV.L       R3,@-R15
    00000A24 D215                   MOV.L       L1025+8,R2 ; _ProgramFail
    00000A26 420B                   JSR         @R2
    00000A28 64E3                   MOV         R14,R4
    00000A2A 7F04                   ADD         #4,R15
    00000A2C              L952:                             
         parse.c   454            
         parse.c   455        return Parser->Mode;
    00000A2C 50E3                   MOV.L       @(12,R14),R0
         parse.c   456    }
    00000A2E 7F08                   ADD         #8,R15
    00000A30 4F26                   LDS.L       @R15+,PR
    00000A32 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A34 6EF6                   MOV.L       @R15+,R14
         parse.c   457    
         parse.c   458    /* parse a typedef declaration */
         parse.c   459    void ParseTypedef(struct ParseState *Parser)
    00000A36              _ParseTypedef:                   ; function: ParseTypedef
                                                           ; frame size=36
         parse.c   460    {
         parse.c   461        struct ValueType *Typ;
         parse.c   462        struct ValueType **TypPtr;
         parse.c   463        char *TypeName;
         parse.c   464        struct Value InitValue;
         parse.c   465        
         parse.c   466        TypeParse(Parser, &Typ, &TypeName, NULL);
    00000A36 E700                   MOV         #0,R7
    00000A38 D312                   MOV.L       L1025+16,R3; _TypeParse
    00000A3A 2FE6                   MOV.L       R14,@-R15
    00000A3C 4F22                   STS.L       PR,@-R15
    00000A3E 6E43                   MOV         R4,R14
    00000A40 7FE8                   ADD         #-24,R15
    00000A42 66F3                   MOV         R15,R6
    00000A44 7604                   ADD         #4,R6
    00000A46 430B                   JSR         @R3
    00000A48 65F3                   MOV         R15,R5
         parse.c   467        
         parse.c   468        if (Parser->Mode == RunModeRun)
    00000A4A 52E3                   MOV.L       @(12,R14),R2
    00000A4C 2228                   TST         R2,R2
    00000A4E 8B0D                   BF          L954
         parse.c   469        {
         parse.c   470            TypPtr = &Typ;
         parse.c   471            InitValue.Typ = &TypeType;
    00000A50 D30D                   MOV.L       L1025+20,R3; _TypeType
    00000A52 64F3                   MOV         R15,R4
         parse.c   472            InitValue.Val = (union AnyValue *)TypPtr;
         parse.c   473            VariableDefine(Parser, TypeName, &InitValue, NULL, FALSE);
    00000A54 D20D                   MOV.L       L1025+24,R2; _VariableDefine
    00000A56 1F32                   MOV.L       R3,@(8,R15)
    00000A58 1F43                   MOV.L       R4,@(12,R15)
    00000A5A E300                   MOV         #0,R3
    00000A5C 2F36                   MOV.L       R3,@-R15
    00000A5E 6733                   MOV         R3,R7
    00000A60 55F2                   MOV.L       @(8,R15),R5
    00000A62 66F3                   MOV         R15,R6
    00000A64 760C                   ADD         #12,R6
    00000A66 420B                   JSR         @R2
    00000A68 64E3                   MOV         R14,R4
    00000A6A 7F04                   ADD         #4,R15
    00000A6C              L954:                             
         parse.c   474        }
         parse.c   475    }
    00000A6C 7F18                   ADD         #24,R15
    00000A6E 4F26                   LDS.L       @R15+,PR
    00000A70 000B                   RTS
    00000A72 6EF6                   MOV.L       @R15+,R14
    00000A74              L1025:                            
    00000A74 <00000000>             .DATA.L     _LexGetToken
    00000A78 <00000000>             .DATA.L     L625




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A7C <00000000>             .DATA.L     _ProgramFail
    00000A80 <00000000>             .DATA.L     L565
    00000A84 <00000000>             .DATA.L     _TypeParse
    00000A88 <00000000>             .DATA.L     _TypeType
    00000A8C <00000000>             .DATA.L     _VariableDefine
         parse.c   476    
         parse.c   477    /* parse a statement */
         parse.c   478    enum ParseResult ParseStatement(struct ParseState *Parser, int CheckTrailingSemicolon)
    00000A90              _ParseStatement:                 ; function: ParseStatement
                                                           ; frame size=128
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    00000A90 2FE6                   MOV.L       R14,@-R15
    00000A92 6E43                   MOV         R4,R14
    00000A94 2FD6                   MOV.L       R13,@-R15
    00000A96 2FC6                   MOV.L       R12,@-R15
    00000A98 2FB6                   MOV.L       R11,@-R15
    00000A9A 2FA6                   MOV.L       R10,@-R15
    00000A9C 2F96                   MOV.L       R9,@-R15
    00000A9E 2F86                   MOV.L       R8,@-R15
    00000AA0 4F22                   STS.L       PR,@-R15
    00000AA2 7FAC                   ADD         #-84,R15
    00000AA4 DC0D                   MOV.L       L1026,R12  ; _LexGetToken
         parse.c   479    {
         parse.c   480        struct Value *CValue;
         parse.c   481        struct Value *LexerValue;
         parse.c   482        struct Value *VarValue;
         parse.c   483        int Condition;
         parse.c   484        struct ParseState PreState;
         parse.c   485        enum LexToken Token;
         parse.c   486        
         parse.c   487        ParserCopy(&PreState, Parser);
    00000AA6 64F3                   MOV         R15,R4
    00000AA8 DD0D                   MOV.L       L1026+4,R13; _ProgramFail
    00000AAA 1F53                   MOV.L       R5,@(12,R15)
    00000AAC 65E3                   MOV         R14,R5
    00000AAE BEAC                   BSR         _ParserCopy
    00000AB0 7434                   ADD         #52,R4
         parse.c   488        Token = LexGetToken(Parser, &LexerValue, TRUE);
    00000AB2 E601                   MOV         #1,R6
    00000AB4 65F3                   MOV         R15,R5
    00000AB6 4C0B                   JSR         @R12
    00000AB8 64E3                   MOV         R14,R4
         parse.c   489        
         parse.c   490        switch (Token)
    00000ABA EB00                   MOV         #0,R11
    00000ABC 1F02                   MOV.L       R0,@(8,R15)
    00000ABE D809                   MOV.L       L1026+8,R8 ; L615
    00000AC0 D909                   MOV.L       L1026+12,R9; L617
    00000AC2 DA0A                   MOV.L       L1026+16,R10; _ExpressionParseInt
    00000AC4 70ED                   ADD         #-19,R0
    00000AC6 E14B                   MOV         #75,R1
    00000AC8 3012                   CMP/HS      R1,R0
    00000ACA 8B01                   BF          L1027
    00000ACC A2B9                   BRA         L807
    00000ACE 0009                   NOP
    00000AD0              L1027:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AD0 4000                   SHLL        R0
    00000AD2 6103                   MOV         R0,R1
    00000AD4 C706                   MOVA        L1029,R0
    00000AD6 001D                   MOV.W       @(R0,R1),R0
    00000AD8 0023                   BRAF        R0
    00000ADA 0009                   NOP
    00000ADC              L1028:                            
    00000ADC              L1026:                            
    00000ADC <00000000>             .DATA.L     _LexGetToken
    00000AE0 <00000000>             .DATA.L     _ProgramFail
    00000AE4 <00000000>             .DATA.L     L615
    00000AE8 <00000000>             .DATA.L     L617
    00000AEC <00000000>             .DATA.L     _ExpressionParseInt
    00000AF0              L1029:
    00000AF0 0120                   .DATA.W     L764-L1028
    00000AF2 0566                   .DATA.W     L807-L1028
    00000AF4 0566                   .DATA.W     L807-L1028
    00000AF6 0566                   .DATA.W     L807-L1028
    00000AF8 0566                   .DATA.W     L807-L1028
    00000AFA 0566                   .DATA.W     L807-L1028
    00000AFC 0566                   .DATA.W     L807-L1028
    00000AFE 0566                   .DATA.W     L807-L1028
    00000B00 0566                   .DATA.W     L807-L1028
    00000B02 0566                   .DATA.W     L807-L1028
    00000B04 0566                   .DATA.W     L807-L1028
    00000B06 0120                   .DATA.W     L763-L1028
    00000B08 0566                   .DATA.W     L807-L1028
    00000B0A 0566                   .DATA.W     L807-L1028
    00000B0C 0120                   .DATA.W     L765-L1028
    00000B0E 0120                   .DATA.W     L766-L1028
    00000B10 0566                   .DATA.W     L807-L1028
    00000B12 0566                   .DATA.W     L807-L1028
    00000B14 0566                   .DATA.W     L807-L1028
    00000B16 0566                   .DATA.W     L807-L1028
    00000B18 0566                   .DATA.W     L807-L1028
    00000B1A 0566                   .DATA.W     L807-L1028
    00000B1C 0566                   .DATA.W     L807-L1028
    00000B1E 0566                   .DATA.W     L807-L1028
    00000B20 0120                   .DATA.W     L767-L1028
    00000B22 0566                   .DATA.W     L807-L1028
    00000B24 00AE                   .DATA.W     L762-L1028
    00000B26 0566                   .DATA.W     L807-L1028
    00000B28 0566                   .DATA.W     L807-L1028
    00000B2A 0566                   .DATA.W     L807-L1028
    00000B2C 0566                   .DATA.W     L807-L1028
    00000B2E 0300                   .DATA.W     L774-L1028
    00000B30 0566                   .DATA.W     L807-L1028
    00000B32 014C                   .DATA.W     L768-L1028
    00000B34 0566                   .DATA.W     L807-L1028
    00000B36 0304                   .DATA.W     L775-L1028
    00000B38 0304                   .DATA.W     L777-L1028
    00000B3A 0304                   .DATA.W     L779-L1028
    00000B3C 0304                   .DATA.W     L780-L1028
    00000B3E 0304                   .DATA.W     L781-L1028
    00000B40 0304                   .DATA.W     L784-L1028
    00000B42 0304                   .DATA.W     L778-L1028
    00000B44 0304                   .DATA.W     L785-L1028




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B46 0304                   .DATA.W     L776-L1028
    00000B48 0304                   .DATA.W     L787-L1028
    00000B4A 0304                   .DATA.W     L788-L1028
    00000B4C 0304                   .DATA.W     L789-L1028
    00000B4E 0304                   .DATA.W     L790-L1028
    00000B50 0304                   .DATA.W     L782-L1028
    00000B52 0304                   .DATA.W     L783-L1028
    00000B54 0304                   .DATA.W     L786-L1028
    00000B56 04B6                   .DATA.W     L803-L1028
    00000B58 042A                   .DATA.W     L799-L1028
    00000B5A 024E                   .DATA.W     L771-L1028
    00000B5C 0566                   .DATA.W     L807-L1028
    00000B5E 02DA                   .DATA.W     L773-L1028
    00000B60 04BE                   .DATA.W     L804-L1028
    00000B62 0158                   .DATA.W     L769-L1028
    00000B64 01D0                   .DATA.W     L770-L1028
    00000B66 041A                   .DATA.W     L798-L1028
    00000B68 0346                   .DATA.W     L794-L1028
    00000B6A 03B8                   .DATA.W     L795-L1028
    00000B6C 03F8                   .DATA.W     L797-L1028
    00000B6E 043A                   .DATA.W     L800-L1028
    00000B70 031A                   .DATA.W     L791-L1028
    00000B72 0322                   .DATA.W     L792-L1028
    00000B74 0566                   .DATA.W     L807-L1028
    00000B76 0566                   .DATA.W     L807-L1028
    00000B78 0566                   .DATA.W     L807-L1028
    00000B7A 0566                   .DATA.W     L807-L1028
    00000B7C 0566                   .DATA.W     L807-L1028
    00000B7E 0566                   .DATA.W     L807-L1028
    00000B80 051C                   .DATA.W     L805-L1028
    00000B82 0566                   .DATA.W     L807-L1028
    00000B84 00AA                   .DATA.W     L761-L1028
         parse.c   491        {
         parse.c   492            case TokenEOF:
    00000B86              L761:                            ; case label 
         parse.c   493                return ParseResultEOF;
    00000B86 A273                   BRA         L956
    00000B88 E000                   MOV         #0,R0
    00000B8A              L762:                            ; case label 
         parse.c   494                
         parse.c   495            case TokenIdentifier:
         parse.c   496                /* might be a typedef-typed variable declaration or it might be an expression */
         parse.c   497                if (VariableDefined(LexerValue->Val->Identifier))
    00000B8A 64F2                   MOV.L       @R15,R4
    00000B8C D38C                   MOV.L       L1030+2,R3 ; _VariableDefined
    00000B8E 5441                   MOV.L       @(4,R4),R4
    00000B90 430B                   JSR         @R3
    00000B92 6442                   MOV.L       @R4,R4
    00000B94 2008                   TST         R0,R0
    00000B96 8917                   BT          L957
         parse.c   498                {
         parse.c   499                    VariableGet(Parser, LexerValue->Val->Identifier, &VarValue);
    00000B98 65F2                   MOV.L       @R15,R5
    00000B9A 66F3                   MOV         R15,R6
    00000B9C D389                   MOV.L       L1030+6,R3 ; _VariableGet
    00000B9E 7610                   ADD         #16,R6
    00000BA0 5551                   MOV.L       @(4,R5),R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BA2 6552                   MOV.L       @R5,R5
    00000BA4 430B                   JSR         @R3
    00000BA6 64E3                   MOV         R14,R4
         parse.c   500                    if (VarValue->Typ->Base == Type_Type)
    00000BA8 50F4                   MOV.L       @(16,R15),R0
    00000BAA 6002                   MOV.L       @R0,R0
    00000BAC 6002                   MOV.L       @R0,R0
    00000BAE 8811                   CMP/EQ      #17,R0
    00000BB0 8B24                   BF          L763
         parse.c   501                    {
         parse.c   502                        *Parser = PreState;
    00000BB2 61E3                   MOV         R14,R1
    00000BB4 D384                   MOV.L       L1030+10,R3; __quick_evn_mvn
    00000BB6 62F3                   MOV         R15,R2
    00000BB8 7234                   ADD         #52,R2
    00000BBA 430B                   JSR         @R3
    00000BBC E020                   MOV         #32,R0
         parse.c   503                        ParseDeclaration(Parser, Token);
    00000BBE 55F2                   MOV.L       @(8,R15),R5
    00000BC0 BCBE                   BSR         _ParseDeclaration
    00000BC2 64E3                   MOV         R14,R4
         parse.c   504                        break;
    00000BC4 A245                   BRA         L955
    00000BC6 0009                   NOP
    00000BC8              L957:                             
         parse.c   505                    }
         parse.c   506                }
         parse.c   507                else
         parse.c   508                {
         parse.c   509                    /* it might be a goto label */
         parse.c   510                    enum LexToken NextToken = LexGetToken(Parser, NULL, FALSE);
    00000BC8 E600                   MOV         #0,R6
    00000BCA 6563                   MOV         R6,R5
    00000BCC 4C0B                   JSR         @R12
    00000BCE 64E3                   MOV         R14,R4
         parse.c   511                    if (NextToken == TokenColon)
    00000BD0 880E                   CMP/EQ      #14,R0
    00000BD2 8F13                   BF/S        L763
    00000BD4 6403                   MOV         R0,R4
         parse.c   512                    {
         parse.c   513                        /* declare the identifier as a goto label */
         parse.c   514                        LexGetToken(Parser, NULL, TRUE);
    00000BD6 E601                   MOV         #1,R6
    00000BD8 E500                   MOV         #0,R5
    00000BDA 4C0B                   JSR         @R12
    00000BDC 64E3                   MOV         R14,R4
         parse.c   515                        if (Parser->Mode == RunModeGoto && LexerValue->Val->Identifier == Parser->SearchGotoLa
                         +bel)
    00000BDE 50E3                   MOV.L       @(12,R14),R0
    00000BE0 8806                   CMP/EQ      #6,R0
    00000BE2 8901                   BT          L1031
    00000BE4 A185                   BRA         L1017
    00000BE6 0009                   NOP
    00000BE8              L1031:                            
    00000BE8 62F2                   MOV.L       @R15,R2
    00000BEA 5321                   MOV.L       @(4,R2),R3
    00000BEC 51E5                   MOV.L       @(20,R14),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BEE 6032                   MOV.L       @R3,R0
    00000BF0 3010                   CMP/EQ      R1,R0
    00000BF2 8901                   BT          L1032
    00000BF4 A17D                   BRA         L1017
    00000BF6 0009                   NOP
    00000BF8              L1032:                            
    00000BF8 A17B                   BRA         L1017
         parse.c   516                            Parser->Mode = RunModeRun;
    00000BFA 1EB3                   MOV.L       R11,@(12,R14)
    00000BFC              L763:                            ; case label 
         parse.c   517            
         parse.c   518                        CheckTrailingSemicolon = FALSE;
         parse.c   519                        break;
         parse.c   520                    }
         parse.c   521                }
         parse.c   522                /* else fallthrough to expression */
         parse.c   523                
         parse.c   524            case TokenAsterisk: 
         parse.c   525            case TokenAmpersand: 
    00000BFC              L764:                            ; case label 
         parse.c   526            case TokenIncrement: 
    00000BFC              L765:                            ; case label 
         parse.c   527            case TokenDecrement: 
    00000BFC              L766:                            ; case label 
         parse.c   528            case TokenOpenBracket: 
    00000BFC              L767:                            ; case label 
         parse.c   529                *Parser = PreState;
    00000BFC D372                   MOV.L       L1030+10,R3; __quick_evn_mvn
    00000BFE 61E3                   MOV         R14,R1
    00000C00 62F3                   MOV         R15,R2
    00000C02 7234                   ADD         #52,R2
    00000C04 430B                   JSR         @R3
    00000C06 E020                   MOV         #32,R0
         parse.c   530                ExpressionParse(Parser, &CValue);
    00000C08 D270                   MOV.L       L1030+14,R2; _ExpressionParse
    00000C0A 65F3                   MOV         R15,R5
    00000C0C 7504                   ADD         #4,R5
    00000C0E 420B                   JSR         @R2
    00000C10 64E3                   MOV         R14,R4
         parse.c   531                if (Parser->Mode == RunModeRun) 
    00000C12 53E3                   MOV.L       @(12,R14),R3
    00000C14 2338                   TST         R3,R3
    00000C16 8901                   BT          L1033
    00000C18 A21B                   BRA         L955
    00000C1A 0009                   NOP
    00000C1C              L1033:                            
         parse.c   532                    VariableStackPop(Parser, CValue);
    00000C1C 55F1                   MOV.L       @(4,R15),R5
    00000C1E D36C                   MOV.L       L1030+18,R3; _VariableStackPop
    00000C20 430B                   JSR         @R3
    00000C22 64E3                   MOV         R14,R4
         parse.c   533                break;
    00000C24 A215                   BRA         L955
    00000C26 0009                   NOP
    00000C28              L768:                            ; case label 
         parse.c   534                
         parse.c   535            case TokenLeftBrace:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   536                ParseBlock(Parser, FALSE, TRUE);
    00000C28 E601                   MOV         #1,R6
    00000C2A E500                   MOV         #0,R5
    00000C2C BEC4                   BSR         _ParseBlock
    00000C2E 64E3                   MOV         R14,R4
    00000C30 A15F                   BRA         L1017
    00000C32 0009                   NOP
    00000C34              L769:                            ; case label 
         parse.c   537                CheckTrailingSemicolon = FALSE;
         parse.c   538                break;
         parse.c   539                
         parse.c   540            case TokenIf:
         parse.c   541                if (LexGetToken(Parser, NULL, TRUE) != TokenOpenBracket)
    00000C34 E601                   MOV         #1,R6
    00000C36 E500                   MOV         #0,R5
    00000C38 4C0B                   JSR         @R12
    00000C3A 64E3                   MOV         R14,R4
    00000C3C 882B                   CMP/EQ      #43,R0
    00000C3E 8904                   BT          L963
         parse.c   542                    ProgramFail(Parser, "'(' expected");
    00000C40 D264                   MOV.L       L1030+22,R2; L614
    00000C42 2F26                   MOV.L       R2,@-R15
    00000C44 4D0B                   JSR         @R13
    00000C46 64E3                   MOV         R14,R4
    00000C48 7F04                   ADD         #4,R15
    00000C4A              L963:                             
         parse.c   543                    
         parse.c   544                Condition = ExpressionParseInt(Parser);
    00000C4A 4A0B                   JSR         @R10
    00000C4C 64E3                   MOV         R14,R4
    00000C4E 6A03                   MOV         R0,R10
         parse.c   545                
         parse.c   546                if (LexGetToken(Parser, NULL, TRUE) != TokenCloseBracket)
    00000C50 E601                   MOV         #1,R6
    00000C52 E500                   MOV         #0,R5
    00000C54 4C0B                   JSR         @R12
    00000C56 64E3                   MOV         R14,R4
    00000C58 882C                   CMP/EQ      #44,R0
    00000C5A 8903                   BT          L964
         parse.c   547                    ProgramFail(Parser, "')' expected");
    00000C5C 2F96                   MOV.L       R9,@-R15
    00000C5E 4D0B                   JSR         @R13
    00000C60 64E3                   MOV         R14,R4
    00000C62 7F04                   ADD         #4,R15
    00000C64              L964:                             
         parse.c   548    
         parse.c   549                if (ParseStatementMaybeRun(Parser, Condition, TRUE) != ParseResultOk)
    00000C64 E601                   MOV         #1,R6
    00000C66 65A3                   MOV         R10,R5
    00000C68 B9E9                   BSR         _ParseStatementMaybeRun
    00000C6A 64E3                   MOV         R14,R4
    00000C6C 8802                   CMP/EQ      #2,R0
    00000C6E 8903                   BT          L965
         parse.c   550                    ProgramFail(Parser, "statement expected");
    00000C70 2F86                   MOV.L       R8,@-R15
    00000C72 4D0B                   JSR         @R13
    00000C74 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C76 7F04                   ADD         #4,R15
    00000C78              L965:                             
         parse.c   551                
         parse.c   552                if (LexGetToken(Parser, NULL, FALSE) == TokenElse)
    00000C78 E600                   MOV         #0,R6
    00000C7A 6563                   MOV         R6,R5
    00000C7C 4C0B                   JSR         @R12
    00000C7E 64E3                   MOV         R14,R4
    00000C80 8849                   CMP/EQ      #73,R0
    00000C82 8901                   BT          L1034
    00000C84 A135                   BRA         L1017
    00000C86 0009                   NOP
    00000C88              L1034:                            
         parse.c   553                {
         parse.c   554                    LexGetToken(Parser, NULL, TRUE);
    00000C88 E601                   MOV         #1,R6
    00000C8A E500                   MOV         #0,R5
    00000C8C 4C0B                   JSR         @R12
    00000C8E 64E3                   MOV         R14,R4
         parse.c   555                    if (ParseStatementMaybeRun(Parser, !Condition, TRUE) != ParseResultOk)
    00000C90 E601                   MOV         #1,R6
    00000C92 2AA8                   TST         R10,R10
    00000C94 0529                   MOVT        R5
    00000C96 B9D2                   BSR         _ParseStatementMaybeRun
    00000C98 64E3                   MOV         R14,R4
    00000C9A 8802                   CMP/EQ      #2,R0
    00000C9C 8B01                   BF          L1035
    00000C9E A128                   BRA         L1017
    00000CA0 0009                   NOP
    00000CA2              L1035:                            
         parse.c   556                        ProgramFail(Parser, "statement expected");
    00000CA2 2F86                   MOV.L       R8,@-R15
    00000CA4 4D0B                   JSR         @R13
    00000CA6 64E3                   MOV         R14,R4
    00000CA8 A123                   BRA         L1017
    00000CAA 7F04                   ADD         #4,R15
    00000CAC              L770:                            ; case label 
         parse.c   557                }
         parse.c   558                CheckTrailingSemicolon = FALSE;
         parse.c   559                break;
         parse.c   560            
         parse.c   561            case TokenWhile:
         parse.c   562                {
         parse.c   563                    struct ParseState PreConditional;
         parse.c   564                    enum RunMode PreMode = Parser->Mode;
    00000CAC 53E3                   MOV.L       @(12,R14),R3
         parse.c   565    
         parse.c   566                    if (LexGetToken(Parser, NULL, TRUE) != TokenOpenBracket)
    00000CAE E601                   MOV         #1,R6
    00000CB0 1F32                   MOV.L       R3,@(8,R15)
    00000CB2 E500                   MOV         #0,R5
    00000CB4 4C0B                   JSR         @R12
    00000CB6 64E3                   MOV         R14,R4
    00000CB8 882B                   CMP/EQ      #43,R0
    00000CBA 8904                   BT          L969
         parse.c   567                        ProgramFail(Parser, "'(' expected");
    00000CBC D245                   MOV.L       L1030+22,R2; L614




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CBE 2F26                   MOV.L       R2,@-R15
    00000CC0 4D0B                   JSR         @R13
    00000CC2 64E3                   MOV         R14,R4
    00000CC4 7F04                   ADD         #4,R15
    00000CC6              L969:                             
         parse.c   568                        
         parse.c   569                    ParserCopyPos(&PreConditional, Parser);
    00000CC6 65E3                   MOV         R14,R5
    00000CC8 64F3                   MOV         R15,R4
    00000CCA BDA1                   BSR         _ParserCopyPos
    00000CCC 7414                   ADD         #20,R4
         parse.c   570                    do
    00000CCE              L970:                             
         parse.c   571                    {
         parse.c   572                        ParserCopyPos(Parser, &PreConditional);
    00000CCE 65F3                   MOV         R15,R5
    00000CD0 7514                   ADD         #20,R5
    00000CD2 BD9D                   BSR         _ParserCopyPos
    00000CD4 64E3                   MOV         R14,R4
         parse.c   573                        Condition = ExpressionParseInt(Parser);
    00000CD6 4A0B                   JSR         @R10
    00000CD8 64E3                   MOV         R14,R4
         parse.c   574                        if (LexGetToken(Parser, NULL, TRUE) != TokenCloseBracket)
    00000CDA E601                   MOV         #1,R6
    00000CDC 1F03                   MOV.L       R0,@(12,R15)
    00000CDE E500                   MOV         #0,R5
    00000CE0 4C0B                   JSR         @R12
    00000CE2 64E3                   MOV         R14,R4
    00000CE4 882C                   CMP/EQ      #44,R0
    00000CE6 8903                   BT          L971
         parse.c   575                            ProgramFail(Parser, "')' expected");
    00000CE8 2F96                   MOV.L       R9,@-R15
    00000CEA 4D0B                   JSR         @R13
    00000CEC 64E3                   MOV         R14,R4
    00000CEE 7F04                   ADD         #4,R15
    00000CF0              L971:                             
         parse.c   576                        
         parse.c   577                        if (ParseStatementMaybeRun(Parser, Condition, TRUE) != ParseResultOk)
    00000CF0 55F3                   MOV.L       @(12,R15),R5
    00000CF2 E601                   MOV         #1,R6
    00000CF4 B9A3                   BSR         _ParseStatementMaybeRun
    00000CF6 64E3                   MOV         R14,R4
    00000CF8 8802                   CMP/EQ      #2,R0
    00000CFA 8903                   BT          L972
         parse.c   578                            ProgramFail(Parser, "statement expected");
    00000CFC 2F86                   MOV.L       R8,@-R15
    00000CFE 4D0B                   JSR         @R13
    00000D00 64E3                   MOV         R14,R4
    00000D02 7F04                   ADD         #4,R15
    00000D04              L972:                             
         parse.c   579                        
         parse.c   580                        if (Parser->Mode == RunModeContinue)
    00000D04 50E3                   MOV.L       @(12,R14),R0
    00000D06 8805                   CMP/EQ      #5,R0
    00000D08 8B01                   BF          L973
         parse.c   581                            Parser->Mode = PreMode;
    00000D0A 52F2                   MOV.L       @(8,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D0C 1E23                   MOV.L       R2,@(12,R14)
    00000D0E              L973:                             
         parse.c   582                        
         parse.c   583                    } while (Parser->Mode == RunModeRun && Condition);
    00000D0E 53E3                   MOV.L       @(12,R14),R3
    00000D10 2338                   TST         R3,R3
    00000D12 8B02                   BF          L974
    00000D14 53F3                   MOV.L       @(12,R15),R3
    00000D16 2338                   TST         R3,R3
    00000D18 8BD9                   BF          L970
    00000D1A              L974:                             
         parse.c   584                    
         parse.c   585                    if (Parser->Mode == RunModeBreak)
    00000D1A 50E3                   MOV.L       @(12,R14),R0
    00000D1C 8804                   CMP/EQ      #4,R0
    00000D1E 8901                   BT          L1036
    00000D20 A0E7                   BRA         L1017
    00000D22 0009                   NOP
    00000D24              L1036:                            
         parse.c   586                        Parser->Mode = PreMode;
    00000D24 52F2                   MOV.L       @(8,R15),R2
    00000D26 A0E4                   BRA         L1017
    00000D28 1E23                   MOV.L       R2,@(12,R14)
    00000D2A              L771:                            ; case label 
         parse.c   587    
         parse.c   588                    CheckTrailingSemicolon = FALSE;
         parse.c   589                }
         parse.c   590                break;
         parse.c   591                    
         parse.c   592            case TokenDo:
         parse.c   593                {
         parse.c   594                    struct ParseState PreStatement;
         parse.c   595                    enum RunMode PreMode = Parser->Mode;
         parse.c   596                    ParserCopyPos(&PreStatement, Parser);
    00000D2A 65E3                   MOV         R14,R5
    00000D2C 5BE3                   MOV.L       @(12,R14),R11
    00000D2E 64F3                   MOV         R15,R4
    00000D30 BD6E                   BSR         _ParserCopyPos
    00000D32 7414                   ADD         #20,R4
         parse.c   597                    do
    00000D34              L976:                             
         parse.c   598                    {
         parse.c   599                        ParserCopyPos(Parser, &PreStatement);
    00000D34 65F3                   MOV         R15,R5
    00000D36 7514                   ADD         #20,R5
    00000D38 BD6A                   BSR         _ParserCopyPos
    00000D3A 64E3                   MOV         R14,R4
         parse.c   600                        if (ParseStatement(Parser, TRUE) != ParseResultOk)
    00000D3C E501                   MOV         #1,R5
    00000D3E BEA7                   BSR         _ParseStatement
    00000D40 64E3                   MOV         R14,R4
    00000D42 8802                   CMP/EQ      #2,R0
    00000D44 8903                   BT          L977
         parse.c   601                            ProgramFail(Parser, "statement expected");
    00000D46 2F86                   MOV.L       R8,@-R15
    00000D48 4D0B                   JSR         @R13
    00000D4A 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D4C 7F04                   ADD         #4,R15
    00000D4E              L977:                             
         parse.c   602                    
         parse.c   603                        if (Parser->Mode == RunModeContinue)
    00000D4E 50E3                   MOV.L       @(12,R14),R0
    00000D50 8805                   CMP/EQ      #5,R0
    00000D52 8F01                   BF/S        L978
         parse.c   604                            Parser->Mode = PreMode;
         parse.c   605    
         parse.c   606                        if (LexGetToken(Parser, NULL, TRUE) != TokenWhile)
    00000D54 E601                   MOV         #1,R6
    00000D56 1EB3                   MOV.L       R11,@(12,R14)
    00000D58              L978:                             
    00000D58 E500                   MOV         #0,R5
    00000D5A 4C0B                   JSR         @R12
    00000D5C 64E3                   MOV         R14,R4
    00000D5E 884D                   CMP/EQ      #77,R0
    00000D60 8904                   BT          L979
         parse.c   607                            ProgramFail(Parser, "'while' expected");
    00000D62 D21D                   MOV.L       L1030+26,R2; L663
    00000D64 2F26                   MOV.L       R2,@-R15
    00000D66 4D0B                   JSR         @R13
    00000D68 64E3                   MOV         R14,R4
    00000D6A 7F04                   ADD         #4,R15
    00000D6C              L979:                             
         parse.c   608                        
         parse.c   609                        if (LexGetToken(Parser, NULL, TRUE) != TokenOpenBracket)
    00000D6C E601                   MOV         #1,R6
    00000D6E E500                   MOV         #0,R5
    00000D70 4C0B                   JSR         @R12
    00000D72 64E3                   MOV         R14,R4
    00000D74 882B                   CMP/EQ      #43,R0
    00000D76 8904                   BT          L980
         parse.c   610                            ProgramFail(Parser, "'(' expected");
    00000D78 D216                   MOV.L       L1030+22,R2; L614
    00000D7A 2F26                   MOV.L       R2,@-R15
    00000D7C 4D0B                   JSR         @R13
    00000D7E 64E3                   MOV         R14,R4
    00000D80 7F04                   ADD         #4,R15
    00000D82              L980:                             
         parse.c   611                            
         parse.c   612                        Condition = ExpressionParseInt(Parser);
    00000D82 4A0B                   JSR         @R10
    00000D84 64E3                   MOV         R14,R4
         parse.c   613                        if (LexGetToken(Parser, NULL, TRUE) != TokenCloseBracket)
    00000D86 E601                   MOV         #1,R6
    00000D88 1F02                   MOV.L       R0,@(8,R15)
    00000D8A E500                   MOV         #0,R5
    00000D8C 4C0B                   JSR         @R12
    00000D8E 64E3                   MOV         R14,R4
    00000D90 882C                   CMP/EQ      #44,R0
    00000D92 8903                   BT          L981
         parse.c   614                            ProgramFail(Parser, "')' expected");
    00000D94 2F96                   MOV.L       R9,@-R15
    00000D96 4D0B                   JSR         @R13
    00000D98 64E3                   MOV         R14,R4
    00000D9A 7F04                   ADD         #4,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D9C              L981:                             
         parse.c   615                        
         parse.c   616                    } while (Condition && Parser->Mode == RunModeRun);           
    00000D9C 52F2                   MOV.L       @(8,R15),R2
    00000D9E 2228                   TST         R2,R2
    00000DA0 8902                   BT          L982
    00000DA2 53E3                   MOV.L       @(12,R14),R3
    00000DA4 2338                   TST         R3,R3
    00000DA6 89C5                   BT          L976
    00000DA8              L982:                             
         parse.c   617                    
         parse.c   618                    if (Parser->Mode == RunModeBreak)
    00000DA8 50E3                   MOV.L       @(12,R14),R0
    00000DAA 8804                   CMP/EQ      #4,R0
    00000DAC 8901                   BT          L1037
    00000DAE A150                   BRA         L955
    00000DB0 0009                   NOP
    00000DB2              L1037:                            
         parse.c   619                        Parser->Mode = PreMode;
         parse.c   620                }
         parse.c   621                break;
    00000DB2 A14E                   BRA         L955
    00000DB4 1EB3                   MOV.L       R11,@(12,R14)
    00000DB6              L773:                            ; case label 
         parse.c   622                    
         parse.c   623            case TokenFor:
         parse.c   624                ParseFor(Parser);
    00000DB6 BD36                   BSR         _ParseFor
    00000DB8 64E3                   MOV         R14,R4
    00000DBA A09A                   BRA         L1017
    00000DBC 0009                   NOP
    00000DBE              L1030:                            
    00000DBE 0000                   .DATA.W     0
    00000DC0 <00000000>             .DATA.L     _VariableDefined
    00000DC4 <00000000>             .DATA.L     _VariableGet
    00000DC8 <00000000>             .DATA.L     __quick_evn_mvn
    00000DCC <00000000>             .DATA.L     _ExpressionParse
    00000DD0 <00000000>             .DATA.L     _VariableStackPop
    00000DD4 <00000000>             .DATA.L     L614
    00000DD8 <00000000>             .DATA.L     L663
    00000DDC              L774:                            ; case label 
         parse.c   625                CheckTrailingSemicolon = FALSE;
         parse.c   626                break;
         parse.c   627    
         parse.c   628            case TokenSemicolon: 
         parse.c   629                CheckTrailingSemicolon = FALSE; 
         parse.c   630                break;
    00000DDC A089                   BRA         L1017
    00000DDE 0009                   NOP
    00000DE0              L775:                            ; case label 
         parse.c   631    
         parse.c   632            case TokenIntType:
         parse.c   633            case TokenShortType:
    00000DE0              L776:                            ; case label 
         parse.c   634            case TokenCharType:
    00000DE0              L777:                            ; case label 
         parse.c   635            case TokenLongType:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DE0              L778:                            ; case label 
         parse.c   636            case TokenFloatType:
    00000DE0              L779:                            ; case label 
         parse.c   637            case TokenDoubleType:
    00000DE0              L780:                            ; case label 
         parse.c   638            case TokenVoidType:
    00000DE0              L781:                            ; case label 
         parse.c   639            case TokenStructType:
    00000DE0              L782:                            ; case label 
         parse.c   640            case TokenUnionType:
    00000DE0              L783:                            ; case label 
         parse.c   641            case TokenEnumType:
    00000DE0              L784:                            ; case label 
         parse.c   642            case TokenSignedType:
    00000DE0              L785:                            ; case label 
         parse.c   643            case TokenUnsignedType:
    00000DE0              L786:                            ; case label 
         parse.c   644            case TokenStaticType:
    00000DE0              L787:                            ; case label 
         parse.c   645            case TokenAutoType:
    00000DE0              L788:                            ; case label 
         parse.c   646            case TokenRegisterType:
    00000DE0              L789:                            ; case label 
         parse.c   647            case TokenExternType:
    00000DE0              L790:                            ; case label 
         parse.c   648                *Parser = PreState;
    00000DE0 D378                   MOV.L       L1038,R3   ; __quick_evn_mvn
    00000DE2 61E3                   MOV         R14,R1
    00000DE4 62F3                   MOV         R15,R2
    00000DE6 7234                   ADD         #52,R2
    00000DE8 430B                   JSR         @R3
    00000DEA E020                   MOV         #32,R0
         parse.c   649                CheckTrailingSemicolon = ParseDeclaration(Parser, Token);
    00000DEC 55F2                   MOV.L       @(8,R15),R5
    00000DEE BBA7                   BSR         _ParseDeclaration
    00000DF0 64E3                   MOV         R14,R4
         parse.c   650                break;
    00000DF2 A12E                   BRA         L955
    00000DF4 1F03                   MOV.L       R0,@(12,R15)
    00000DF6              L791:                            ; case label 
         parse.c   651            
         parse.c   652            case TokenHashDefine:
         parse.c   653                ParseMacroDefinition(Parser);
    00000DF6 BC5A                   BSR         _ParseMacroDefinition
    00000DF8 64E3                   MOV         R14,R4
    00000DFA A07A                   BRA         L1017
    00000DFC 0009                   NOP
    00000DFE              L792:                            ; case label 
         parse.c   654                CheckTrailingSemicolon = FALSE;
         parse.c   655                break;
         parse.c   656                
         parse.c   657    #ifndef NO_HASH_INCLUDE
         parse.c   658            case TokenHashInclude:
         parse.c   659                if (LexGetToken(Parser, &LexerValue, TRUE) != TokenStringConstant)
    00000DFE E601                   MOV         #1,R6
    00000E00 65F3                   MOV         R15,R5
    00000E02 4C0B                   JSR         @R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E04 64E3                   MOV         R14,R4
    00000E06 8830                   CMP/EQ      #48,R0
    00000E08 8904                   BT          L984
         parse.c   660                    ProgramFail(Parser, "\"filename.h\" expected");
    00000E0A D36F                   MOV.L       L1038+4,R3 ; L664
    00000E0C 2F36                   MOV.L       R3,@-R15
    00000E0E 4D0B                   JSR         @R13
    00000E10 64E3                   MOV         R14,R4
    00000E12 7F04                   ADD         #4,R15
    00000E14              L984:                             
         parse.c   661                
         parse.c   662                IncludeFile((char *)LexerValue->Val->Pointer);
    00000E14 64F2                   MOV.L       @R15,R4
    00000E16 5441                   MOV.L       @(4,R4),R4
    00000E18 D36C                   MOV.L       L1038+8,R3 ; _IncludeFile
    00000E1A 430B                   JSR         @R3
    00000E1C 6442                   MOV.L       @R4,R4
    00000E1E A068                   BRA         L1017
    00000E20 0009                   NOP
    00000E22              L794:                            ; case label 
         parse.c   663                CheckTrailingSemicolon = FALSE;
         parse.c   664                break;
         parse.c   665    #endif
         parse.c   666    
         parse.c   667            case TokenSwitch:
         parse.c   668                if (LexGetToken(Parser, NULL, TRUE) != TokenOpenBracket)
    00000E22 E601                   MOV         #1,R6
    00000E24 E500                   MOV         #0,R5
    00000E26 4C0B                   JSR         @R12
    00000E28 64E3                   MOV         R14,R4
    00000E2A 882B                   CMP/EQ      #43,R0
    00000E2C 8904                   BT          L985
         parse.c   669                    ProgramFail(Parser, "'(' expected");
    00000E2E D368                   MOV.L       L1038+12,R3; L614
    00000E30 2F36                   MOV.L       R3,@-R15
    00000E32 4D0B                   JSR         @R13
    00000E34 64E3                   MOV         R14,R4
    00000E36 7F04                   ADD         #4,R15
    00000E38              L985:                             
         parse.c   670                    
         parse.c   671                Condition = ExpressionParseInt(Parser);
    00000E38 4A0B                   JSR         @R10
    00000E3A 64E3                   MOV         R14,R4
    00000E3C 1F03                   MOV.L       R0,@(12,R15)
         parse.c   672                
         parse.c   673                if (LexGetToken(Parser, NULL, TRUE) != TokenCloseBracket)
    00000E3E E601                   MOV         #1,R6
    00000E40 E500                   MOV         #0,R5
    00000E42 4C0B                   JSR         @R12
    00000E44 64E3                   MOV         R14,R4
    00000E46 882C                   CMP/EQ      #44,R0
    00000E48 8903                   BT          L986
         parse.c   674                    ProgramFail(Parser, "')' expected");
    00000E4A 2F96                   MOV.L       R9,@-R15
    00000E4C 4D0B                   JSR         @R13
    00000E4E 64E3                   MOV         R14,R4
    00000E50 7F04                   ADD         #4,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E52              L986:                             
         parse.c   675                
         parse.c   676                if (LexGetToken(Parser, NULL, FALSE) != TokenLeftBrace)
    00000E52 E600                   MOV         #0,R6
    00000E54 6563                   MOV         R6,R5
    00000E56 4C0B                   JSR         @R12
    00000E58 64E3                   MOV         R14,R4
    00000E5A 8834                   CMP/EQ      #52,R0
    00000E5C 8904                   BT          L987
         parse.c   677                    ProgramFail(Parser, "'{' expected");
    00000E5E D35D                   MOV.L       L1038+16,R3; L625
    00000E60 2F36                   MOV.L       R3,@-R15
    00000E62 4D0B                   JSR         @R13
    00000E64 64E3                   MOV         R14,R4
    00000E66 7F04                   ADD         #4,R15
    00000E68              L987:                             
         parse.c   678                
         parse.c   679                { 
         parse.c   680                    /* new block so we can store parser state */
         parse.c   681                    enum RunMode OldMode = Parser->Mode;
    00000E68 5AE3                   MOV.L       @(12,R14),R10
         parse.c   682                    int OldSearchLabel = Parser->SearchLabel;
         parse.c   683                    Parser->Mode = RunModeCaseSearch;
    00000E6A E303                   MOV         #3,R3
    00000E6C 52E4                   MOV.L       @(16,R14),R2
         parse.c   684                    Parser->SearchLabel = Condition;
         parse.c   685                    
         parse.c   686                    ParseBlock(Parser, TRUE, OldMode != RunModeSkip);
    00000E6E E501                   MOV         #1,R5
    00000E70 1F22                   MOV.L       R2,@(8,R15)
    00000E72 60A3                   MOV         R10,R0
    00000E74 1E33                   MOV.L       R3,@(12,R14)
    00000E76 8801                   CMP/EQ      #1,R0
    00000E78 52F3                   MOV.L       @(12,R15),R2
    00000E7A 0629                   MOVT        R6
    00000E7C 1E24                   MOV.L       R2,@(16,R14)
    00000E7E 76FF                   ADD         #-1,R6
    00000E80 666B                   NEG         R6,R6
    00000E82 BD99                   BSR         _ParseBlock
    00000E84 64E3                   MOV         R14,R4
         parse.c   687                    
         parse.c   688                    if (Parser->Mode != RunModeReturn)
    00000E86 50E3                   MOV.L       @(12,R14),R0
    00000E88 8802                   CMP/EQ      #2,R0
    00000E8A 8900                   BT          L988
         parse.c   689                        Parser->Mode = OldMode;
    00000E8C 1EA3                   MOV.L       R10,@(12,R14)
    00000E8E              L988:                             
         parse.c   690    
         parse.c   691                    Parser->SearchLabel = OldSearchLabel;
    00000E8E 53F2                   MOV.L       @(8,R15),R3
    00000E90 A02F                   BRA         L1017
    00000E92 1E34                   MOV.L       R3,@(16,R14)
    00000E94              L795:                            ; case label 
         parse.c   692                }
         parse.c   693    
         parse.c   694                CheckTrailingSemicolon = FALSE;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   695                break;
         parse.c   696    
         parse.c   697            case TokenCase:
         parse.c   698                if (Parser->Mode == RunModeCaseSearch)
    00000E94 50E3                   MOV.L       @(12,R14),R0
    00000E96 8803                   CMP/EQ      #3,R0
    00000E98 8B06                   BF          L989
         parse.c   699                {
         parse.c   700                    Parser->Mode = RunModeRun;
    00000E9A 1EB3                   MOV.L       R11,@(12,R14)
         parse.c   701                    Condition = ExpressionParseInt(Parser);
    00000E9C 4A0B                   JSR         @R10
    00000E9E 64E3                   MOV         R14,R4
    00000EA0 6903                   MOV         R0,R9
         parse.c   702                    Parser->Mode = RunModeCaseSearch;
    00000EA2 E203                   MOV         #3,R2
    00000EA4 A003                   BRA         L990
    00000EA6 1E23                   MOV.L       R2,@(12,R14)
    00000EA8              L989:                             
         parse.c   703                }
         parse.c   704                else
         parse.c   705                    Condition = ExpressionParseInt(Parser);
    00000EA8 4A0B                   JSR         @R10
    00000EAA 64E3                   MOV         R14,R4
    00000EAC 6903                   MOV         R0,R9
    00000EAE              L990:                             
         parse.c   706                    
         parse.c   707                if (LexGetToken(Parser, NULL, TRUE) != TokenColon)
    00000EAE E601                   MOV         #1,R6
    00000EB0 E500                   MOV         #0,R5
    00000EB2 4C0B                   JSR         @R12
    00000EB4 64E3                   MOV         R14,R4
    00000EB6 880E                   CMP/EQ      #14,R0
    00000EB8 8904                   BT          L991
         parse.c   708                    ProgramFail(Parser, "':' expected");
    00000EBA D347                   MOV.L       L1038+20,R3; L669
    00000EBC 2F36                   MOV.L       R3,@-R15
    00000EBE 4D0B                   JSR         @R13
    00000EC0 64E3                   MOV         R14,R4
    00000EC2 7F04                   ADD         #4,R15
    00000EC4              L991:                             
         parse.c   709                
         parse.c   710                if (Parser->Mode == RunModeCaseSearch && Condition == Parser->SearchLabel)
    00000EC4 50E3                   MOV.L       @(12,R14),R0
    00000EC6 8803                   CMP/EQ      #3,R0
    00000EC8 8B13                   BF          L1017
    00000ECA 53E4                   MOV.L       @(16,R14),R3
    00000ECC 3930                   CMP/EQ      R3,R9
    00000ECE 8B10                   BF          L1017
    00000ED0 A00F                   BRA         L1017
         parse.c   711                    Parser->Mode = RunModeRun;
    00000ED2 1EB3                   MOV.L       R11,@(12,R14)
    00000ED4              L797:                            ; case label 
         parse.c   712    
         parse.c   713                CheckTrailingSemicolon = FALSE;
         parse.c   714                break;
         parse.c   715                




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   716            case TokenDefault:
         parse.c   717                if (LexGetToken(Parser, NULL, TRUE) != TokenColon)
    00000ED4 E601                   MOV         #1,R6
    00000ED6 E500                   MOV         #0,R5
    00000ED8 4C0B                   JSR         @R12
    00000EDA 64E3                   MOV         R14,R4
    00000EDC 880E                   CMP/EQ      #14,R0
    00000EDE 8904                   BT          L993
         parse.c   718                    ProgramFail(Parser, "':' expected");
    00000EE0 D23D                   MOV.L       L1038+20,R2; L669
    00000EE2 2F26                   MOV.L       R2,@-R15
    00000EE4 4D0B                   JSR         @R13
    00000EE6 64E3                   MOV         R14,R4
    00000EE8 7F04                   ADD         #4,R15
    00000EEA              L993:                             
         parse.c   719                
         parse.c   720                if (Parser->Mode == RunModeCaseSearch)
    00000EEA 50E3                   MOV.L       @(12,R14),R0
    00000EEC 8803                   CMP/EQ      #3,R0
    00000EEE 8B00                   BF          L1017
         parse.c   721                    Parser->Mode = RunModeRun;
    00000EF0 1EB3                   MOV.L       R11,@(12,R14)
    00000EF2              L1017:                            
         parse.c   722                    
         parse.c   723                CheckTrailingSemicolon = FALSE;
         parse.c   724                break;
    00000EF2 A0AE                   BRA         L955
    00000EF4 1FB3                   MOV.L       R11,@(12,R15)
    00000EF6              L798:                            ; case label 
         parse.c   725    
         parse.c   726            case TokenBreak:
         parse.c   727                if (Parser->Mode == RunModeRun)
    00000EF6 52E3                   MOV.L       @(12,R14),R2
    00000EF8 2228                   TST         R2,R2
    00000EFA 8901                   BT          L1039
    00000EFC A0A9                   BRA         L955
    00000EFE 0009                   NOP
    00000F00              L1039:                            
         parse.c   728                    Parser->Mode = RunModeBreak;
    00000F00 E304                   MOV         #4,R3
         parse.c   729                break;
    00000F02 A0A6                   BRA         L955
    00000F04 1E33                   MOV.L       R3,@(12,R14)
    00000F06              L799:                            ; case label 
         parse.c   730                
         parse.c   731            case TokenContinue:
         parse.c   732                if (Parser->Mode == RunModeRun)
    00000F06 51E3                   MOV.L       @(12,R14),R1
    00000F08 2118                   TST         R1,R1
    00000F0A 8901                   BT          L1040
    00000F0C A0A1                   BRA         L955
    00000F0E 0009                   NOP
    00000F10              L1040:                            
         parse.c   733                    Parser->Mode = RunModeContinue;
    00000F10 E205                   MOV         #5,R2
         parse.c   734                break;
    00000F12 A09E                   BRA         L955




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F14 1E23                   MOV.L       R2,@(12,R14)
    00000F16              L800:                            ; case label 
         parse.c   735                
         parse.c   736            case TokenReturn:
         parse.c   737                if (Parser->Mode == RunModeRun)
    00000F16 51E3                   MOV.L       @(12,R14),R1
    00000F18 2118                   TST         R1,R1
    00000F1A 8B33                   BF          L997
         parse.c   738                {
         parse.c   739                    if (TopStackFrame->ReturnValue->Typ->Base != TypeVoid)
    00000F1C D12F                   MOV.L       L1038+24,R1; _TopStackFrame
    00000F1E 6312                   MOV.L       @R1,R3
    00000F20 5239                   MOV.L       @(36,R3),R2
    00000F22 6022                   MOV.L       @R2,R0
    00000F24 6302                   MOV.L       @R0,R3
    00000F26 2338                   TST         R3,R3
    00000F28 891D                   BT          L998
         parse.c   740                    {
         parse.c   741                        if (!ExpressionParse(Parser, &CValue))
    00000F2A 65F3                   MOV         R15,R5
    00000F2C D32C                   MOV.L       L1038+28,R3; _ExpressionParse
    00000F2E 7504                   ADD         #4,R5
    00000F30 430B                   JSR         @R3
    00000F32 64E3                   MOV         R14,R4
    00000F34 2008                   TST         R0,R0
    00000F36 8B04                   BF          L999
         parse.c   742                            ProgramFail(Parser, "value required in return");
    00000F38 D32A                   MOV.L       L1038+32,R3; L672
    00000F3A 2F36                   MOV.L       R3,@-R15
    00000F3C 4D0B                   JSR         @R13
    00000F3E 64E3                   MOV         R14,R4
    00000F40 7F04                   ADD         #4,R15
    00000F42              L999:                             
         parse.c   743                        
         parse.c   744                        ExpressionAssign(Parser, TopStackFrame->ReturnValue, CValue, TRUE, NULL, 0, FALSE);
    00000F42 E701                   MOV         #1,R7
    00000F44 D325                   MOV.L       L1038+24,R3; _TopStackFrame
    00000F46 2FB6                   MOV.L       R11,@-R15
    00000F48 2FB6                   MOV.L       R11,@-R15
    00000F4A 2FB6                   MOV.L       R11,@-R15
    00000F4C 56F4                   MOV.L       @(16,R15),R6
    00000F4E 6532                   MOV.L       @R3,R5
    00000F50 D225                   MOV.L       L1038+36,R2; _ExpressionAssign
    00000F52 5559                   MOV.L       @(36,R5),R5
    00000F54 420B                   JSR         @R2
    00000F56 64E3                   MOV         R14,R4
         parse.c   745                        VariableStackPop(Parser, CValue);
    00000F58 D324                   MOV.L       L1038+40,R3; _VariableStackPop
    00000F5A 7F0C                   ADD         #12,R15
    00000F5C 55F1                   MOV.L       @(4,R15),R5
    00000F5E 430B                   JSR         @R3
    00000F60 64E3                   MOV         R14,R4
    00000F62 A00C                   BRA         L1000
    00000F64 0009                   NOP
    00000F66              L998:                             
         parse.c   746                    }
         parse.c   747                    else




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   748                    {
         parse.c   749                        if (ExpressionParse(Parser, &CValue))
    00000F66 65F3                   MOV         R15,R5
    00000F68 D31D                   MOV.L       L1038+28,R3; _ExpressionParse
    00000F6A 7504                   ADD         #4,R5
    00000F6C 430B                   JSR         @R3
    00000F6E 64E3                   MOV         R14,R4
    00000F70 2008                   TST         R0,R0
    00000F72 8904                   BT          L1000
         parse.c   750                            ProgramFail(Parser, "value in return from a void function");                    
    00000F74 D31E                   MOV.L       L1038+44,R3; L674
    00000F76 2F36                   MOV.L       R3,@-R15
    00000F78 4D0B                   JSR         @R13
    00000F7A 64E3                   MOV         R14,R4
    00000F7C 7F04                   ADD         #4,R15
    00000F7E              L1000:                            
         parse.c   751                    }
         parse.c   752                    
         parse.c   753                    Parser->Mode = RunModeReturn;
    00000F7E E202                   MOV         #2,R2
    00000F80 A067                   BRA         L955
    00000F82 1E23                   MOV.L       R2,@(12,R14)
    00000F84              L997:                             
         parse.c   754                }
         parse.c   755                else
         parse.c   756                    ExpressionParse(Parser, &CValue);
    00000F84 D216                   MOV.L       L1038+28,R2; _ExpressionParse
    00000F86 65F3                   MOV         R15,R5
    00000F88 7504                   ADD         #4,R5
    00000F8A 420B                   JSR         @R2
    00000F8C 64E3                   MOV         R14,R4
         parse.c   757                break;
    00000F8E A060                   BRA         L955
    00000F90 0009                   NOP
    00000F92              L803:                            ; case label 
         parse.c   758    
         parse.c   759            case TokenTypedef:
         parse.c   760                ParseTypedef(Parser);
    00000F92 BD50                   BSR         _ParseTypedef
    00000F94 64E3                   MOV         R14,R4
         parse.c   761                break;
    00000F96 A05C                   BRA         L955
    00000F98 0009                   NOP
    00000F9A              L804:                            ; case label 
         parse.c   762                
         parse.c   763            case TokenGoto:
         parse.c   764                if (LexGetToken(Parser, &LexerValue, TRUE) != TokenIdentifier)
    00000F9A E601                   MOV         #1,R6
    00000F9C 65F3                   MOV         R15,R5
    00000F9E 4C0B                   JSR         @R12
    00000FA0 64E3                   MOV         R14,R4
    00000FA2 882D                   CMP/EQ      #45,R0
    00000FA4 8904                   BT          L1003
         parse.c   765                    ProgramFail(Parser, "identifier expected");
    00000FA6 D313                   MOV.L       L1038+48,R3; L579
    00000FA8 2F36                   MOV.L       R3,@-R15
    00000FAA 4D0B                   JSR         @R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FAC 64E3                   MOV         R14,R4
    00000FAE 7F04                   ADD         #4,R15
    00000FB0              L1003:                            
         parse.c   766                
         parse.c   767                if (Parser->Mode == RunModeRun)
    00000FB0 52E3                   MOV.L       @(12,R14),R2
    00000FB2 2228                   TST         R2,R2
    00000FB4 8B4D                   BF          L955
         parse.c   768                { 
         parse.c   769                    /* start scanning for the goto label */
         parse.c   770                    Parser->SearchGotoLabel = LexerValue->Val->Identifier;
    00000FB6 63F2                   MOV.L       @R15,R3
    00000FB8 5231                   MOV.L       @(4,R3),R2
         parse.c   771                    Parser->Mode = RunModeGoto;
    00000FBA E306                   MOV         #6,R3
    00000FBC 6122                   MOV.L       @R2,R1
    00000FBE 1E15                   MOV.L       R1,@(20,R14)
         parse.c   772                }
         parse.c   773                break;
    00000FC0 A047                   BRA         L955
    00000FC2 1E33                   MOV.L       R3,@(12,R14)
    00000FC4              L1038:                            
    00000FC4 <00000000>             .DATA.L     __quick_evn_mvn
    00000FC8 <00000000>             .DATA.L     L664
    00000FCC <00000000>             .DATA.L     _IncludeFile
    00000FD0 <00000000>             .DATA.L     L614
    00000FD4 <00000000>             .DATA.L     L625
    00000FD8 <00000000>             .DATA.L     L669
    00000FDC <00000000>             .DATA.L     _TopStackFrame
    00000FE0 <00000000>             .DATA.L     _ExpressionParse
    00000FE4 <00000000>             .DATA.L     L672
    00000FE8 <00000000>             .DATA.L     _ExpressionAssign
    00000FEC <00000000>             .DATA.L     _VariableStackPop
    00000FF0 <00000000>             .DATA.L     L674
    00000FF4 <00000000>             .DATA.L     L579
    00000FF8              L805:                            ; case label 
         parse.c   774                    
         parse.c   775            case TokenDelete:
         parse.c   776            {
         parse.c   777                /* try it as a function or variable name to delete */
         parse.c   778                if (LexGetToken(Parser, &LexerValue, TRUE) != TokenIdentifier)
    00000FF8 E601                   MOV         #1,R6
    00000FFA 65F3                   MOV         R15,R5
    00000FFC 4C0B                   JSR         @R12
    00000FFE 64E3                   MOV         R14,R4
    00001000 882D                   CMP/EQ      #45,R0
    00001002 8904                   BT          L1005
         parse.c   779                    ProgramFail(Parser, "identifier expected");
    00001004 D247                   MOV.L       L1041,R2   ; L579
    00001006 2F26                   MOV.L       R2,@-R15
    00001008 4D0B                   JSR         @R13
    0000100A 64E3                   MOV         R14,R4
    0000100C 7F04                   ADD         #4,R15
    0000100E              L1005:                            
         parse.c   780                    
         parse.c   781                if (Parser->Mode == RunModeRun)
    0000100E 53E3                   MOV.L       @(12,R14),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001010 2338                   TST         R3,R3
    00001012 8B1E                   BF          L955
         parse.c   782                { 
         parse.c   783                    /* delete this variable or function */
         parse.c   784                    CValue = TableDelete(&GlobalTable, LexerValue->Val->Identifier);
    00001014 65F2                   MOV.L       @R15,R5
    00001016 5551                   MOV.L       @(4,R5),R5
    00001018 D443                   MOV.L       L1041+4,R4 ; _GlobalTable
    0000101A D344                   MOV.L       L1041+8,R3 ; _TableDelete
    0000101C 430B                   JSR         @R3
    0000101E 6552                   MOV.L       @R5,R5
         parse.c   785    
         parse.c   786                    if (CValue == NULL)
    00001020 2008                   TST         R0,R0
    00001022 8F09                   BF/S        L1007
    00001024 1F01                   MOV.L       R0,@(4,R15)
         parse.c   787                        ProgramFail(Parser, "'%s' is not defined", LexerValue->Val->Identifier);
    00001026 62F2                   MOV.L       @R15,R2
    00001028 5321                   MOV.L       @(4,R2),R3
    0000102A 6132                   MOV.L       @R3,R1
    0000102C D240                   MOV.L       L1041+12,R2; L678
    0000102E 2F16                   MOV.L       R1,@-R15
    00001030 2F26                   MOV.L       R2,@-R15
    00001032 4D0B                   JSR         @R13
    00001034 64E3                   MOV         R14,R4
    00001036 7F08                   ADD         #8,R15
    00001038              L1007:                            
         parse.c   788                    
         parse.c   789                    VariableFree(CValue);
    00001038 D33E                   MOV.L       L1041+16,R3; _VariableFree
    0000103A 430B                   JSR         @R3
    0000103C 54F1                   MOV.L       @(4,R15),R4
         parse.c   790                }
         parse.c   791                break;
    0000103E A008                   BRA         L955
    00001040 0009                   NOP
    00001042              L807:                            ; default label 
         parse.c   792            }
         parse.c   793            
         parse.c   794            default:
         parse.c   795                *Parser = PreState;
    00001042 61E3                   MOV         R14,R1
    00001044 D33C                   MOV.L       L1041+20,R3; __quick_evn_mvn
    00001046 62F3                   MOV         R15,R2
    00001048 7234                   ADD         #52,R2
    0000104A 430B                   JSR         @R3
    0000104C E020                   MOV         #32,R0
         parse.c   796                return ParseResultError;
    0000104E A00F                   BRA         L956
    00001050 E001                   MOV         #1,R0
    00001052              L955:                             
         parse.c   797        }
         parse.c   798        
         parse.c   799        if (CheckTrailingSemicolon)
    00001052 52F3                   MOV.L       @(12,R15),R2
    00001054 2228                   TST         R2,R2
    00001056 890A                   BT          L1008




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   800        {
         parse.c   801            if (LexGetToken(Parser, NULL, TRUE) != TokenSemicolon)
    00001058 E601                   MOV         #1,R6
    0000105A E500                   MOV         #0,R5
    0000105C 4C0B                   JSR         @R12
    0000105E 64E3                   MOV         R14,R4
    00001060 8832                   CMP/EQ      #50,R0
    00001062 8904                   BT          L1008
         parse.c   802                ProgramFail(Parser, "';' expected");
    00001064 D235                   MOV.L       L1041+24,R2; L616
    00001066 2F26                   MOV.L       R2,@-R15
    00001068 4D0B                   JSR         @R13
    0000106A 64E3                   MOV         R14,R4
    0000106C 7F04                   ADD         #4,R15
    0000106E              L1008:                            
         parse.c   803        }
         parse.c   804        
         parse.c   805        return ParseResultOk;
    0000106E E002                   MOV         #2,R0
         parse.c   806    }
    00001070              L956:                             
    00001070 7F54                   ADD         #84,R15
    00001072 4F26                   LDS.L       @R15+,PR
    00001074 68F6                   MOV.L       @R15+,R8
    00001076 69F6                   MOV.L       @R15+,R9
    00001078 6AF6                   MOV.L       @R15+,R10
    0000107A 6BF6                   MOV.L       @R15+,R11
    0000107C 6CF6                   MOV.L       @R15+,R12
    0000107E 6DF6                   MOV.L       @R15+,R13
    00001080 000B                   RTS
    00001082 6EF6                   MOV.L       @R15+,R14
         parse.c   807    
         parse.c   808    /* quick scan a source file for definitions */
         parse.c   809    void PicocParse(const char *FileName, const char *Source, int SourceLen, int RunIt, int CleanupNow, int Cl
                         +eanupSource)
    00001084              _PicocParse:                     ; function: PicocParse
                                                           ; frame size=60
    00001084 2FE6                   MOV.L       R14,@-R15
    00001086 2FD6                   MOV.L       R13,@-R15
    00001088 2FC6                   MOV.L       R12,@-R15
    0000108A 6D53                   MOV         R5,R13
         parse.c   810    {
         parse.c   811        struct ParseState Parser;
         parse.c   812        enum ParseResult Ok;
         parse.c   813        struct CleanupTokenNode *NewCleanupNode;
         parse.c   814        
         parse.c   815        void *Tokens = LexAnalyse(FileName, Source, SourceLen, NULL);
    0000108C D32C                   MOV.L       L1041+28,R3; _LexAnalyse
    0000108E 65D3                   MOV         R13,R5
    00001090 4F22                   STS.L       PR,@-R15
    00001092 7FD8                   ADD         #-40,R15
    00001094 2F42                   MOV.L       R4,@R15
    00001096 1F71                   MOV.L       R7,@(4,R15)
    00001098 E700                   MOV         #0,R7
    0000109A 430B                   JSR         @R3
    0000109C 64F2                   MOV.L       @R15,R4
    0000109E 6C03                   MOV         R0,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         parse.c   816        
         parse.c   817        /* allocate a cleanup node so we can clean up the tokens later */
         parse.c   818        if (!CleanupNow)
    000010A0 52FE                   MOV.L       @(56,R15),R2
    000010A2 2228                   TST         R2,R2
    000010A4 8B17                   BF          L1010
         parse.c   819        {
         parse.c   820            NewCleanupNode = HeapAllocMem(sizeof(struct CleanupTokenNode));
    000010A6 D327                   MOV.L       L1041+32,R3; _HeapAllocMem
    000010A8 430B                   JSR         @R3
    000010AA E40C                   MOV         #12,R4
    000010AC 6E03                   MOV         R0,R14
         parse.c   821            if (NewCleanupNode == NULL)
    000010AE 2EE8                   TST         R14,R14
    000010B0 8B05                   BF          L1011
         parse.c   822                ProgramFail(NULL, "out of memory");
    000010B2 D325                   MOV.L       L1041+36,R3; L692
    000010B4 D225                   MOV.L       L1041+40,R2; _ProgramFail
    000010B6 2F36                   MOV.L       R3,@-R15
    000010B8 420B                   JSR         @R2
    000010BA E400                   MOV         #0,R4
    000010BC 7F04                   ADD         #4,R15
    000010BE              L1011:                            
         parse.c   823            
         parse.c   824            NewCleanupNode->Tokens = Tokens;
    000010BE 2EC2                   MOV.L       R12,@R14
         parse.c   825            if (CleanupSource)
    000010C0 53FF                   MOV.L       @(60,R15),R3
    000010C2 2338                   TST         R3,R3
    000010C4 8901                   BT          L1012
         parse.c   826                NewCleanupNode->SourceText = Source;
    000010C6 A002                   BRA         L1013
    000010C8 1ED1                   MOV.L       R13,@(4,R14)
    000010CA              L1012:                            
         parse.c   827            else
         parse.c   828                NewCleanupNode->SourceText = NULL;
    000010CA E200                   MOV         #0,R2
    000010CC 1E21                   MOV.L       R2,@(4,R14)
    000010CE              L1013:                            
         parse.c   829                
         parse.c   830            NewCleanupNode->Next = CleanupTokenList;
    000010CE D420                   MOV.L       L1041+44,R4; __$CleanupTokenList
    000010D0 6342                   MOV.L       @R4,R3
    000010D2 1E32                   MOV.L       R3,@(8,R14)
         parse.c   831            CleanupTokenList = NewCleanupNode;
    000010D4 24E2                   MOV.L       R14,@R4
    000010D6              L1010:                            
         parse.c   832        }
         parse.c   833        
         parse.c   834        /* do the parsing */
         parse.c   835        LexInitParser(&Parser, Source, Tokens, FileName, RunIt);
    000010D6 66C3                   MOV         R12,R6
    000010D8 D31E                   MOV.L       L1041+48,R3; _LexInitParser
    000010DA 65D3                   MOV         R13,R5
    000010DC 52F1                   MOV.L       @(4,R15),R2
    000010DE 2F26                   MOV.L       R2,@-R15
    000010E0 57F1                   MOV.L       @(4,R15),R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010E2 64F3                   MOV         R15,R4
    000010E4 430B                   JSR         @R3
    000010E6 740C                   ADD         #12,R4
    000010E8 7F04                   ADD         #4,R15
         parse.c   836    
         parse.c   837        do {
    000010EA              L1014:                            
         parse.c   838            Ok = ParseStatement(&Parser, TRUE);
    000010EA E501                   MOV         #1,R5
    000010EC 64F3                   MOV         R15,R4
    000010EE BCCF                   BSR         _ParseStatement
    000010F0 7408                   ADD         #8,R4
         parse.c   839        } while (Ok == ParseResultOk);
    000010F2 8802                   CMP/EQ      #2,R0
    000010F4 8DF9                   BT/S        L1014
    000010F6 6403                   MOV         R0,R4
         parse.c   840        
         parse.c   841        if (Ok == ParseResultError)
    000010F8 6043                   MOV         R4,R0
    000010FA 8801                   CMP/EQ      #1,R0
    000010FC 8B06                   BF          L1015
         parse.c   842            ProgramFail(&Parser, "parse error");
    000010FE D316                   MOV.L       L1041+52,R3; L694
    00001100 D212                   MOV.L       L1041+40,R2; _ProgramFail
    00001102 2F36                   MOV.L       R3,@-R15
    00001104 64F3                   MOV         R15,R4
    00001106 420B                   JSR         @R2
    00001108 740C                   ADD         #12,R4
    0000110A 7F04                   ADD         #4,R15
    0000110C              L1015:                            
         parse.c   843        
         parse.c   844        /* clean up */
         parse.c   845        if (CleanupNow)
    0000110C 53FE                   MOV.L       @(56,R15),R3
    0000110E 2338                   TST         R3,R3
    00001110 8902                   BT          L1016
         parse.c   846            HeapFreeMem(Tokens);
    00001112 D312                   MOV.L       L1041+56,R3; _HeapFreeMem
    00001114 430B                   JSR         @R3
    00001116 64C3                   MOV         R12,R4
    00001118              L1016:                            
         parse.c   847    }
    00001118 7F28                   ADD         #40,R15
    0000111A 4F26                   LDS.L       @R15+,PR
    0000111C 6CF6                   MOV.L       @R15+,R12
    0000111E 6DF6                   MOV.L       @R15+,R13
    00001120 000B                   RTS
    00001122 6EF6                   MOV.L       @R15+,R14
    00001124              L1041:                            
    00001124 <00000000>             .DATA.L     L579
    00001128 <00000000>             .DATA.L     _GlobalTable
    0000112C <00000000>             .DATA.L     _TableDelete
    00001130 <00000000>             .DATA.L     L678
    00001134 <00000000>             .DATA.L     _VariableFree
    00001138 <00000000>             .DATA.L     __quick_evn_mvn
    0000113C <00000000>             .DATA.L     L616
    00001140 <00000000>             .DATA.L     _LexAnalyse




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001144 <00000000>             .DATA.L     _HeapAllocMem
    00001148 <00000000>             .DATA.L     L692
    0000114C <00000000>             .DATA.L     _ProgramFail
    00001150 <00000000>             .DATA.L     __$CleanupTokenList
    00001154 <00000000>             .DATA.L     _LexInitParser
    00001158 <00000000>             .DATA.L     L694
    0000115C <00000000>             .DATA.L     _HeapFreeMem
         parse.c   848    
D   00000000              __$CleanupTokenList:             ; static: CleanupTokenList
    00000000 00000000               .DATA.L     H'00000000
C   00000000              L533:
    00000000 6E65737465             .SDATA      "nested function definitions are not allowed"
             642066756E   
             6374696F6E   
             2064656669   
             6E6974696F   
             6E73206172   
             65206E6F74   
             20616C6C6F   
             776564       
    0000002B 00                     .DATA.B     H'00
    0000002C              L534:
    0000002C 746F6F206D             .SDATA      "too many parameters"
             616E792070   
             6172616D65   
             74657273     
    0000003F 00                     .DATA.B     H'00
    00000040              L540:
    00000040 636F6D6D61             .SDATA      "comma expected"
             2065787065   
             63746564     
    0000004E 00                     .DATA.B     H'00
    0000004F 00000001               .RES.B      1
    00000050              L541:
    00000050 6261642070             .SDATA      "bad parameter"
             6172616D65   
             746572       
    0000005D 00                     .DATA.B     H'00
    0000005E 00000002               .RES.W      1
    00000060              L542:
    00000060 6D61696E               .SDATA      "main"
    00000064 00                     .DATA.B     H'00
    00000065 00000001               .RES.B      1
    00000066 00000002               .RES.W      1
    00000068              L544:
    00000068 6D61696E28             .SDATA      "main() should return an int or void"
             292073686F   
             756C642072   
             657475726E   
             20616E2069   
             6E74206F72   
             20766F6964   
    0000008B 00                     .DATA.B     H'00
    0000008C              L545:
    0000008C 6261642070             .SDATA      "bad parameters to main()"
             6172616D65   
             7465727320   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             746F206D61   
             696E2829     
    000000A4 00                     .DATA.B     H'00
    000000A5 00000001               .RES.B      1
    000000A6 00000002               .RES.W      1
    000000A8              L547:
    000000A8 6261642066             .SDATA      "bad function definition"
             756E637469   
             6F6E206465   
             66696E6974   
             696F6E       
    000000BF 00                     .DATA.B     H'00
    000000C0              L548:
    000000C0 66756E6374             .SDATA      "function definition expected"
             696F6E2064   
             6566696E69   
             74696F6E20   
             6578706563   
             746564       
    000000DC 00                     .DATA.B     H'00
    000000DD 00000001               .RES.B      1
    000000DE 00000002               .RES.W      1
    000000E0              L551:
    000000E0 2725732720             .SDATA      "'%s' is already defined"
             697320616C   
             7265616479   
             2064656669   
             6E6564       
    000000F7 00                     .DATA.B     H'00
    000000F8              L563:
    000000F8 6578707265             .SDATA      "expression expected"
             7373696F6E   
             2065787065   
             63746564     
    0000010B 00                     .DATA.B     H'00
    0000010C              L565:
    0000010C 277D272065             .SDATA      "'}' expected"
             7870656374   
             6564         
    00000118 00                     .DATA.B     H'00
    00000119 00000001               .RES.B      1
    0000011A 00000002               .RES.W      1
    0000011C              L579:
    0000011C 6964656E74             .SDATA      "identifier expected"
             6966696572   
             2065787065   
             63746564     
    0000012F 00                     .DATA.B     H'00
    00000130              L583:
    00000130 63616E2774             .SDATA      "can't define a void variable"
             2064656669   
             6E65206120   
             766F696420   
             7661726961   
             626C65       
    0000014C 00                     .DATA.B     H'00
    0000014D 00000001               .RES.B      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000014E 00000002               .RES.W      1
    00000150              L598:
    00000150 636C6F7365             .SDATA      "close bracket expected"
             2062726163   
             6B65742065   
             7870656374   
             6564         
    00000166 00                     .DATA.B     H'00
    00000167 00000001               .RES.B      1
    00000168              L614:
    00000168 2728272065             .SDATA      "'(' expected"
             7870656374   
             6564         
    00000174 00                     .DATA.B     H'00
    00000175 00000001               .RES.B      1
    00000176 00000002               .RES.W      1
    00000178              L615:
    00000178 7374617465             .SDATA      "statement expected"
             6D656E7420   
             6578706563   
             746564       
    0000018A 00                     .DATA.B     H'00
    0000018B 00000001               .RES.B      1
    0000018C              L616:
    0000018C 273B272065             .SDATA      "';' expected"
             7870656374   
             6564         
    00000198 00                     .DATA.B     H'00
    00000199 00000001               .RES.B      1
    0000019A 00000002               .RES.W      1
    0000019C              L617:
    0000019C 2729272065             .SDATA      "')' expected"
             7870656374   
             6564         
    000001A8 00                     .DATA.B     H'00
    000001A9 00000001               .RES.B      1
    000001AA 00000002               .RES.W      1
    000001AC              L625:
    000001AC 277B272065             .SDATA      "'{' expected"
             7870656374   
             6564         
    000001B8 00                     .DATA.B     H'00
    000001B9 00000001               .RES.B      1
    000001BA 00000002               .RES.W      1
    000001BC              L663:
    000001BC 277768696C             .SDATA      "'while' expected"
             6527206578   
             7065637465   
             64           
    000001CC 00                     .DATA.B     H'00
    000001CD 00000001               .RES.B      1
    000001CE 00000002               .RES.W      1
    000001D0              L664:
    000001D0 2266696C65             .SDATA      """filename.h"" expected"
             6E616D652E   
             6822206578   
             7065637465   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             64           
    000001E5 00                     .DATA.B     H'00
    000001E6 00000002               .RES.W      1
    000001E8              L669:
    000001E8 273A272065             .SDATA      "':' expected"
             7870656374   
             6564         
    000001F4 00                     .DATA.B     H'00
    000001F5 00000001               .RES.B      1
    000001F6 00000002               .RES.W      1
    000001F8              L672:
    000001F8 76616C7565             .SDATA      "value required in return"
             2072657175   
             6972656420   
             696E207265   
             7475726E     
    00000210 00                     .DATA.B     H'00
    00000211 00000001               .RES.B      1
    00000212 00000002               .RES.W      1
    00000214              L674:
    00000214 76616C7565             .SDATA      "value in return from a void function"
             20696E2072   
             657475726E   
             2066726F6D   
             206120766F   
             6964206675   
             6E6374696F   
             6E           
    00000238 00                     .DATA.B     H'00
    00000239 00000001               .RES.B      1
    0000023A 00000002               .RES.W      1
    0000023C              L678:
    0000023C 2725732720             .SDATA      "'%s' is not defined"
             6973206E6F   
             7420646566   
             696E6564     
    0000024F 00                     .DATA.B     H'00
    00000250              L692:
    00000250 6F7574206F             .SDATA      "out of memory"
             66206D656D   
             6F7279       
    0000025D 00                     .DATA.B     H'00
    0000025E 00000002               .RES.W      1
    00000260              L694:
    00000260 7061727365             .SDATA      "parse error"
             206572726F   
             72           
    0000026B 00                     .DATA.B     H'00













SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:23  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      848



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00001160 Byte(s)
CONSTANT SECTION (C):                               0000026C Byte(s)
DATA     SECTION (D):                               00000004 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000013D0 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           39
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          14
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           269






























*** COMMAND PARAMETER ***


  -subcommand=C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\hmk344.tmp 

