SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\dPicoc\cstdlib\stdio.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         stdio.c     1    /* stdio.h library for large systems - small embedded systems use clibrary.c instead */
         stdio.c     2    #include <errno.h>
         stdio.c     3    #include "../interpreter.h"
         stdio.c     4    
         stdio.c     5    static int ZeroValue = 0;
         stdio.c     6    
         stdio.c     7    int StrPutChar(char * dest,char c)
P   00000000              _StrPutChar:                     ; function: StrPutChar
                                                           ; frame size=0
         stdio.c     8    {
         stdio.c     9            *dest++ = c;
    00000000 2450                   MOV.B       R5,@R4
         stdio.c    10            *dest = '\0';
    00000002 E200                   MOV         #0,R2
    00000004 7401                   ADD         #1,R4
    00000006 2420                   MOV.B       R2,@R4
         stdio.c    11            return 1;
         stdio.c    12    }
    00000008 000B                   RTS
    0000000A E001                   MOV         #1,R0
         stdio.c    13    
         stdio.c    14    int StrPutStr(char * dest,const char * scr)
    0000000C              _StrPutStr:                      ; function: StrPutStr
                                                           ; frame size=0
         stdio.c    15    {
         stdio.c    16            int l;
         stdio.c    17            for (l=0;*scr;++l)
    0000000C E700                   MOV         #0,R7
    0000000E A004                   BRA         L711
    00000010 6673                   MOV         R7,R6
    00000012              L712:                             
    00000012 7601                   ADD         #1,R6
         stdio.c    18                    *dest++ = *scr++;
    00000014 6354                   MOV.B       @R5+,R3
    00000016 2430                   MOV.B       R3,@R4
    00000018 7401                   ADD         #1,R4
    0000001A              L711:                             
    0000001A 6250                   MOV.B       @R5,R2
    0000001C 2228                   TST         R2,R2
    0000001E 8BF8                   BF          L712
         stdio.c    19            *dest = '\0';
    00000020 2470                   MOV.B       R7,@R4
         stdio.c    20            return l;
         stdio.c    21    }
    00000022 000B                   RTS
    00000024 6063                   MOV         R6,R0
         stdio.c    22    
         stdio.c    23    void GenericPrintf(struct ParseState *Parser, struct Value *ReturnValue, struct Value **Param, int NumArgs
                         +, char * str)
    00000026              _GenericPrintf:                  ; function: GenericPrintf
                                                           ; frame size=48
    00000026 2FE6                   MOV.L       R14,@-R15
    00000028 2FD6                   MOV.L       R13,@-R15
    0000002A 2FC6                   MOV.L       R12,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000002C 2FB6                   MOV.L       R11,@-R15
    0000002E 2FA6                   MOV.L       R10,@-R15
    00000030 2F96                   MOV.L       R9,@-R15
         stdio.c    24    {
         stdio.c    25        char *FPos;
         stdio.c    26        struct Value *NextArg = Param[0];
         stdio.c    27        struct ValueType *FormatType;
         stdio.c    28        int ArgCount = 1;
    00000032 E901                   MOV         #1,R9
    00000034 2F86                   MOV.L       R8,@-R15
    00000036 4F22                   STS.L       PR,@-R15
    00000038 7FFC                   ADD         #-4,R15
    0000003A 2F72                   MOV.L       R7,@R15
    0000003C 5DF9                   MOV.L       @(36,R15),R13
    0000003E 6462                   MOV.L       @R6,R4
    00000040 6C43                   MOV         R4,R12
         stdio.c    29        int LeftJustify = FALSE;
         stdio.c    30        int ZeroPad = FALSE;
         stdio.c    31        int FieldWidth = 0;
         stdio.c    32        char *Format = Param[0]->Val->Pointer;
    00000042 5341                   MOV.L       @(4,R4),R3
    00000044 6432                   MOV.L       @R3,R4
         stdio.c    33        
         stdio.c    34            int l;
         stdio.c    35    
         stdio.c    36        for (FPos = Format; *FPos != '\0'; FPos++)
    00000046 A0F7                   BRA         L714
    00000048 6E43                   MOV         R4,R14
    0000004A              L715:                             
         stdio.c    37        {
         stdio.c    38            if (*FPos == '%')
    0000004A 60E0                   MOV.B       @R14,R0
    0000004C 8825                   CMP/EQ      #37,R0
    0000004E 8901                   BT          L741
    00000050 A0ED                   BRA         L716
    00000052 0009                   NOP
    00000054              L741:                             
         stdio.c    39            {
         stdio.c    40                FPos++;
    00000054 7E01                   ADD         #1,R14
         stdio.c    41                if (*FPos == '-')
    00000056 60E0                   MOV.B       @R14,R0
    00000058 882D                   CMP/EQ      #45,R0
    0000005A 8B00                   BF          L717
         stdio.c    42                {
         stdio.c    43                    /* a leading '-' means left justify */
         stdio.c    44                    LeftJustify = TRUE;
         stdio.c    45                    FPos++;
    0000005C 7E01                   ADD         #1,R14
    0000005E              L717:                             
         stdio.c    46                }
         stdio.c    47                
         stdio.c    48                if (*FPos == '0')
    0000005E 60E0                   MOV.B       @R14,R0
    00000060 8830                   CMP/EQ      #48,R0
    00000062 8B02                   BF          L719
         stdio.c    49                {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         stdio.c    50                    /* a leading zero means zero pad a decimal number */
         stdio.c    51                    ZeroPad = TRUE;
         stdio.c    52                    FPos++;
         stdio.c    53                }
         stdio.c    54                
         stdio.c    55                /* get any field width in the format */
         stdio.c    56                while (isdigit((int)*FPos))
    00000064 A001                   BRA         L719
    00000066 7E01                   ADD         #1,R14
    00000068              L720:                             
         stdio.c    57                    FieldWidth = FieldWidth * 10 + (*FPos++ - '0');
    00000068 7E01                   ADD         #1,R14
    0000006A              L719:                             
    0000006A E404                   MOV         #4,R4
    0000006C 60E0                   MOV.B       @R14,R0
    0000006E D549                   MOV.L       L742,R5    ; __ctype
    00000070 600C                   EXTU.B      R0,R0
    00000072 035C                   MOV.B       @(R0,R5),R3
    00000074 633C                   EXTU.B      R3,R3
    00000076 2348                   TST         R4,R3
    00000078 8BF6                   BF          L720
         stdio.c    58                
         stdio.c    59                /* now check the format type */
         stdio.c    60                switch (*FPos)
    0000007A 60E0                   MOV.B       @R14,R0
    0000007C 8873                   CMP/EQ      #115,R0
    0000007E 8911                   BT          L632
    00000080 8864                   CMP/EQ      #100,R0
    00000082 8912                   BT          L633
    00000084 8875                   CMP/EQ      #117,R0
    00000086 8910                   BT          L634
    00000088 8878                   CMP/EQ      #120,R0
    0000008A 890E                   BT          L635
    0000008C 8862                   CMP/EQ      #98,R0
    0000008E 890C                   BT          L636
    00000090 8863                   CMP/EQ      #99,R0
    00000092 890A                   BT          L637
    00000094 8866                   CMP/EQ      #102,R0
    00000096 890B                   BT          L638
    00000098 8825                   CMP/EQ      #37,R0
    0000009A 890C                   BT          L639
    0000009C 8800                   CMP/EQ      #0,R0
    0000009E 890C                   BT          L640
    000000A0 A00D                   BRA         L641
    000000A2 0009                   NOP
    000000A4              L632:                            ; case label 
         stdio.c    61                {
         stdio.c    62                    case 's': FormatType = CharPtrType; break;
    000000A4 D43C                   MOV.L       L742+4,R4  ; _CharPtrType
    000000A6 A010                   BRA         L721
    000000A8 6B42                   MOV.L       @R4,R11
    000000AA              L633:                            ; case label 
         stdio.c    63                    case 'd': case 'u': case 'x': case 'b': case 'c': FormatType = &IntType; break;
    000000AA              L634:                            ; case label 
    000000AA              L635:                            ; case label 
    000000AA              L636:                            ; case label 
    000000AA              L637:                            ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000AA DB3C                   MOV.L       L742+8,R11 ; _IntType
    000000AC A00D                   BRA         L721
    000000AE 0009                   NOP
    000000B0              L638:                            ; case label 
         stdio.c    64                    case 'f': FormatType = &FPType; break;
    000000B0 DB3B                   MOV.L       L742+12,R11; _FPType
    000000B2 A00A                   BRA         L721
    000000B4 0009                   NOP
    000000B6              L639:                            ; case label 
    000000B6 A003                   BRA         L739
         stdio.c    65                    case '%': StrPutChar(str,'%');++str;FormatType = NULL; break;
    000000B8 E525                   MOV         #37,R5
    000000BA              L640:                            ; case label 
    000000BA A004                   BRA         L610
         stdio.c    66                    case '\0': FPos--; FormatType = NULL; break;
    000000BC 7EFF                   ADD         #-1,R14
    000000BE              L641:                            ; default label 
         stdio.c    67                    default:  StrPutChar(str,*FPos);++str; FormatType = NULL; break;
    000000BE 65E0                   MOV.B       @R14,R5
    000000C0              L739:                             
    000000C0 BF9E                   BSR         _StrPutChar
    000000C2 64D3                   MOV         R13,R4
    000000C4 7D01                   ADD         #1,R13
    000000C6              L610:
    000000C6 E400                   MOV         #0,R4
    000000C8 6B43                   MOV         R4,R11
    000000CA              L721:                             
         stdio.c    68                }
         stdio.c    69                
         stdio.c    70                if (FormatType != NULL)
    000000CA 2BB8                   TST         R11,R11
    000000CC 8B01                   BF          L743
    000000CE A0B2                   BRA         L737
    000000D0 0009                   NOP
    000000D2              L743:                             
         stdio.c    71                { 
         stdio.c    72                    /* we have to format something */
         stdio.c    73                    if (ArgCount >= NumArgs)
    000000D2 63F2                   MOV.L       @R15,R3
    000000D4 3933                   CMP/GE      R3,R9
    000000D6 8928                   BT          L628
         stdio.c    74                                    {
         stdio.c    75                                            l = StrPutStr(str,"XXX");str+=l;
         stdio.c    76                                    }
         stdio.c    77                    else
         stdio.c    78                    {
         stdio.c    79                        NextArg = (struct Value *)((char *)NextArg + MEM_ALIGN(sizeof(struct Value) + TypeStac
                         +kSizeValue(NextArg)));
    000000D8 D832                   MOV.L       L742+16,R8 ; _TypeStackSizeValue
    000000DA EAFC                   MOV         #-4,R10
    000000DC 480B                   JSR         @R8
    000000DE 64C3                   MOV         R12,R4
    000000E0 7013                   ADD         #19,R0
    000000E2 20A9                   AND         R10,R0
    000000E4 3C0C                   ADD         R0,R12
         stdio.c    80                        if (NextArg->Typ != FormatType && 
         stdio.c    81                                !((FormatType == &IntType || *FPos == 'f') && IS_NUMERIC_COERCIBLE(NextArg)) &




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +&
         stdio.c    82                                !(FormatType == CharPtrType && (NextArg->Typ->Base == TypePointer || 
         stdio.c    83                                                                 (NextArg->Typ->Base == TypeArray && NextArg->
                         +Typ->FromType->Base == TypeChar) ) ) )
    000000E6 64C2                   MOV.L       @R12,R4
    000000E8 34B0                   CMP/EQ      R11,R4
    000000EA 8924                   BT          L725
    000000EC D22B                   MOV.L       L742+8,R2  ; _IntType
    000000EE 3B20                   CMP/EQ      R2,R11
    000000F0 8902                   BT          L727
    000000F2 60E0                   MOV.B       @R14,R0
    000000F4 8866                   CMP/EQ      #102,R0
    000000F6 8B0A                   BF          L726
    000000F8              L727:                             
    000000F8 6342                   MOV.L       @R4,R3
    000000FA E201                   MOV         #1,R2
    000000FC 3323                   CMP/GE      R2,R3
    000000FE 8B03                   BF          L728
    00000100 6142                   MOV.L       @R4,R1
    00000102 E007                   MOV         #7,R0
    00000104 3107                   CMP/GT      R0,R1
    00000106 8B16                   BF          L725
    00000108              L728:                             
    00000108 6042                   MOV.L       @R4,R0
    0000010A 8808                   CMP/EQ      #8,R0
    0000010C 8913                   BT          L725
    0000010E              L726:                             
    0000010E D222                   MOV.L       L742+4,R2  ; _CharPtrType
    00000110 6322                   MOV.L       @R2,R3
    00000112 3B30                   CMP/EQ      R3,R11
    00000114 8B09                   BF          L628
    00000116 6042                   MOV.L       @R4,R0
    00000118 880B                   CMP/EQ      #11,R0
    0000011A 890C                   BT          L725
    0000011C 6042                   MOV.L       @R4,R0
    0000011E 880C                   CMP/EQ      #12,R0
    00000120 8B03                   BF          L628
    00000122 5045                   MOV.L       @(20,R4),R0
    00000124 6002                   MOV.L       @R0,R0
    00000126 8803                   CMP/EQ      #3,R0
    00000128 8905                   BT          L725
    0000012A              L628:
         stdio.c    84                                            {
         stdio.c    85                                                    l = StrPutStr(str,"XXX");str+=l;
    0000012A DB1F                   MOV.L       L742+20,R11; L526
    0000012C              L740:                             
    0000012C 65B3                   MOV         R11,R5
    0000012E BF6D                   BSR         _StrPutStr
    00000130 64D3                   MOV         R13,R4
    00000132 A079                   BRA         L627
    00000134 6403                   MOV         R0,R4
    00000136              L725:                             
         stdio.c    86                                            }
         stdio.c    87                        else
         stdio.c    88                        {
         stdio.c    89                            switch (*FPos)
    00000136 DA1D                   MOV.L       L742+24,R10; _ExpressionCoerceUnsignedInteger




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000138 DB1D                   MOV.L       L742+28,R11; _sprintf
    0000013A 60E0                   MOV.B       @R14,R0
    0000013C 8873                   CMP/EQ      #115,R0
    0000013E 890D                   BT          L643
    00000140 8864                   CMP/EQ      #100,R0
    00000142 891C                   BT          L645
    00000144 8875                   CMP/EQ      #117,R0
    00000146 893B                   BT          L647
    00000148 8878                   CMP/EQ      #120,R0
    0000014A 8943                   BT          L649
    0000014C 8862                   CMP/EQ      #98,R0
    0000014E 894B                   BT          L651
    00000150 8863                   CMP/EQ      #99,R0
    00000152 8953                   BT          L653
    00000154 8866                   CMP/EQ      #102,R0
    00000156 895B                   BT          L655
    00000158 A067                   BRA         L724
    0000015A 0009                   NOP
    0000015C              L643:                            ; case label 
         stdio.c    90                            {
         stdio.c    91                                case 's':
         stdio.c    92                                {
         stdio.c    93                                    char *Str;
         stdio.c    94                                    
         stdio.c    95                                    if (NextArg->Typ->Base == TypePointer)
    0000015C 60C2                   MOV.L       @R12,R0
    0000015E 6002                   MOV.L       @R0,R0
    00000160 880B                   CMP/EQ      #11,R0
    00000162 8B02                   BF          L733
         stdio.c    96                                        Str = NextArg->Val->Pointer;
    00000164 55C1                   MOV.L       @(4,R12),R5
    00000166 A001                   BRA         L734
    00000168 6552                   MOV.L       @R5,R5
    0000016A              L733:                             
         stdio.c    97                                    else
         stdio.c    98                                        Str = &NextArg->Val->ArrayMem[0];
    0000016A 55C1                   MOV.L       @(4,R12),R5
    0000016C              L734:                             
         stdio.c    99                                        
         stdio.c   100                                    if (Str == NULL)
    0000016C 2558                   TST         R5,R5
    0000016E 8B02                   BF          L735
         stdio.c   101                                                                    {
         stdio.c   102                                                                            l = StrPutStr(str,"NULL");str+=l;
    00000170 DB10                   MOV.L       L742+32,R11; L534
    00000172 AFDB                   BRA         L740
    00000174 0009                   NOP
    00000176              L735:                             
         stdio.c   103                                                                    }
         stdio.c   104                                    else
         stdio.c   105                                                                    {
         stdio.c   106                                                                            l = StrPutStr(str,Str);str+=l;
    00000176 BF49                   BSR         _StrPutStr
    00000178 64D3                   MOV         R13,R4
    0000017A A055                   BRA         L627
    0000017C 6403                   MOV         R0,R4
    0000017E              L645:                            ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         stdio.c   107                                                                    }
         stdio.c   108                                    break;
         stdio.c   109                                }
         stdio.c   110                                case 'd': l = sprintf(str,"%d",ExpressionCoerceInteger(NextArg));str+=l; break
                         +;
    0000017E D80E                   MOV.L       L742+36,R8 ; _ExpressionCoerceInteger
    00000180 DA0E                   MOV.L       L742+40,R10; L536
    00000182 480B                   JSR         @R8
    00000184 64C3                   MOV         R12,R4
    00000186 2F06                   MOV.L       R0,@-R15
    00000188 2FA6                   MOV.L       R10,@-R15
    0000018A 4B0B                   JSR         @R11
    0000018C 64D3                   MOV         R13,R4
    0000018E 7F08                   ADD         #8,R15
    00000190 A04A                   BRA         L627
    00000192 6403                   MOV         R0,R4
    00000194              L742:                             
    00000194 <00000000>             .DATA.L     __ctype
    00000198 <00000000>             .DATA.L     _CharPtrType
    0000019C <00000000>             .DATA.L     _IntType
    000001A0 <00000000>             .DATA.L     _FPType
    000001A4 <00000000>             .DATA.L     _TypeStackSizeValue
    000001A8 <00000000>             .DATA.L     L526
    000001AC <00000000>             .DATA.L     _ExpressionCoerceUnsignedInteger
    000001B0 <00000000>             .DATA.L     _sprintf
    000001B4 <00000000>             .DATA.L     L534
    000001B8 <00000000>             .DATA.L     _ExpressionCoerceInteger
    000001BC <00000000>             .DATA.L     L536
    000001C0              L647:                            ; case label 
         stdio.c   111                                case 'u': l = sprintf(str,"%u",ExpressionCoerceUnsignedInteger(NextArg));str+=
                         +l; break;
    000001C0 D84D                   MOV.L       L744+4,R8  ; L537
    000001C2 4A0B                   JSR         @R10
    000001C4 64C3                   MOV         R12,R4
    000001C6 2F06                   MOV.L       R0,@-R15
    000001C8 2F86                   MOV.L       R8,@-R15
    000001CA 4B0B                   JSR         @R11
    000001CC 64D3                   MOV         R13,R4
    000001CE 7F08                   ADD         #8,R15
    000001D0 A02A                   BRA         L627
    000001D2 6403                   MOV         R0,R4
    000001D4              L649:                            ; case label 
         stdio.c   112                                case 'x': l = sprintf(str,"%x",ExpressionCoerceUnsignedInteger(NextArg));str+=
                         +l; break;
    000001D4 D849                   MOV.L       L744+8,R8  ; L538
    000001D6 4A0B                   JSR         @R10
    000001D8 64C3                   MOV         R12,R4
    000001DA 2F06                   MOV.L       R0,@-R15
    000001DC 2F86                   MOV.L       R8,@-R15
    000001DE 4B0B                   JSR         @R11
    000001E0 64D3                   MOV         R13,R4
    000001E2 7F08                   ADD         #8,R15
    000001E4 A020                   BRA         L627
    000001E6 6403                   MOV         R0,R4
    000001E8              L651:                            ; case label 
         stdio.c   113                                case 'b': l = sprintf(str,"%b",ExpressionCoerceUnsignedInteger(NextArg));str+=
                         +l; break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001E8 D845                   MOV.L       L744+12,R8 ; L539
    000001EA 4A0B                   JSR         @R10
    000001EC 64C3                   MOV         R12,R4
    000001EE 2F06                   MOV.L       R0,@-R15
    000001F0 2F86                   MOV.L       R8,@-R15
    000001F2 4B0B                   JSR         @R11
    000001F4 64D3                   MOV         R13,R4
    000001F6 7F08                   ADD         #8,R15
    000001F8 A016                   BRA         L627
    000001FA 6403                   MOV         R0,R4
    000001FC              L653:                            ; case label 
         stdio.c   114                                case 'c': l = sprintf(str,"%c",ExpressionCoerceUnsignedInteger(NextArg));str+=
                         +l; break;
    000001FC D841                   MOV.L       L744+16,R8 ; L540
    000001FE 4A0B                   JSR         @R10
    00000200 64C3                   MOV         R12,R4
    00000202 2F06                   MOV.L       R0,@-R15
    00000204 2F86                   MOV.L       R8,@-R15
    00000206 4B0B                   JSR         @R11
    00000208 64D3                   MOV         R13,R4
    0000020A 7F08                   ADD         #8,R15
    0000020C A00C                   BRA         L627
    0000020E 6403                   MOV         R0,R4
    00000210              L655:                            ; case label 
         stdio.c   115                                case 'f': l = sprintf(str,"%f",ExpressionCoerceFP(NextArg));str+=l; break;
    00000210 D83D                   MOV.L       L744+20,R8 ; L541
    00000212 7FF8                   ADD         #-8,R15
    00000214 DA3D                   MOV.L       L744+24,R10; _ExpressionCoerceFP
    00000216 64C3                   MOV         R12,R4
    00000218 4A0B                   JSR         @R10
    0000021A 2FF6                   MOV.L       R15,@-R15
    0000021C 7F04                   ADD         #4,R15
    0000021E 2F86                   MOV.L       R8,@-R15
    00000220 4B0B                   JSR         @R11
    00000222 64D3                   MOV         R13,R4
    00000224 7F0C                   ADD         #12,R15
    00000226 6403                   MOV         R0,R4
    00000228              L627:
    00000228 3D4C                   ADD         R4,R13
    0000022A              L724:                             
         stdio.c   116                            }
         stdio.c   117                        }
         stdio.c   118                    }
         stdio.c   119                    
         stdio.c   120                    ArgCount++;
    0000022A A004                   BRA         L737
    0000022C 7901                   ADD         #1,R9
    0000022E              L716:                             
         stdio.c   121                }
         stdio.c   122            }
         stdio.c   123            else
         stdio.c   124                    {
         stdio.c   125                StrPutChar(str,*FPos);++str;
    0000022E 65E0                   MOV.B       @R14,R5
    00000230 BEE6                   BSR         _StrPutChar
    00000232 64D3                   MOV         R13,R4
    00000234 7D01                   ADD         #1,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000236              L737:                             
    00000236 7E01                   ADD         #1,R14
    00000238              L714:                             
    00000238 62E0                   MOV.B       @R14,R2
    0000023A 2228                   TST         R2,R2
    0000023C 8901                   BT          L745
    0000023E AF04                   BRA         L715
    00000240 0009                   NOP
    00000242              L745:                             
         stdio.c   126                    }
         stdio.c   127        }
         stdio.c   128    }
    00000242 7F04                   ADD         #4,R15
    00000244 4F26                   LDS.L       @R15+,PR
    00000246 68F6                   MOV.L       @R15+,R8
    00000248 69F6                   MOV.L       @R15+,R9
    0000024A 6AF6                   MOV.L       @R15+,R10
    0000024C 6BF6                   MOV.L       @R15+,R11
    0000024E 6CF6                   MOV.L       @R15+,R12
    00000250 6DF6                   MOV.L       @R15+,R13
    00000252 000B                   RTS
    00000254 6EF6                   MOV.L       @R15+,R14
         stdio.c   129    
         stdio.c   130    void StdioSprintf(struct ParseState *Parser, struct Value *ReturnValue, struct Value **Param, int NumArgs)
    00000256              _StdioSprintf:                   ; function: StdioSprintf
                                                           ; frame size=28
    00000256 2FE6                   MOV.L       R14,@-R15
    00000258 2F86                   MOV.L       R8,@-R15
    0000025A 4F22                   STS.L       PR,@-R15
    0000025C 7FF4                   ADD         #-12,R15
    0000025E 2F52                   MOV.L       R5,@R15
    00000260 1F61                   MOV.L       R6,@(4,R15)
    00000262 1F72                   MOV.L       R7,@(8,R15)
         stdio.c   131    {
         stdio.c   132        char * buf;
         stdio.c   133    
         stdio.c   134        buf = Param[0]->Val->Pointer;
    00000264 5EF1                   MOV.L       @(4,R15),R14
    00000266 6EE2                   MOV.L       @R14,R14
    00000268 5EE1                   MOV.L       @(4,R14),R14
    0000026A 6EE2                   MOV.L       @R14,R14
         stdio.c   135    
         stdio.c   136        GenericPrintf(Parser, ReturnValue, Param+1, NumArgs-1,buf);
    0000026C 2FE6                   MOV.L       R14,@-R15
    0000026E 57F3                   MOV.L       @(12,R15),R7
    00000270 56F2                   MOV.L       @(8,R15),R6
    00000272 77FF                   ADD         #-1,R7
    00000274 7604                   ADD         #4,R6
    00000276 BED6                   BSR         _GenericPrintf
    00000278 55F1                   MOV.L       @(4,R15),R5
         stdio.c   137    
         stdio.c   138        ReturnValue->Val->Integer = strlen(buf);
    0000027A 52F1                   MOV.L       @(4,R15),R2
    0000027C 5821                   MOV.L       @(4,R2),R8
    0000027E D224                   MOV.L       L744+28,R2 ; _strlen
    00000280 420B                   JSR         @R2
    00000282 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000284 2802                   MOV.L       R0,@R8
         stdio.c   139    }
    00000286 7F10                   ADD         #16,R15
    00000288 4F26                   LDS.L       @R15+,PR
    0000028A 68F6                   MOV.L       @R15+,R8
    0000028C 000B                   RTS
    0000028E 6EF6                   MOV.L       @R15+,R14
         stdio.c   140    
         stdio.c   141    void StdioPuts(struct ParseState *Parser, struct Value *ReturnValue, struct Value **Param, int NumArgs)
    00000290              _StdioPuts:                      ; function: StdioPuts
                                                           ; frame size=12
    00000290 4F22                   STS.L       PR,@-R15
         stdio.c   142    {
         stdio.c   143    
         stdio.c   144        dConsolePut((const char*)Param[0]->Val->Pointer);
    00000292 6463                   MOV         R6,R4
    00000294 D31F                   MOV.L       L744+32,R3 ; _dConsolePut
    00000296 7FF8                   ADD         #-8,R15
    00000298 2F52                   MOV.L       R5,@R15
    0000029A 1F61                   MOV.L       R6,@(4,R15)
    0000029C 6442                   MOV.L       @R4,R4
    0000029E 5441                   MOV.L       @(4,R4),R4
    000002A0 430B                   JSR         @R3
    000002A2 6442                   MOV.L       @R4,R4
         stdio.c   145            dConsolePutChar ('\n');
    000002A4 D21C                   MOV.L       L744+36,R2 ; _dConsolePutChar
    000002A6 420B                   JSR         @R2
    000002A8 E40A                   MOV         #10,R4
         stdio.c   146    
         stdio.c   147        ReturnValue->Val->Integer = 0;
    000002AA E100                   MOV         #0,R1
    000002AC 63F2                   MOV.L       @R15,R3
    000002AE 5231                   MOV.L       @(4,R3),R2
    000002B0 2212                   MOV.L       R1,@R2
         stdio.c   148    }
    000002B2 7F08                   ADD         #8,R15
    000002B4 4F26                   LDS.L       @R15+,PR
    000002B6 000B                   RTS
    000002B8 0009                   NOP
         stdio.c   149    
         stdio.c   150    void Bdisp_PutDisp_DD();
         stdio.c   151    
         stdio.c   152    void StdioPrintf(struct ParseState *Parser, struct Value *ReturnValue, struct Value **Param, int NumArgs)
    000002BA              _StdioPrintf:                    ; function: StdioPrintf
                                                           ; frame size=276
    000002BA 2FE6                   MOV.L       R14,@-R15
    000002BC 2F86                   MOV.L       R8,@-R15
    000002BE 4F22                   STS.L       PR,@-R15
    000002C0 9018                   MOV.W       L744,R0    ; H'FEFC
    000002C2 3F0C                   ADD         R0,R15
    000002C4 2F52                   MOV.L       R5,@R15
         stdio.c   153    {
         stdio.c   154        char buf[256];
         stdio.c   155    
         stdio.c   156        GenericPrintf(Parser, ReturnValue, Param, NumArgs,buf);
    000002C6 6EF3                   MOV         R15,R14
    000002C8 7E04                   ADD         #4,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002CA 2FE6                   MOV.L       R14,@-R15
    000002CC BEAB                   BSR         _GenericPrintf
    000002CE 55F1                   MOV.L       @(4,R15),R5
         stdio.c   157    
         stdio.c   158            dConsolePut (buf);//Bdisp_PutDisp_DD();
    000002D0 D210                   MOV.L       L744+32,R2 ; _dConsolePut
    000002D2 420B                   JSR         @R2
    000002D4 64E3                   MOV         R14,R4
         stdio.c   159            
         stdio.c   160        ReturnValue->Val->Integer = strlen(buf);
    000002D6 53F1                   MOV.L       @(4,R15),R3
    000002D8 5831                   MOV.L       @(4,R3),R8
    000002DA D30D                   MOV.L       L744+28,R3 ; _strlen
    000002DC 430B                   JSR         @R3
    000002DE 64E3                   MOV         R14,R4
    000002E0 2802                   MOV.L       R0,@R8
         stdio.c   161    }
    000002E2 9108                   MOV.W       L744+2,R1  ; H'0108
    000002E4 3F1C                   ADD         R1,R15
    000002E6 4F26                   LDS.L       @R15+,PR
    000002E8 68F6                   MOV.L       @R15+,R8
    000002EA 000B                   RTS
    000002EC 6EF6                   MOV.L       @R15+,R14
         stdio.c   162    void StdioCls(struct ParseState *Parser, struct Value *ReturnValue, struct Value **Param, int NumArgs)
    000002EE              _StdioCls:                       ; function: StdioCls
                                                           ; frame size=0
         stdio.c   163    {
         stdio.c   164            dConsoleCls();
    000002EE D30B                   MOV.L       L744+40,R3 ; _dConsoleCls
    000002F0 432B                   JMP         @R3
    000002F2 0009                   NOP
    000002F4              L744:                             
    000002F4 FEFC                   .DATA.W     H'FEFC
    000002F6 0108                   .DATA.W     H'0108
    000002F8 <00000000>             .DATA.L     L537
    000002FC <00000000>             .DATA.L     L538
    00000300 <00000000>             .DATA.L     L539
    00000304 <00000000>             .DATA.L     L540
    00000308 <00000000>             .DATA.L     L541
    0000030C <00000000>             .DATA.L     _ExpressionCoerceFP
    00000310 <00000000>             .DATA.L     _strlen
    00000314 <00000000>             .DATA.L     _dConsolePut
    00000318 <00000000>             .DATA.L     _dConsolePutChar
    0000031C <00000000>             .DATA.L     _dConsoleCls
         stdio.c   165    }
         stdio.c   166    void StdioGets(struct ParseState *Parser, struct Value *ReturnValue, struct Value **Param, int NumArgs)
    00000320              _StdioGets:                      ; function: StdioGets
                                                           ; frame size=16
    00000320 2FE6                   MOV.L       R14,@-R15
         stdio.c   167    {
         stdio.c   168            char *buf;
         stdio.c   169    
         stdio.c   170            buf = Param[0]->Val->Pointer;
         stdio.c   171    
         stdio.c   172            dGetLine(buf,Param[1]->Val->Integer);
    00000322 6363                   MOV         R6,R3
    00000324 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000326 6E63                   MOV         R6,R14
    00000328 7FF8                   ADD         #-8,R15
    0000032A 1F51                   MOV.L       R5,@(4,R15)
    0000032C 2F62                   MOV.L       R6,@R15
    0000032E 6EE2                   MOV.L       @R14,R14
    00000330 5531                   MOV.L       @(4,R3),R5
    00000332 5EE1                   MOV.L       @(4,R14),R14
    00000334 5551                   MOV.L       @(4,R5),R5
    00000336 6EE2                   MOV.L       @R14,R14
    00000338 6552                   MOV.L       @R5,R5
    0000033A D313                   MOV.L       L746+2,R3  ; _dGetLine
    0000033C 430B                   JSR         @R3
    0000033E 64E3                   MOV         R14,R4
         stdio.c   173            dConsolePut (buf);
    00000340 D212                   MOV.L       L746+6,R2  ; _dConsolePut
    00000342 420B                   JSR         @R2
    00000344 64E3                   MOV         R14,R4
         stdio.c   174            dConsolePutChar('\n');
    00000346 D312                   MOV.L       L746+10,R3 ; _dConsolePutChar
    00000348 430B                   JSR         @R3
    0000034A E40A                   MOV         #10,R4
         stdio.c   175    
         stdio.c   176            ReturnValue->Val->Pointer = buf;
    0000034C 52F1                   MOV.L       @(4,R15),R2
    0000034E 5321                   MOV.L       @(4,R2),R3
    00000350 23E2                   MOV.L       R14,@R3
         stdio.c   177    }
    00000352 7F08                   ADD         #8,R15
    00000354 4F26                   LDS.L       @R15+,PR
    00000356 000B                   RTS
    00000358 6EF6                   MOV.L       @R15+,R14
         stdio.c   178    
         stdio.c   179    /* all stdio functions */
         stdio.c   180    struct LibraryFunction StdioFunctions[] =
         stdio.c   181    {
         stdio.c   182        { StdioSprintf              ,"int sprintf(char *, char *,...);" },
         stdio.c   183            { StdioPuts                     ,"int puts(char *);"},
         stdio.c   184            { StdioGets                     ,"char * gets(char *,int);"},
         stdio.c   185            { StdioCls                      ,"void cls();"},
         stdio.c   186            { StdioPrintf           ,"int printf(char *,...);"},
         stdio.c   187        { NULL,         NULL }
         stdio.c   188    };
         stdio.c   189    
         stdio.c   190    /* creates various system-dependent definitions */
         stdio.c   191    void StdioSetupFunc(void)
    0000035A              _StdioSetupFunc:                 ; function: StdioSetupFunc
                                                           ; frame size=8
    0000035A 4F22                   STS.L       PR,@-R15
         stdio.c   192    {
         stdio.c   193    
         stdio.c   194        /* define NULL, TRUE and FALSE */
         stdio.c   195        if (!VariableDefined(TableStrRegister("NULL")))
    0000035C D40D                   MOV.L       L746+14,R4 ; L534
    0000035E D30E                   MOV.L       L746+18,R3 ; _TableStrRegister
    00000360 430B                   JSR         @R3
    00000362 0009                   NOP
    00000364 D20D                   MOV.L       L746+22,R2 ; _VariableDefined




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000366 420B                   JSR         @R2
    00000368 6403                   MOV         R0,R4
    0000036A 2008                   TST         R0,R0
    0000036C 8B08                   BF          L738
         stdio.c   196            VariableDefinePlatformVar(NULL, "NULL", &IntType, (union AnyValue *)&ZeroValue, FALSE);
    0000036E E200                   MOV         #0,R2
    00000370 D70B                   MOV.L       L746+26,R7 ; __$ZeroValue
    00000372 2F26                   MOV.L       R2,@-R15
    00000374 D60B                   MOV.L       L746+30,R6 ; _IntType
    00000376 D507                   MOV.L       L746+14,R5 ; L534
    00000378 D30B                   MOV.L       L746+34,R3 ; _VariableDefinePlatformVar
    0000037A 430B                   JSR         @R3
    0000037C 6423                   MOV         R2,R4
    0000037E 7F04                   ADD         #4,R15
    00000380              L738:                             
         stdio.c   197    }
    00000380 4F26                   LDS.L       @R15+,PR
    00000382 000B                   RTS
    00000384 0009                   NOP
    00000386              L746:                             
    00000386 0000                   .DATA.W     0
    00000388 <00000000>             .DATA.L     _dGetLine
    0000038C <00000000>             .DATA.L     _dConsolePut
    00000390 <00000000>             .DATA.L     _dConsolePutChar
    00000394 <00000000>             .DATA.L     L534
    00000398 <00000000>             .DATA.L     _TableStrRegister
    0000039C <00000000>             .DATA.L     _VariableDefined
    000003A0 <00000000>             .DATA.L     __$ZeroValue
    000003A4 <00000000>             .DATA.L     _IntType
    000003A8 <00000000>             .DATA.L     _VariableDefinePlatformVar
D   00000000              __$ZeroValue:                    ; static: ZeroValue
    00000000 00000000               .DATA.L     H'00000000
    00000004              _StdioFunctions:                 ; static: StdioFunctions
    00000004 <00000000>             .DATA.L     _StdioSprintf,L577,_StdioPuts,L578,_StdioGets,L579,_StdioCls,L580,_StdioPrintf,L581
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
    0000002C 0000000000             .DATA.L     H'00000000,H'00000000
             000000       
C   00000000              L526:
    00000000 585858                 .SDATA      "XXX"
    00000003 00                     .DATA.B     H'00
    00000004              L534:
    00000004 4E554C4C               .SDATA      "NULL"
    00000008 00                     .DATA.B     H'00
    00000009 00000001               .RES.B      1
    0000000A 00000002               .RES.W      1
    0000000C              L536:
    0000000C 2564                   .SDATA      "%d"
    0000000E 00                     .DATA.B     H'00
    0000000F 00000001               .RES.B      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000010              L537:
    00000010 2575                   .SDATA      "%u"
    00000012 00                     .DATA.B     H'00
    00000013 00000001               .RES.B      1
    00000014              L538:
    00000014 2578                   .SDATA      "%x"
    00000016 00                     .DATA.B     H'00
    00000017 00000001               .RES.B      1
    00000018              L539:
    00000018 2562                   .SDATA      "%b"
    0000001A 00                     .DATA.B     H'00
    0000001B 00000001               .RES.B      1
    0000001C              L540:
    0000001C 2563                   .SDATA      "%c"
    0000001E 00                     .DATA.B     H'00
    0000001F 00000001               .RES.B      1
    00000020              L541:
    00000020 2566                   .SDATA      "%f"
    00000022 00                     .DATA.B     H'00
    00000023 00000001               .RES.B      1
    00000024              L577:
    00000024 696E742073             .SDATA      "int sprintf(char *, char *,...);"
             7072696E74   
             6628636861   
             72202A2C20   
             6368617220   
             2A2C2E2E2E   
             293B         
    00000044 00                     .DATA.B     H'00
    00000045 00000001               .RES.B      1
    00000046 00000002               .RES.W      1
    00000048              L578:
    00000048 696E742070             .SDATA      "int puts(char *);"
             7574732863   
             686172202A   
             293B         
    00000059 00                     .DATA.B     H'00
    0000005A 00000002               .RES.W      1
    0000005C              L579:
    0000005C 6368617220             .SDATA      "char * gets(char *,int);"
             2A20676574   
             7328636861   
             72202A2C69   
             6E74293B     
    00000074 00                     .DATA.B     H'00
    00000075 00000001               .RES.B      1
    00000076 00000002               .RES.W      1
    00000078              L580:
    00000078 766F696420             .SDATA      "void cls();"
             636C732829   
             3B           
    00000083 00                     .DATA.B     H'00
    00000084              L581:
    00000084 696E742070             .SDATA      "int printf(char *,...);"
             72696E7466   
             2863686172   
             202A2C2E2E   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             2E293B       
    0000009B 00                     .DATA.B     H'00



























































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 10-Aug-2013 20:04:41  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      197



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000003AC Byte(s)
CONSTANT SECTION (C):                               0000009C Byte(s)
DATA     SECTION (D):                               00000034 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 0000047C Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           17
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          10
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            87






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk94F1.tmp 

