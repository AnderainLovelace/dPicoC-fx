SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\dPicoc\lex.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c     1    #include "interpreter.h"
           lex.c     2    
           lex.c     3    #define isCidstart(c) (isalpha(c) || (c)=='_' || (c)=='#')
           lex.c     4    #define isCident(c) (isalnum(c) || (c)=='_')
           lex.c     5    
           lex.c     6    #define IS_HEX_ALPHA_DIGIT(c) (((c) >= 'a' && (c) <= 'f') || ((c) >= 'A' && (c) <= 'F'))
           lex.c     7    #define IS_BASE_DIGIT(c,b) (((c) >= '0' && (c) < '0' + (((b)<10)?(b):10)) || (((b) > 10) ? IS_HEX_ALPHA_DI
                         +GIT(c) : FALSE))
           lex.c     8    #define GET_BASE_DIGIT(c) (((c) <= '9') ? ((c) - '0') : (((c) <= 'F') ? ((c) - 'A' + 10) : ((c) - 'a' + 10
                         +)))
           lex.c     9    
           lex.c    10    #define NEXTIS(c,x,y) { if (NextChar == (c)) { LEXER_INC(Lexer); GotToken = (x); } else GotToken = (y); }
           lex.c    11    #define NEXTIS3(c,x,d,y,z) { if (NextChar == (c)) { LEXER_INC(Lexer); GotToken = (x); } else NEXTIS(d,y,z)
                         + }
           lex.c    12    #define NEXTIS4(c,x,d,y,e,z,a) { if (NextChar == (c)) { LEXER_INC(Lexer); GotToken = (x); } else NEXTIS3(d
                         +,y,e,z,a) }
           lex.c    13    #define NEXTIS3PLUS(c,x,d,y,e,z,a) { if (NextChar == (c)) { LEXER_INC(Lexer); GotToken = (x); } else if (N
                         +extChar == (d)) { if (Lexer->Pos[1] == (e)) { LEXER_INCN(Lexer, 2); GotToken = (z); } else { LEXER_INC(Lex
                         +er); GotToken = (y); } } else GotToken = (a); }
           lex.c    14    #define NEXTISEXACTLY3(c,d,y,z) { if (NextChar == (c) && Lexer->Pos[1] == (d)) { LEXER_INCN(Lexer, 2); Got
                         +Token = (y); } else GotToken = (z); }
           lex.c    15    
           lex.c    16    #define LEXER_INC(l) ( (l)->Pos++, (l)->CharacterPos++ )
           lex.c    17    #define LEXER_INCN(l, n) ( (l)->Pos+=(n), (l)->CharacterPos+=(n) )
           lex.c    18    #define TOKEN_DATA_OFFSET 2
           lex.c    19    
           lex.c    20    #define MAX_CHAR_VALUE 255      /* maximum value which can be represented by a "char" data type */
           lex.c    21    
           lex.c    22    static union AnyValue LexAnyValue;
           lex.c    23    static struct Value LexValue = { TypeVoid, &LexAnyValue, FALSE, FALSE };
           lex.c    24    
           lex.c    25    struct ReservedWord
           lex.c    26    {
           lex.c    27        const char *Word;
           lex.c    28        enum LexToken Token;
           lex.c    29        const char *SharedWord; /* word stored in shared string space */
           lex.c    30    };
           lex.c    31    
           lex.c    32    static struct ReservedWord ReservedWords[] =
           lex.c    33    {
           lex.c    34        { "#define", TokenHashDefine, NULL },
           lex.c    35        { "#else", TokenHashElse, NULL },
           lex.c    36        { "#endif", TokenHashEndif, NULL },
           lex.c    37        { "#if", TokenHashIf, NULL },
           lex.c    38        { "#ifdef", TokenHashIfdef, NULL },
           lex.c    39        { "#ifndef", TokenHashIfndef, NULL },
           lex.c    40        { "#include", TokenHashInclude, NULL },
           lex.c    41        { "auto", TokenAutoType, NULL },
           lex.c    42        { "break", TokenBreak, NULL },
           lex.c    43        { "case", TokenCase, NULL },
           lex.c    44        { "char", TokenCharType, NULL },
           lex.c    45        { "continue", TokenContinue, NULL },
           lex.c    46        { "default", TokenDefault, NULL },
           lex.c    47        { "delete", TokenDelete, NULL },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c    48        { "do", TokenDo, NULL },
           lex.c    49    #ifndef NO_FP
           lex.c    50        { "double", TokenDoubleType, NULL },
           lex.c    51    #endif
           lex.c    52        { "else", TokenElse, NULL },
           lex.c    53        { "enum", TokenEnumType, NULL },
           lex.c    54        { "extern", TokenExternType, NULL },
           lex.c    55    #ifndef NO_FP
           lex.c    56        { "float", TokenFloatType, NULL },
           lex.c    57    #endif
           lex.c    58        { "for", TokenFor, NULL },
           lex.c    59        { "goto", TokenGoto, NULL },
           lex.c    60        { "if", TokenIf, NULL },
           lex.c    61        { "int", TokenIntType, NULL },
           lex.c    62        { "long", TokenLongType, NULL },
           lex.c    63        { "new", TokenNew, NULL },
           lex.c    64        { "register", TokenRegisterType, NULL },
           lex.c    65        { "return", TokenReturn, NULL },
           lex.c    66        { "short", TokenShortType, NULL },
           lex.c    67        { "signed", TokenSignedType, NULL },
           lex.c    68        { "sizeof", TokenSizeof, NULL },
           lex.c    69        { "static", TokenStaticType, NULL },
           lex.c    70        { "struct", TokenStructType, NULL },
           lex.c    71        { "switch", TokenSwitch, NULL },
           lex.c    72        { "typedef", TokenTypedef, NULL },
           lex.c    73        { "union", TokenUnionType, NULL },
           lex.c    74        { "unsigned", TokenUnsignedType, NULL },
           lex.c    75        { "void", TokenVoidType, NULL },
           lex.c    76        { "while", TokenWhile, NULL }
           lex.c    77    };
           lex.c    78    
           lex.c    79    /* linked list of tokens used in interactive mode */
           lex.c    80    struct TokenLine
           lex.c    81    {
           lex.c    82        struct TokenLine *Next;
           lex.c    83        unsigned char *Tokens;
           lex.c    84        int NumBytes;
           lex.c    85    };
           lex.c    86    
           lex.c    87    static struct TokenLine *InteractiveHead = NULL;
           lex.c    88    static struct TokenLine *InteractiveTail = NULL;
           lex.c    89    static struct TokenLine *InteractiveCurrentLine = NULL;
           lex.c    90    static int LexUseStatementPrompt = FALSE;
           lex.c    91    
           lex.c    92    
           lex.c    93    /* initialise the lexer */
           lex.c    94    void LexInit()
P   00000000              _LexInit:                        ; function: LexInit
                                                           ; frame size=20
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
           lex.c    95    {
           lex.c    96        int Count;
           lex.c    97        
           lex.c    98        for (Count = 0; Count < sizeof(ReservedWords) / sizeof(struct ReservedWord); Count++)
    00000006 ED00                   MOV         #0,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000008 DE43                   MOV.L       L1302+6,R14; __$ReservedWords
    0000000A EC27                   MOV         #39,R12
    0000000C 2FB6                   MOV.L       R11,@-R15
    0000000E 4F22                   STS.L       PR,@-R15
    00000010 DB40                   MOV.L       L1302+2,R11; _TableStrRegister
    00000012              L962:                             
           lex.c    99            ReservedWords[Count].SharedWord = TableStrRegister(ReservedWords[Count].Word);
    00000012 4B0B                   JSR         @R11
    00000014 64E2                   MOV.L       @R14,R4
    00000016 7D01                   ADD         #1,R13
    00000018 1E02                   MOV.L       R0,@(8,R14)
    0000001A 3DC2                   CMP/HS      R12,R13
    0000001C 8FF9                   BF/S        L962
    0000001E 7E0C                   ADD         #12,R14
           lex.c   100    }
    00000020 4F26                   LDS.L       @R15+,PR
    00000022 6BF6                   MOV.L       @R15+,R11
    00000024 6CF6                   MOV.L       @R15+,R12
    00000026 6DF6                   MOV.L       @R15+,R13
    00000028 000B                   RTS
    0000002A 6EF6                   MOV.L       @R15+,R14
           lex.c   101    
           lex.c   102    /* deallocate */
           lex.c   103    void LexCleanup()
    0000002C              _LexCleanup:                     ; function: LexCleanup
                                                           ; frame size=0
           lex.c   104    {
           lex.c   105        LexInteractiveClear(NULL);
    0000002C D33B                   MOV.L       L1302+10,R3; _LexInteractiveClear
    0000002E 432B                   JMP         @R3
    00000030 E400                   MOV         #0,R4
           lex.c   106    }
           lex.c   107    
           lex.c   108    /* check if a word is a reserved word - used while scanning */
           lex.c   109    enum LexToken LexCheckReservedWord(const char *Word)
    00000032              _LexCheckReservedWord:           ; function: LexCheckReservedWord
                                                           ; frame size=0
           lex.c   110    {
           lex.c   111        int Count;
           lex.c   112        
           lex.c   113        for (Count = 0; Count < sizeof(ReservedWords) / sizeof(struct ReservedWord); Count++)
    00000032 E700                   MOV         #0,R7
    00000034 D538                   MOV.L       L1302+6,R5 ; __$ReservedWords
    00000036 E027                   MOV         #39,R0
    00000038 6653                   MOV         R5,R6
    0000003A              L964:                             
           lex.c   114        {
           lex.c   115            if (Word == ReservedWords[Count].SharedWord)
    0000003A 5352                   MOV.L       @(8,R5),R3
    0000003C 3430                   CMP/EQ      R3,R4
    0000003E 8B01                   BF          L965
           lex.c   116                return ReservedWords[Count].Token;
    00000040 000B                   RTS
    00000042 5061                   MOV.L       @(4,R6),R0
    00000044              L965:                             
    00000044 7701                   ADD         #1,R7
    00000046 760C                   ADD         #12,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000048 3702                   CMP/HS      R0,R7
    0000004A 8FF6                   BF/S        L964
    0000004C 750C                   ADD         #12,R5
           lex.c   117        }
           lex.c   118        
           lex.c   119        return TokenNone;
    0000004E E000                   MOV         #0,R0
           lex.c   120    }
    00000050              L966:                             
    00000050 000B                   RTS
    00000052 0009                   NOP
           lex.c   121    
           lex.c   122    /* get a numeric literal - used while scanning */
           lex.c   123    enum LexToken LexGetNumber(struct LexState *Lexer, struct Value *Value)
    00000054              _LexGetNumber:                   ; function: LexGetNumber
                                                           ; frame size=92
                                                           ; used runtime library name:
                                                           ; __addd, __muld, __divdr, __dtoi, __itod
    00000054 2FE6                   MOV.L       R14,@-R15
           lex.c   124    {
           lex.c   125        int Result = 0;
    00000056 E600                   MOV         #0,R6
    00000058 2FD6                   MOV.L       R13,@-R15
    0000005A 6D53                   MOV         R5,R13
    0000005C 2FC6                   MOV.L       R12,@-R15
    0000005E 4F22                   STS.L       PR,@-R15
    00000060 4F12                   STS.L       MACL,@-R15
    00000062 7FE4                   ADD         #-28,R15
           lex.c   126        int Base = 10;
           lex.c   127        enum LexToken ResultToken;
           lex.c   128    #ifndef NO_FP
           lex.c   129        double FPResult;
           lex.c   130        double FPDiv;
           lex.c   131    #endif
           lex.c   132        
           lex.c   133        if (*Lexer->Pos == '0')
    00000064 6042                   MOV.L       @R4,R0
    00000066 6000                   MOV.B       @R0,R0
    00000068 8830                   CMP/EQ      #48,R0
    0000006A 8F29                   BF/S        L967
    0000006C EE0A                   MOV         #10,R14
           lex.c   134        { 
           lex.c   135            /* a binary, octal or hex literal */
           lex.c   136            LEXER_INC(Lexer);
    0000006E 6242                   MOV.L       @R4,R2
    00000070 7201                   ADD         #1,R2
    00000072 2422                   MOV.L       R2,@R4
    00000074 5344                   MOV.L       @(16,R4),R3
    00000076 7301                   ADD         #1,R3
    00000078 1434                   MOV.L       R3,@(16,R4)
           lex.c   137            if (Lexer->Pos != Lexer->End)
    0000007A 5241                   MOV.L       @(4,R4),R2
    0000007C 6142                   MOV.L       @R4,R1
    0000007E 3120                   CMP/EQ      R2,R1
    00000080 891E                   BT          L967
           lex.c   138            {
           lex.c   139                if (*Lexer->Pos == 'x' || *Lexer->Pos == 'X')




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000082 6542                   MOV.L       @R4,R5
    00000084 6550                   MOV.B       @R5,R5
    00000086 6053                   MOV         R5,R0
    00000088 8878                   CMP/EQ      #120,R0
    0000008A 8902                   BT          L970
    0000008C 6053                   MOV         R5,R0
    0000008E 8858                   CMP/EQ      #88,R0
    00000090 8B01                   BF          L969
    00000092              L970:                             
    00000092 A009                   BRA         L819
           lex.c   140                    { Base = 16; LEXER_INC(Lexer); }
    00000094 EE10                   MOV         #16,R14
    00000096              L969:                             
           lex.c   141                else if (*Lexer->Pos == 'b' || *Lexer->Pos == 'B')
    00000096 6542                   MOV.L       @R4,R5
    00000098 6550                   MOV.B       @R5,R5
    0000009A 6053                   MOV         R5,R0
    0000009C 8862                   CMP/EQ      #98,R0
    0000009E 8902                   BT          L973
    000000A0 6053                   MOV         R5,R0
    000000A2 8842                   CMP/EQ      #66,R0
    000000A4 8B07                   BF          L972
    000000A6              L973:                             
           lex.c   142                    { Base = 2; LEXER_INC(Lexer); }
    000000A6 EE02                   MOV         #2,R14
    000000A8              L819:
    000000A8 6342                   MOV.L       @R4,R3
    000000AA 7301                   ADD         #1,R3
    000000AC 2432                   MOV.L       R3,@R4
    000000AE 5244                   MOV.L       @(16,R4),R2
    000000B0 7201                   ADD         #1,R2
    000000B2 A005                   BRA         L967
    000000B4 1424                   MOV.L       R2,@(16,R4)
    000000B6              L972:                             
           lex.c   143                else if (*Lexer->Pos != '.')
    000000B6 6042                   MOV.L       @R4,R0
    000000B8 6000                   MOV.B       @R0,R0
    000000BA 882E                   CMP/EQ      #46,R0
    000000BC 8900                   BT          L967
           lex.c   144                    Base = 8;
    000000BE EE08                   MOV         #8,R14
    000000C0              L967:                             
           lex.c   145            }
           lex.c   146        }
           lex.c   147    
           lex.c   148        /* get the value */
           lex.c   149        for (; Lexer->Pos != Lexer->End && IS_BASE_DIGIT(*Lexer->Pos, Base); LEXER_INC(Lexer))
    000000C0 A019                   BRA         L976
    000000C2 E539                   MOV         #57,R5
    000000C4              L977:                             
           lex.c   150            Result = Result * Base + GET_BASE_DIGIT(*Lexer->Pos);
    000000C4 06E7                   MUL.L       R14,R6
    000000C6 6742                   MOV.L       @R4,R7
    000000C8 6770                   MOV.B       @R7,R7
    000000CA 3757                   CMP/GT      R5,R7
    000000CC 8D03                   BT/S        L978
    000000CE 031A                   STS         MACL,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000D0 6273                   MOV         R7,R2
    000000D2 A008                   BRA         L980
    000000D4 72D0                   ADD         #-48,R2
    000000D6              L978:                             
    000000D6 E146                   MOV         #70,R1
    000000D8 3717                   CMP/GT      R1,R7
    000000DA 8902                   BT          L979
    000000DC 6273                   MOV         R7,R2
    000000DE A002                   BRA         L980
    000000E0 72C9                   ADD         #-55,R2
    000000E2              L979:                             
    000000E2 6273                   MOV         R7,R2
    000000E4 72A9                   ADD         #-87,R2
    000000E6              L980:                             
    000000E6 6633                   MOV         R3,R6
    000000E8 6342                   MOV.L       @R4,R3
    000000EA 362C                   ADD         R2,R6
    000000EC 7301                   ADD         #1,R3
    000000EE 2432                   MOV.L       R3,@R4
    000000F0 5244                   MOV.L       @(16,R4),R2
    000000F2 7201                   ADD         #1,R2
    000000F4 1424                   MOV.L       R2,@(16,R4)
    000000F6              L976:                             
    000000F6 6742                   MOV.L       @R4,R7
    000000F8 5341                   MOV.L       @(4,R4),R3
    000000FA 3730                   CMP/EQ      R3,R7
    000000FC 8927                   BT          L982
    000000FE E330                   MOV         #48,R3
    00000100 6170                   MOV.B       @R7,R1
    00000102 3133                   CMP/GE      R3,R1
    00000104 8B10                   BF          L983
    00000106 E00A                   MOV         #10,R0
    00000108 3E03                   CMP/GE      R0,R14
    0000010A 8D09                   BT/S        L984
    0000010C 6170                   MOV.B       @R7,R1
    0000010E A008                   BRA         L988
    00000110 62E3                   MOV         R14,R2
    00000112              L1302:                            
    00000112 0000                   .DATA.W     0
    00000114 <00000000>             .DATA.L     _TableStrRegister
    00000118 <00000000>             .DATA.L     __$ReservedWords
    0000011C <00000000>             .DATA.L     _LexInteractiveClear
    00000120              L984:                             
    00000120 6203                   MOV         R0,R2
    00000122              L988:                             
    00000122 7230                   ADD         #48,R2
    00000124 3123                   CMP/GE      R2,R1
    00000126 8BCD                   BF          L977
    00000128              L983:                             
    00000128 E30A                   MOV         #10,R3
    0000012A 3E37                   CMP/GT      R3,R14
    0000012C 8B0F                   BF          L982
    0000012E E361                   MOV         #97,R3
    00000130 6170                   MOV.B       @R7,R1
    00000132 3133                   CMP/GE      R3,R1
    00000134 8B03                   BF          L986
    00000136 E366                   MOV         #102,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000138 6170                   MOV.B       @R7,R1
    0000013A 3137                   CMP/GT      R3,R1
    0000013C 8BC2                   BF          L977
    0000013E              L986:                             
    0000013E E341                   MOV         #65,R3
    00000140 6170                   MOV.B       @R7,R1
    00000142 3133                   CMP/GE      R3,R1
    00000144 8B03                   BF          L982
    00000146 E346                   MOV         #70,R3
    00000148 6170                   MOV.B       @R7,R1
    0000014A 3137                   CMP/GT      R3,R1
    0000014C 8BBA                   BF          L977
    0000014E              L982:                             
           lex.c   151        
           lex.c   152        if (Result >= 0 && Result <= MAX_CHAR_VALUE)
    0000014E 4611                   CMP/PZ      R6
    00000150 8B08                   BF          L990
    00000152 9259                   MOV.W       L1303,R2   ; H'00FF
    00000154 3627                   CMP/GT      R2,R6
    00000156 8905                   BT          L990
           lex.c   153        {
           lex.c   154            Value->Typ = &CharType;
    00000158 D12C                   MOV.L       L1303+4,R1 ; _CharType
    0000015A 2D12                   MOV.L       R1,@R13
           lex.c   155            Value->Val->Character = Result;
    0000015C 53D1                   MOV.L       @(4,R13),R3
    0000015E 2360                   MOV.B       R6,@R3
           lex.c   156            ResultToken = TokenCharacterConstant;
    00000160 A005                   BRA         L991
    00000162 E731                   MOV         #49,R7
    00000164              L990:                             
           lex.c   157        }
           lex.c   158        else
           lex.c   159        {
           lex.c   160            Value->Typ = &IntType;
    00000164 D32A                   MOV.L       L1303+8,R3 ; _IntType
           lex.c   161            Value->Val->Integer = Result;
           lex.c   162            ResultToken = TokenIntegerConstant;
    00000166 E72E                   MOV         #46,R7
    00000168 2D32                   MOV.L       R3,@R13
    0000016A 52D1                   MOV.L       @(4,R13),R2
    0000016C 2262                   MOV.L       R6,@R2
    0000016E              L991:                             
           lex.c   163        }
           lex.c   164        
           lex.c   165        if (Lexer->Pos == Lexer->End)
    0000016E 5341                   MOV.L       @(4,R4),R3
    00000170 6242                   MOV.L       @R4,R2
    00000172 3230                   CMP/EQ      R3,R2
    00000174 8916                   BT          L818
           lex.c   166            return ResultToken;
           lex.c   167            
           lex.c   168        if (*Lexer->Pos == 'l' || *Lexer->Pos == 'L')
    00000176 6042                   MOV.L       @R4,R0
    00000178 6000                   MOV.B       @R0,R0
    0000017A 886C                   CMP/EQ      #108,R0
    0000017C 8D02                   BT/S        L995




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000017E 2F02                   MOV.L       R0,@R15
    00000180 884C                   CMP/EQ      #76,R0
    00000182 8B06                   BF          L994
    00000184              L995:                             
           lex.c   169        {
           lex.c   170            LEXER_INC(Lexer);
    00000184 6342                   MOV.L       @R4,R3
    00000186 7301                   ADD         #1,R3
    00000188 2432                   MOV.L       R3,@R4
    0000018A 5244                   MOV.L       @(16,R4),R2
    0000018C 7201                   ADD         #1,R2
    0000018E A009                   BRA         L818
    00000190 1424                   MOV.L       R2,@(16,R4)
    00000192              L994:                             
           lex.c   171            return ResultToken;
           lex.c   172        }
           lex.c   173            
           lex.c   174    #ifndef NO_FP
           lex.c   175        if (Lexer->Pos == Lexer->End || *Lexer->Pos != '.')
    00000192 6242                   MOV.L       @R4,R2
    00000194 2F22                   MOV.L       R2,@R15
    00000196 5341                   MOV.L       @(4,R4),R3
    00000198 3230                   CMP/EQ      R3,R2
    0000019A 8903                   BT          L818
    0000019C 60F2                   MOV.L       @R15,R0
    0000019E 6000                   MOV.B       @R0,R0
    000001A0 882E                   CMP/EQ      #46,R0
    000001A2 8901                   BT          L996
    000001A4              L818:
           lex.c   176            return ResultToken;
    000001A4 A13D                   BRA         L993
    000001A6 6073                   MOV         R7,R0
    000001A8              L996:                             
           lex.c   177    
           lex.c   178        Value->Typ = &FPType;
    000001A8 D21A                   MOV.L       L1303+12,R2; _FPType
           lex.c   179        LEXER_INC(Lexer);
           lex.c   180        for (FPDiv = 1.0/Base, FPResult = (double)Result; Lexer->Pos != Lexer->End && IS_BASE_DIGIT(*Lexer->Po
                         +s, Base); LEXER_INC(Lexer), FPDiv /= (double)Base)
    000001AA 60E3                   MOV         R14,R0
    000001AC 2D22                   MOV.L       R2,@R13
    000001AE 6342                   MOV.L       @R4,R3
    000001B0 7301                   ADD         #1,R3
    000001B2 2432                   MOV.L       R3,@R4
    000001B4 5244                   MOV.L       @(16,R4),R2
    000001B6 E300                   MOV         #0,R3
    000001B8 7201                   ADD         #1,R2
    000001BA 1424                   MOV.L       R2,@(16,R4)
    000001BC 2F36                   MOV.L       R3,@-R15
    000001BE D316                   MOV.L       L1303+16,R3; H'3FF00000
    000001C0 D216                   MOV.L       L1303+20,R2; __itod
    000001C2 2F36                   MOV.L       R3,@-R15
    000001C4 7FF8                   ADD         #-8,R15
    000001C6 420B                   JSR         @R2
    000001C8 2FF6                   MOV.L       R15,@-R15
    000001CA 61F3                   MOV         R15,R1
    000001CC D314                   MOV.L       L1303+24,R3; __divdr




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001CE 711C                   ADD         #28,R1
    000001D0 430B                   JSR         @R3
    000001D2 2F16                   MOV.L       R1,@-R15
    000001D4 D211                   MOV.L       L1303+20,R2; __itod
    000001D6 60F3                   MOV         R15,R0
    000001D8 7014                   ADD         #20,R0
    000001DA 2F06                   MOV.L       R0,@-R15
    000001DC 420B                   JSR         @R2
    000001DE 6063                   MOV         R6,R0
    000001E0 A049                   BRA         L998
    000001E2 0009                   NOP
    000001E4              L999:                             
           lex.c   181            FPResult += GET_BASE_DIGIT(*Lexer->Pos) * FPDiv;
    000001E4 51F6                   MOV.L       @(24,R15),R1
    000001E6 2F16                   MOV.L       R1,@-R15
    000001E8 51F6                   MOV.L       @(24,R15),R1
    000001EA 2F16                   MOV.L       R1,@-R15
    000001EC 6642                   MOV.L       @R4,R6
    000001EE 6660                   MOV.B       @R6,R6
    000001F0 3657                   CMP/GT      R5,R6
    000001F2 8D03                   BT/S        L1000
    000001F4 7FF8                   ADD         #-8,R15
    000001F6 6063                   MOV         R6,R0
    000001F8 A016                   BRA         L1002
    000001FA 70D0                   ADD         #-48,R0
    000001FC              L1000:                            
    000001FC E346                   MOV         #70,R3
    000001FE 3637                   CMP/GT      R3,R6
    00000200 8910                   BT          L1001
    00000202 6063                   MOV         R6,R0
    00000204 A010                   BRA         L1002
    00000206 70C9                   ADD         #-55,R0
    00000208              L1303:                            
    00000208 00FF                   .DATA.W     H'00FF
    0000020A 0000                   .DATA.W     0
    0000020C <00000000>             .DATA.L     _CharType
    00000210 <00000000>             .DATA.L     _IntType
    00000214 <00000000>             .DATA.L     _FPType
    00000218 3FF00000               .DATA.L     H'3FF00000
    0000021C <00000000>             .DATA.L     __itod
    00000220 <00000000>             .DATA.L     __divdr
    00000224              L1001:                            
    00000224 6063                   MOV         R6,R0
    00000226 70A9                   ADD         #-87,R0
    00000228              L1002:                            
    00000228 D381                   MOV.L       L1304,R3   ; __itod
    0000022A 7FF8                   ADD         #-8,R15
    0000022C 430B                   JSR         @R3
    0000022E 2FF6                   MOV.L       R15,@-R15
    00000230 52FA                   MOV.L       @(40,R15),R2
    00000232 2F26                   MOV.L       R2,@-R15
    00000234 52FA                   MOV.L       @(40,R15),R2
    00000236 2F26                   MOV.L       R2,@-R15
    00000238 D17E                   MOV.L       L1304+4,R1 ; __muld
    0000023A 63F3                   MOV         R15,R3
    0000023C 7310                   ADD         #16,R3
    0000023E 410B                   JSR         @R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000240 2F36                   MOV.L       R3,@-R15
    00000242 62F3                   MOV         R15,R2
    00000244 7224                   ADD         #36,R2
    00000246 2F26                   MOV.L       R2,@-R15
    00000248 D27B                   MOV.L       L1304+8,R2 ; __addd
    0000024A 420B                   JSR         @R2
    0000024C 0009                   NOP
    0000024E 60E3                   MOV         R14,R0
    00000250 6342                   MOV.L       @R4,R3
    00000252 7301                   ADD         #1,R3
    00000254 2432                   MOV.L       R3,@R4
    00000256 5244                   MOV.L       @(16,R4),R2
    00000258 7201                   ADD         #1,R2
    0000025A 1424                   MOV.L       R2,@(16,R4)
    0000025C 53F4                   MOV.L       @(16,R15),R3
    0000025E 2F36                   MOV.L       R3,@-R15
    00000260 53F4                   MOV.L       @(16,R15),R3
    00000262 2F36                   MOV.L       R3,@-R15
    00000264 D372                   MOV.L       L1304,R3   ; __itod
    00000266 7FF8                   ADD         #-8,R15
    00000268 430B                   JSR         @R3
    0000026A 2FF6                   MOV.L       R15,@-R15
    0000026C D273                   MOV.L       L1304+12,R2; __divdr
    0000026E 61F3                   MOV         R15,R1
    00000270 711C                   ADD         #28,R1
    00000272 420B                   JSR         @R2
    00000274 2F16                   MOV.L       R1,@-R15
    00000276              L998:                             
    00000276 6642                   MOV.L       @R4,R6
    00000278 5341                   MOV.L       @(4,R4),R3
    0000027A 3630                   CMP/EQ      R3,R6
    0000027C 8B01                   BF          L1305
    0000027E A0C8                   BRA         L1012
    00000280 0009                   NOP
    00000282              L1305:                            
    00000282 E330                   MOV         #48,R3
    00000284 6160                   MOV.B       @R6,R1
    00000286 3133                   CMP/GE      R3,R1
    00000288 8B09                   BF          L1005
    0000028A E00A                   MOV         #10,R0
    0000028C 3E03                   CMP/GE      R0,R14
    0000028E 8D02                   BT/S        L1006
    00000290 6160                   MOV.B       @R6,R1
    00000292 A001                   BRA         L1010
    00000294 62E3                   MOV         R14,R2
    00000296              L1006:                            
    00000296 6203                   MOV         R0,R2
    00000298              L1010:                            
    00000298 7230                   ADD         #48,R2
    0000029A 3123                   CMP/GE      R2,R1
    0000029C 8BA2                   BF          L999
    0000029E              L1005:                            
    0000029E E30A                   MOV         #10,R3
    000002A0 3E37                   CMP/GT      R3,R14
    000002A2 8B0F                   BF          L1004
    000002A4 6160                   MOV.B       @R6,R1
    000002A6 E361                   MOV         #97,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002A8 3133                   CMP/GE      R3,R1
    000002AA 8B03                   BF          L1008
    000002AC 6160                   MOV.B       @R6,R1
    000002AE E366                   MOV         #102,R3
    000002B0 3137                   CMP/GT      R3,R1
    000002B2 8B97                   BF          L999
    000002B4              L1008:                            
    000002B4 6160                   MOV.B       @R6,R1
    000002B6 E341                   MOV         #65,R3
    000002B8 3133                   CMP/GE      R3,R1
    000002BA 8B03                   BF          L1004
    000002BC 6160                   MOV.B       @R6,R1
    000002BE E346                   MOV         #70,R3
    000002C0 3137                   CMP/GT      R3,R1
    000002C2 8B8F                   BF          L999
    000002C4              L1004:                            
           lex.c   182        
           lex.c   183        if (Lexer->Pos != Lexer->End && (*Lexer->Pos == 'e' || *Lexer->Pos == 'E'))
    000002C4 6642                   MOV.L       @R4,R6
    000002C6 5341                   MOV.L       @(4,R4),R3
    000002C8 3630                   CMP/EQ      R3,R6
    000002CA 8B01                   BF          L1306
    000002CC A0A1                   BRA         L1012
    000002CE 0009                   NOP
    000002D0              L1306:                            
    000002D0 6060                   MOV.B       @R6,R0
    000002D2 8865                   CMP/EQ      #101,R0
    000002D4 8904                   BT          L1013
    000002D6 6060                   MOV.B       @R6,R0
    000002D8 8845                   CMP/EQ      #69,R0
    000002DA 8901                   BT          L1307
    000002DC A099                   BRA         L1012
    000002DE 0009                   NOP
    000002E0              L1307:                            
    000002E0              L1013:                            
           lex.c   184        {
           lex.c   185            double ExponentMultiplier = 1.0;
    000002E0 D357                   MOV.L       L1304+16,R3; H'3FF00000
    000002E2 62F3                   MOV         R15,R2
    000002E4 7204                   ADD         #4,R2
    000002E6 2232                   MOV.L       R3,@R2
    000002E8 E300                   MOV         #0,R3
    000002EA 1231                   MOV.L       R3,@(4,R2)
           lex.c   186            
           lex.c   187            LEXER_INC(Lexer);
    000002EC 6142                   MOV.L       @R4,R1
    000002EE 7101                   ADD         #1,R1
    000002F0 2412                   MOV.L       R1,@R4
    000002F2 5344                   MOV.L       @(16,R4),R3
    000002F4 7301                   ADD         #1,R3
    000002F6 1434                   MOV.L       R3,@(16,R4)
           lex.c   188            if (Lexer->Pos != Lexer->End && *Lexer->Pos == '-')
    000002F8 6642                   MOV.L       @R4,R6
    000002FA 5241                   MOV.L       @(4,R4),R2
    000002FC 3620                   CMP/EQ      R2,R6
    000002FE 890E                   BT          L1014
    00000300 6060                   MOV.B       @R6,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000302 882D                   CMP/EQ      #45,R0
    00000304 8B0B                   BF          L1014
           lex.c   189            {
           lex.c   190                ExponentMultiplier = -1.0;
    00000306 62F3                   MOV         R15,R2
    00000308 D34E                   MOV.L       L1304+20,R3; H'BFF00000
    0000030A 7204                   ADD         #4,R2
    0000030C 2232                   MOV.L       R3,@R2
    0000030E E300                   MOV         #0,R3
    00000310 1231                   MOV.L       R3,@(4,R2)
           lex.c   191                LEXER_INC(Lexer);
    00000312 6142                   MOV.L       @R4,R1
    00000314 7101                   ADD         #1,R1
    00000316 2412                   MOV.L       R1,@R4
    00000318 5344                   MOV.L       @(16,R4),R3
    0000031A 7301                   ADD         #1,R3
    0000031C 1434                   MOV.L       R3,@(16,R4)
    0000031E              L1014:                            
           lex.c   192            }
           lex.c   193            
           lex.c   194            for (Result = 0; Lexer->Pos != Lexer->End && IS_BASE_DIGIT(*Lexer->Pos, Base); LEXER_INC(Lexer))
    0000031E A031                   BRA         L1015
    00000320 EC00                   MOV         #0,R12
    00000322              L1016:                            
           lex.c   195                Result = Result * (double)Base + GET_BASE_DIGIT(*Lexer->Pos);
    00000322 60C3                   MOV         R12,R0
    00000324 D342                   MOV.L       L1304,R3   ; __itod
    00000326 7FE8                   ADD         #-24,R15
    00000328 430B                   JSR         @R3
    0000032A 2FF6                   MOV.L       R15,@-R15
    0000032C D240                   MOV.L       L1304,R2   ; __itod
    0000032E 60E3                   MOV         R14,R0
    00000330 7FF8                   ADD         #-8,R15
    00000332 420B                   JSR         @R2
    00000334 2FF6                   MOV.L       R15,@-R15
    00000336 63F3                   MOV         R15,R3
    00000338 D13E                   MOV.L       L1304+4,R1 ; __muld
    0000033A 7310                   ADD         #16,R3
    0000033C 410B                   JSR         @R1
    0000033E 2F36                   MOV.L       R3,@-R15
    00000340 6642                   MOV.L       @R4,R6
    00000342 6660                   MOV.B       @R6,R6
    00000344 3657                   CMP/GT      R5,R6
    00000346 8902                   BT          L1017
    00000348 6063                   MOV         R6,R0
    0000034A A008                   BRA         L1019
    0000034C 70D0                   ADD         #-48,R0
    0000034E              L1017:                            
    0000034E E346                   MOV         #70,R3
    00000350 3637                   CMP/GT      R3,R6
    00000352 8902                   BT          L1018
    00000354 6063                   MOV         R6,R0
    00000356 A002                   BRA         L1019
    00000358 70C9                   ADD         #-55,R0
    0000035A              L1018:                            
    0000035A 6063                   MOV         R6,R0
    0000035C 70A9                   ADD         #-87,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000035E              L1019:                            
    0000035E 7FF8                   ADD         #-8,R15
    00000360 D333                   MOV.L       L1304,R3   ; __itod
    00000362 430B                   JSR         @R3
    00000364 2FF6                   MOV.L       R15,@-R15
    00000366 62F3                   MOV         R15,R2
    00000368 D133                   MOV.L       L1304+8,R1 ; __addd
    0000036A 7210                   ADD         #16,R2
    0000036C 410B                   JSR         @R1
    0000036E 2F26                   MOV.L       R2,@-R15
    00000370 D335                   MOV.L       L1304+24,R3; __dtoi
    00000372 430B                   JSR         @R3
    00000374 0009                   NOP
    00000376 6C03                   MOV         R0,R12
    00000378 6242                   MOV.L       @R4,R2
    0000037A 7201                   ADD         #1,R2
    0000037C 2422                   MOV.L       R2,@R4
    0000037E 5344                   MOV.L       @(16,R4),R3
    00000380 7301                   ADD         #1,R3
    00000382 1434                   MOV.L       R3,@(16,R4)
    00000384              L1015:                            
    00000384 6642                   MOV.L       @R4,R6
    00000386 5241                   MOV.L       @(4,R4),R2
    00000388 3620                   CMP/EQ      R2,R6
    0000038A 8920                   BT          L1021
    0000038C 6160                   MOV.B       @R6,R1
    0000038E E330                   MOV         #48,R3
    00000390 3133                   CMP/GE      R3,R1
    00000392 8B09                   BF          L1022
    00000394 E00A                   MOV         #10,R0
    00000396 3E03                   CMP/GE      R0,R14
    00000398 8D02                   BT/S        L1023
    0000039A 6160                   MOV.B       @R6,R1
    0000039C A001                   BRA         L1027
    0000039E 62E3                   MOV         R14,R2
    000003A0              L1023:                            
    000003A0 6203                   MOV         R0,R2
    000003A2              L1027:                            
    000003A2 7230                   ADD         #48,R2
    000003A4 3123                   CMP/GE      R2,R1
    000003A6 8BBC                   BF          L1016
    000003A8              L1022:                            
    000003A8 E30A                   MOV         #10,R3
    000003AA 3E37                   CMP/GT      R3,R14
    000003AC 8B0F                   BF          L1021
    000003AE E361                   MOV         #97,R3
    000003B0 6160                   MOV.B       @R6,R1
    000003B2 3133                   CMP/GE      R3,R1
    000003B4 8B03                   BF          L1025
    000003B6 E366                   MOV         #102,R3
    000003B8 6160                   MOV.B       @R6,R1
    000003BA 3137                   CMP/GT      R3,R1
    000003BC 8BB1                   BF          L1016
    000003BE              L1025:                            
    000003BE E341                   MOV         #65,R3
    000003C0 6160                   MOV.B       @R6,R1
    000003C2 3133                   CMP/GE      R3,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003C4 8B03                   BF          L1021
    000003C6 E346                   MOV         #70,R3
    000003C8 6160                   MOV.B       @R6,R1
    000003CA 3137                   CMP/GT      R3,R1
    000003CC 8BA9                   BF          L1016
    000003CE              L1021:                            
           lex.c   196                
           lex.c   197            FPResult *= pow((double)Base, (double)Result * ExponentMultiplier);
    000003CE 60C3                   MOV         R12,R0
    000003D0 D317                   MOV.L       L1304,R3   ; __itod
    000003D2 52F6                   MOV.L       @(24,R15),R2
    000003D4 2F26                   MOV.L       R2,@-R15
    000003D6 52F6                   MOV.L       @(24,R15),R2
    000003D8 2F26                   MOV.L       R2,@-R15
    000003DA 7FE8                   ADD         #-24,R15
    000003DC 430B                   JSR         @R3
    000003DE 2FF6                   MOV.L       R15,@-R15
    000003E0 52FA                   MOV.L       @(40,R15),R2
    000003E2 2F26                   MOV.L       R2,@-R15
    000003E4 52FA                   MOV.L       @(40,R15),R2
    000003E6 2F26                   MOV.L       R2,@-R15
    000003E8 D112                   MOV.L       L1304+4,R1 ; __muld
    000003EA 63F3                   MOV         R15,R3
    000003EC 7310                   ADD         #16,R3
    000003EE 410B                   JSR         @R1
    000003F0 2F36                   MOV.L       R3,@-R15
    000003F2 60E3                   MOV         R14,R0
    000003F4 D20E                   MOV.L       L1304,R2   ; __itod
    000003F6 7FF8                   ADD         #-8,R15
    000003F8 420B                   JSR         @R2
    000003FA 2FF6                   MOV.L       R15,@-R15
    000003FC D113                   MOV.L       L1304+28,R1; _pow
    000003FE E310                   MOV         #16,R3
    00000400 33FC                   ADD         R15,R3
    00000402 410B                   JSR         @R1
    00000404 2F36                   MOV.L       R3,@-R15
    00000406 7F14                   ADD         #20,R15
    00000408 D30A                   MOV.L       L1304+4,R3 ; __muld
    0000040A 61F3                   MOV         R15,R1
    0000040C 7124                   ADD         #36,R1
    0000040E 430B                   JSR         @R3
    00000410 2F16                   MOV.L       R1,@-R15
    00000412              L1012:                            
           lex.c   198        }
           lex.c   199        
           lex.c   200        Value->Val->FP = FPResult;
    00000412 63F3                   MOV         R15,R3
    00000414 51D1                   MOV.L       @(4,R13),R1
    00000416 7314                   ADD         #20,R3
    00000418 6032                   MOV.L       @R3,R0
    0000041A 2102                   MOV.L       R0,@R1
    0000041C 5031                   MOV.L       @(4,R3),R0
    0000041E 1101                   MOV.L       R0,@(4,R1)
           lex.c   201        
           lex.c   202        return TokenFPConstant;
    00000420 E02F                   MOV         #47,R0
           lex.c   203    #else




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   204        return ResultToken;
           lex.c   205    #endif
           lex.c   206    }
    00000422              L993:                             
    00000422 7F1C                   ADD         #28,R15
    00000424 4F16                   LDS.L       @R15+,MACL
    00000426 4F26                   LDS.L       @R15+,PR
    00000428 6CF6                   MOV.L       @R15+,R12
    0000042A 6DF6                   MOV.L       @R15+,R13
    0000042C 000B                   RTS
    0000042E 6EF6                   MOV.L       @R15+,R14
    00000430              L1304:                            
    00000430 <00000000>             .DATA.L     __itod
    00000434 <00000000>             .DATA.L     __muld
    00000438 <00000000>             .DATA.L     __addd
    0000043C <00000000>             .DATA.L     __divdr
    00000440 3FF00000               .DATA.L     H'3FF00000
    00000444 BFF00000               .DATA.L     H'BFF00000
    00000448 <00000000>             .DATA.L     __dtoi
    0000044C <00000000>             .DATA.L     _pow
           lex.c   207    
           lex.c   208    /* get a reserved word or identifier - used while scanning */
           lex.c   209    enum LexToken LexGetWord(struct LexState *Lexer, struct Value *Value)
    00000450              _LexGetWord:                     ; function: LexGetWord
                                                           ; frame size=20
    00000450 2FE6                   MOV.L       R14,@-R15
    00000452 6E43                   MOV         R4,R14
    00000454 2FD6                   MOV.L       R13,@-R15
    00000456 6D53                   MOV         R5,R13
    00000458 2FC6                   MOV.L       R12,@-R15
    0000045A 2F86                   MOV.L       R8,@-R15
    0000045C 4F22                   STS.L       PR,@-R15
           lex.c   210    {
           lex.c   211        const char *StartPos = Lexer->Pos;
    0000045E 6CE2                   MOV.L       @R14,R12
           lex.c   212        enum LexToken Token;
           lex.c   213        
           lex.c   214        do {
    00000460              L1029:                            
           lex.c   215            LEXER_INC(Lexer);
    00000460 63E2                   MOV.L       @R14,R3
    00000462 7301                   ADD         #1,R3
    00000464 2E32                   MOV.L       R3,@R14
    00000466 52E4                   MOV.L       @(16,R14),R2
    00000468 7201                   ADD         #1,R2
    0000046A 1E24                   MOV.L       R2,@(16,R14)
           lex.c   216        } while (Lexer->Pos != Lexer->End && isCident((int)*Lexer->Pos));
    0000046C 64E2                   MOV.L       @R14,R4
    0000046E 53E1                   MOV.L       @(4,R14),R3
    00000470 3430                   CMP/EQ      R3,R4
    00000472 8909                   BT          L1030
    00000474 6040                   MOV.B       @R4,R0
    00000476 600C                   EXTU.B      R0,R0
    00000478 D14A                   MOV.L       L1308+2,R1 ; __ctype
    0000047A 001C                   MOV.B       @(R0,R1),R0
    0000047C 600C                   EXTU.B      R0,R0
    0000047E C807                   TST         #7,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000480 8BEE                   BF          L1029
    00000482 6040                   MOV.B       @R4,R0
    00000484 885F                   CMP/EQ      #95,R0
    00000486 89EB                   BT          L1029
    00000488              L1030:                            
           lex.c   217        
           lex.c   218        Value->Typ = NULL;
    00000488 E200                   MOV         #0,R2
    0000048A 2D22                   MOV.L       R2,@R13
           lex.c   219        Value->Val->Identifier = TableStrRegister2(StartPos, Lexer->Pos - StartPos);
    0000048C 58D1                   MOV.L       @(4,R13),R8
    0000048E 65E2                   MOV.L       @R14,R5
    00000490 D245                   MOV.L       L1308+6,R2 ; _TableStrRegister2
    00000492 35C8                   SUB         R12,R5
    00000494 420B                   JSR         @R2
    00000496 64C3                   MOV         R12,R4
    00000498 2802                   MOV.L       R0,@R8
           lex.c   220        
           lex.c   221        Token = LexCheckReservedWord(Value->Val->Identifier);
    0000049A 54D1                   MOV.L       @(4,R13),R4
    0000049C BDC9                   BSR         _LexCheckReservedWord
    0000049E 6442                   MOV.L       @R4,R4
           lex.c   222        switch (Token)
    000004A0 8854                   CMP/EQ      #84,R0
    000004A2 8D04                   BT/S        L872
    000004A4 6403                   MOV         R0,R4
    000004A6 8853                   CMP/EQ      #83,R0
    000004A8 8904                   BT          L873
    000004AA A005                   BRA         L1031
    000004AC 0009                   NOP
    000004AE              L872:                            ; case label 
           lex.c   223        {
           lex.c   224            case TokenHashInclude: Lexer->Mode = LexModeHashInclude; break;
    000004AE E201                   MOV         #1,R2
    000004B0 A002                   BRA         L1031
    000004B2 1E26                   MOV.L       R2,@(24,R14)
    000004B4              L873:                            ; case label 
           lex.c   225            case TokenHashDefine: Lexer->Mode = LexModeHashDefine; break;
    000004B4 E102                   MOV         #2,R1
    000004B6 1E16                   MOV.L       R1,@(24,R14)
           lex.c   226            default: break;
    000004B8              L1031:                            
           lex.c   227        }
           lex.c   228            
           lex.c   229        if (Token != TokenNone)
    000004B8 2448                   TST         R4,R4
    000004BA 8901                   BT          L1032
           lex.c   230            return Token;
    000004BC A006                   BRA         L1033
    000004BE 6043                   MOV         R4,R0
    000004C0              L1032:                            
           lex.c   231        
           lex.c   232        if (Lexer->Mode == LexModeHashDefineSpace)
    000004C0 50E6                   MOV.L       @(24,R14),R0
    000004C2 8803                   CMP/EQ      #3,R0
    000004C4 8B01                   BF          L1034
           lex.c   233            Lexer->Mode = LexModeHashDefineSpaceIdent;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004C6 E304                   MOV         #4,R3
    000004C8 1E36                   MOV.L       R3,@(24,R14)
    000004CA              L1034:                            
           lex.c   234        
           lex.c   235        return TokenIdentifier;
    000004CA E02D                   MOV         #45,R0
           lex.c   236    }
    000004CC              L1033:                            
    000004CC 4F26                   LDS.L       @R15+,PR
    000004CE 68F6                   MOV.L       @R15+,R8
    000004D0 6CF6                   MOV.L       @R15+,R12
    000004D2 6DF6                   MOV.L       @R15+,R13
    000004D4 000B                   RTS
    000004D6 6EF6                   MOV.L       @R15+,R14
           lex.c   237    
           lex.c   238    /* unescape a character from an octal character constant */
           lex.c   239    unsigned char LexUnEscapeCharacterConstant(const char **From, const char *End, unsigned char FirstChar, in
                         +t Base)
    000004D8              _LexUnEscapeCharacterConstant:   ; function: LexUnEscapeCharacterConstant
                                                           ; frame size=12
    000004D8 2FE6                   MOV.L       R14,@-R15
           lex.c   240    {
           lex.c   241        unsigned char Total = GET_BASE_DIGIT(FirstChar);
    000004DA 656C                   EXTU.B      R6,R5
    000004DC 2FD6                   MOV.L       R13,@-R15
    000004DE ED39                   MOV         #57,R13
    000004E0 4F12                   STS.L       MACL,@-R15
    000004E2 35D7                   CMP/GT      R13,R5
    000004E4 8902                   BT          L1035
    000004E6 6E53                   MOV         R5,R14
    000004E8 A008                   BRA         L1037
    000004EA 7ED0                   ADD         #-48,R14
    000004EC              L1035:                            
    000004EC E346                   MOV         #70,R3
    000004EE 3537                   CMP/GT      R3,R5
    000004F0 8902                   BT          L1036
    000004F2 6E53                   MOV         R5,R14
    000004F4 A002                   BRA         L1037
    000004F6 7EC9                   ADD         #-55,R14
    000004F8              L1036:                            
    000004F8 6E53                   MOV         R5,R14
    000004FA 7EA9                   ADD         #-87,R14
    000004FC              L1037:                            
           lex.c   242        int CCount;
           lex.c   243        for (CCount = 0; IS_BASE_DIGIT(**From, Base) && CCount < 2; CCount++, (*From)++)
    000004FC E030                   MOV         #48,R0
    000004FE A017                   BRA         L1039
    00000500 E600                   MOV         #0,R6
    00000502              L1040:                            
           lex.c   244            Total = Total * Base + GET_BASE_DIGIT(**From);
    00000502 6542                   MOV.L       @R4,R5
    00000504 6550                   MOV.B       @R5,R5
    00000506 35D7                   CMP/GT      R13,R5
    00000508 8902                   BT          L1041
    0000050A 6253                   MOV         R5,R2
    0000050C A008                   BRA         L1043
    0000050E 72D0                   ADD         #-48,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000510              L1041:                            
    00000510 E146                   MOV         #70,R1
    00000512 3517                   CMP/GT      R1,R5
    00000514 8902                   BT          L1042
    00000516 6253                   MOV         R5,R2
    00000518 A002                   BRA         L1043
    0000051A 72C9                   ADD         #-55,R2
    0000051C              L1042:                            
    0000051C 6253                   MOV         R5,R2
    0000051E 72A9                   ADD         #-87,R2
    00000520              L1043:                            
    00000520 27EE                   MULU        R14,R7
    00000522 7601                   ADD         #1,R6
    00000524 6342                   MOV.L       @R4,R3
    00000526 011A                   STS         MACL,R1
    00000528 6E23                   MOV         R2,R14
    0000052A 3E1C                   ADD         R1,R14
    0000052C 7301                   ADD         #1,R3
    0000052E 2432                   MOV.L       R3,@R4
    00000530              L1039:                            
    00000530 6542                   MOV.L       @R4,R5
    00000532 6550                   MOV.B       @R5,R5
    00000534 3503                   CMP/GE      R0,R5
    00000536 8B08                   BF          L1047
    00000538 E30A                   MOV         #10,R3
    0000053A 3733                   CMP/GE      R3,R7
    0000053C 8901                   BT          L1048
    0000053E A001                   BRA         L1052
    00000540 6273                   MOV         R7,R2
    00000542              L1048:                            
    00000542 6233                   MOV         R3,R2
    00000544              L1052:                            
    00000544 7230                   ADD         #48,R2
    00000546 3523                   CMP/GE      R2,R5
    00000548 8B0E                   BF          L1046
    0000054A              L1047:                            
    0000054A E20A                   MOV         #10,R2
    0000054C 3727                   CMP/GT      R2,R7
    0000054E 8B0E                   BF          L1045
    00000550 E161                   MOV         #97,R1
    00000552 3513                   CMP/GE      R1,R5
    00000554 8B02                   BF          L1051
    00000556 E266                   MOV         #102,R2
    00000558 3527                   CMP/GT      R2,R5
    0000055A 8B05                   BF          L1046
    0000055C              L1051:                            
    0000055C E141                   MOV         #65,R1
    0000055E 3513                   CMP/GE      R1,R5
    00000560 8B05                   BF          L1045
    00000562 E246                   MOV         #70,R2
    00000564 3527                   CMP/GT      R2,R5
    00000566 8902                   BT          L1045
    00000568              L1046:                            
    00000568 E102                   MOV         #2,R1
    0000056A 3613                   CMP/GE      R1,R6
    0000056C 8BC9                   BF          L1040
    0000056E              L1045:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   245        
           lex.c   246        return Total;
    0000056E 60E3                   MOV         R14,R0
           lex.c   247    }
    00000570 4F16                   LDS.L       @R15+,MACL
    00000572 6DF6                   MOV.L       @R15+,R13
    00000574 000B                   RTS
    00000576 6EF6                   MOV.L       @R15+,R14
           lex.c   248    
           lex.c   249    /* unescape a character from a string or character constant */
           lex.c   250    unsigned char LexUnEscapeCharacter(const char **From, const char *End)
    00000578              _LexUnEscapeCharacter:           ; function: LexUnEscapeCharacter
                                                           ; frame size=4
    00000578 2FE6                   MOV.L       R14,@-R15
           lex.c   251    {
           lex.c   252        unsigned char ThisChar;
           lex.c   253        
           lex.c   254        while ( *From != End && **From == '\\' && 
    0000057A A003                   BRA         L1055
    0000057C 0009                   NOP
    0000057E              L1056:                            
           lex.c   255                &(*From)[1] != End && (*From)[1] == '\n' )
           lex.c   256            (*From) += 2;       /* skip escaped end of lines with LF line termination */
    0000057E 6242                   MOV.L       @R4,R2
    00000580 7202                   ADD         #2,R2
    00000582 2422                   MOV.L       R2,@R4
    00000584              L1055:                            
    00000584 6642                   MOV.L       @R4,R6
    00000586 3650                   CMP/EQ      R5,R6
    00000588 8927                   BT          L1060
    0000058A 6060                   MOV.B       @R6,R0
    0000058C 885C                   CMP/EQ      #92,R0
    0000058E 8B24                   BF          L1060
    00000590 6263                   MOV         R6,R2
    00000592 7201                   ADD         #1,R2
    00000594 3250                   CMP/EQ      R5,R2
    00000596 8920                   BT          L1060
    00000598 8461                   MOV.B       @(1,R6),R0
    0000059A 880A                   CMP/EQ      #10,R0
    0000059C 89EF                   BT          L1056
           lex.c   257        
           lex.c   258        while ( *From != End && **From == '\\' && 
    0000059E A008                   BRA         L1058
    000005A0 0009                   NOP
    000005A2              L1308:                            
    000005A2 0000                   .DATA.W     0
    000005A4 <00000000>             .DATA.L     __ctype
    000005A8 <00000000>             .DATA.L     _TableStrRegister2
    000005AC              L1059:                            
           lex.c   259                &(*From)[1] != End && &(*From)[2] != End && (*From)[1] == '\r' && (*From)[2] == '\n')
           lex.c   260            (*From) += 3;       /* skip escaped end of lines with CR/LF line termination */
    000005AC 6342                   MOV.L       @R4,R3
    000005AE 7303                   ADD         #3,R3
    000005B0 2432                   MOV.L       R3,@R4
    000005B2              L1058:                            
    000005B2 6642                   MOV.L       @R4,R6
    000005B4 3650                   CMP/EQ      R5,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005B6 8910                   BT          L1060
    000005B8 6060                   MOV.B       @R6,R0
    000005BA 885C                   CMP/EQ      #92,R0
    000005BC 8B0D                   BF          L1060
    000005BE 6263                   MOV         R6,R2
    000005C0 7201                   ADD         #1,R2
    000005C2 3250                   CMP/EQ      R5,R2
    000005C4 8909                   BT          L1060
    000005C6 6263                   MOV         R6,R2
    000005C8 7202                   ADD         #2,R2
    000005CA 3250                   CMP/EQ      R5,R2
    000005CC 8905                   BT          L1060
    000005CE 8461                   MOV.B       @(1,R6),R0
    000005D0 880D                   CMP/EQ      #13,R0
    000005D2 8B02                   BF          L1060
    000005D4 8462                   MOV.B       @(2,R6),R0
    000005D6 880A                   CMP/EQ      #10,R0
    000005D8 89E8                   BT          L1059
    000005DA              L1060:                            
           lex.c   261        
           lex.c   262        if (*From == End)
    000005DA 6242                   MOV.L       @R4,R2
    000005DC 3250                   CMP/EQ      R5,R2
    000005DE 892F                   BT          L821
           lex.c   263            return '\\';
           lex.c   264        
           lex.c   265        if (**From == '\\')
    000005E0 6042                   MOV.L       @R4,R0
    000005E2 6000                   MOV.B       @R0,R0
    000005E4 885C                   CMP/EQ      #92,R0
    000005E6 8B54                   BF          L1063
           lex.c   266        { 
           lex.c   267            /* it's escaped */
           lex.c   268            (*From)++;
    000005E8 6242                   MOV.L       @R4,R2
    000005EA 7201                   ADD         #1,R2
    000005EC 2422                   MOV.L       R2,@R4
           lex.c   269            if (*From == End)
    000005EE 6323                   MOV         R2,R3
    000005F0 3350                   CMP/EQ      R5,R3
    000005F2 8925                   BT          L821
           lex.c   270                return '\\';
           lex.c   271            
           lex.c   272            ThisChar = *(*From)++;
    000005F4 6E42                   MOV.L       @R4,R14
    000005F6 7E01                   ADD         #1,R14
    000005F8 24E2                   MOV.L       R14,@R4
    000005FA 7EFF                   ADD         #-1,R14
    000005FC 6EE0                   MOV.B       @R14,R14
           lex.c   273            switch (ThisChar)
    000005FE 60EC                   EXTU.B      R14,R0
    00000600 885C                   CMP/EQ      #92,R0
    00000602 891D                   BT          L821
    00000604 8827                   CMP/EQ      #39,R0
    00000606 891E                   BT          L876
    00000608 8822                   CMP/EQ      #34,R0
    0000060A 891F                   BT          L877




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000060C 8861                   CMP/EQ      #97,R0
    0000060E 8920                   BT          L878
    00000610 8862                   CMP/EQ      #98,R0
    00000612 8921                   BT          L879
    00000614 8866                   CMP/EQ      #102,R0
    00000616 8922                   BT          L880
    00000618 886E                   CMP/EQ      #110,R0
    0000061A 8923                   BT          L881
    0000061C 8872                   CMP/EQ      #114,R0
    0000061E 8924                   BT          L882
    00000620 8874                   CMP/EQ      #116,R0
    00000622 8925                   BT          L883
    00000624 8876                   CMP/EQ      #118,R0
    00000626 8926                   BT          L884
    00000628 8830                   CMP/EQ      #48,R0
    0000062A 8927                   BT          L885
    0000062C 8831                   CMP/EQ      #49,R0
    0000062E 8925                   BT          L886
    00000630 8832                   CMP/EQ      #50,R0
    00000632 8923                   BT          L887
    00000634 8833                   CMP/EQ      #51,R0
    00000636 8921                   BT          L888
    00000638 8878                   CMP/EQ      #120,R0
    0000063A 8923                   BT          L889
    0000063C A026                   BRA         L890
    0000063E 0009                   NOP
    00000640              L821:
           lex.c   274            {
           lex.c   275                case '\\': return '\\'; 
    00000640 E05C                   MOV         #92,R0
    00000642 000B                   RTS
    00000644 6EF6                   MOV.L       @R15+,R14
    00000646              L876:                            ; case label 
           lex.c   276                case '\'': return '\'';
    00000646 E027                   MOV         #39,R0
    00000648 000B                   RTS
    0000064A 6EF6                   MOV.L       @R15+,R14
    0000064C              L877:                            ; case label 
           lex.c   277                case '"':  return '"';
    0000064C E022                   MOV         #34,R0
    0000064E 000B                   RTS
    00000650 6EF6                   MOV.L       @R15+,R14
    00000652              L878:                            ; case label 
           lex.c   278                case 'a':  return '\a';
    00000652 E007                   MOV         #7,R0
    00000654 000B                   RTS
    00000656 6EF6                   MOV.L       @R15+,R14
    00000658              L879:                            ; case label 
           lex.c   279                case 'b':  return '\b';
    00000658 E008                   MOV         #8,R0
    0000065A 000B                   RTS
    0000065C 6EF6                   MOV.L       @R15+,R14
    0000065E              L880:                            ; case label 
           lex.c   280                case 'f':  return '\f';
    0000065E E00C                   MOV         #12,R0
    00000660 000B                   RTS
    00000662 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000664              L881:                            ; case label 
           lex.c   281                case 'n':  return '\n';
    00000664 E00A                   MOV         #10,R0
    00000666 000B                   RTS
    00000668 6EF6                   MOV.L       @R15+,R14
    0000066A              L882:                            ; case label 
           lex.c   282                case 'r':  return '\r';
    0000066A E00D                   MOV         #13,R0
    0000066C 000B                   RTS
    0000066E 6EF6                   MOV.L       @R15+,R14
    00000670              L883:                            ; case label 
           lex.c   283                case 't':  return '\t';
    00000670 E009                   MOV         #9,R0
    00000672 000B                   RTS
    00000674 6EF6                   MOV.L       @R15+,R14
    00000676              L884:                            ; case label 
           lex.c   284                case 'v':  return '\v';
    00000676 E00B                   MOV         #11,R0
    00000678 000B                   RTS
    0000067A 6EF6                   MOV.L       @R15+,R14
    0000067C              L885:                            ; case label 
           lex.c   285                case '0': case '1': case '2': case '3': return LexUnEscapeCharacterConstant(From, End, ThisCha
                         +r, 8);
    0000067C              L886:                            ; case label 
    0000067C              L887:                            ; case label 
    0000067C              L888:                            ; case label 
    0000067C E708                   MOV         #8,R7
    0000067E 66E3                   MOV         R14,R6
    00000680 AF2A                   BRA         _LexUnEscapeCharacterConstant
    00000682 6EF6                   MOV.L       @R15+,R14
    00000684              L889:                            ; case label 
           lex.c   286                case 'x': return LexUnEscapeCharacterConstant(From, End, '0', 16);
    00000684 E710                   MOV         #16,R7
    00000686 E630                   MOV         #48,R6
    00000688 AF26                   BRA         _LexUnEscapeCharacterConstant
    0000068A 6EF6                   MOV.L       @R15+,R14
    0000068C              L890:                            ; default label 
           lex.c   287                default:   return ThisChar;
    0000068C 60E3                   MOV         R14,R0
    0000068E 000B                   RTS
    00000690 6EF6                   MOV.L       @R15+,R14
    00000692              L1063:                            
           lex.c   288            }
           lex.c   289        }
           lex.c   290        else
           lex.c   291            return *(*From)++;
    00000692 6042                   MOV.L       @R4,R0
    00000694 7001                   ADD         #1,R0
    00000696 2402                   MOV.L       R0,@R4
    00000698 70FF                   ADD         #-1,R0
    0000069A 6000                   MOV.B       @R0,R0
           lex.c   292    }
    0000069C              L1062:                            
    0000069C 000B                   RTS
    0000069E 6EF6                   MOV.L       @R15+,R14
           lex.c   293    
           lex.c   294    /* get a string constant - used while scanning */




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   295    enum LexToken LexGetStringConstant(struct LexState *Lexer, struct Value *Value, char EndChar)
    000006A0              _LexGetStringConstant:           ; function: LexGetStringConstant
                                                           ; frame size=40
    000006A0 2FE6                   MOV.L       R14,@-R15
    000006A2 6E43                   MOV         R4,R14
    000006A4 2FD6                   MOV.L       R13,@-R15
           lex.c   296    {
           lex.c   297        int Escape = FALSE;
    000006A6 E400                   MOV         #0,R4
    000006A8 2FC6                   MOV.L       R12,@-R15
    000006AA 2FB6                   MOV.L       R11,@-R15
    000006AC 2FA6                   MOV.L       R10,@-R15
    000006AE 2F96                   MOV.L       R9,@-R15
    000006B0 2F86                   MOV.L       R8,@-R15
    000006B2 6863                   MOV         R6,R8
    000006B4 4F22                   STS.L       PR,@-R15
    000006B6 7FFC                   ADD         #-4,R15
    000006B8 2F52                   MOV.L       R5,@R15
    000006BA 6543                   MOV         R4,R5
           lex.c   298        const char *StartPos = Lexer->Pos;
    000006BC 69E2                   MOV.L       @R14,R9
           lex.c   299        const char *EndPos;
           lex.c   300        char *EscBuf;
           lex.c   301        char *EscBufPos;
           lex.c   302        char *RegString;
           lex.c   303        struct Value *ArrayValue;
           lex.c   304        
           lex.c   305        while (Lexer->Pos != Lexer->End && (*Lexer->Pos != EndChar || Escape))
    000006BE A02E                   BRA         L1067
    000006C0 EC01                   MOV         #1,R12
    000006C2              L1068:                            
           lex.c   306        { 
           lex.c   307            /* find the end */
           lex.c   308            if (Escape)
    000006C2 2558                   TST         R5,R5
    000006C4 8920                   BT          L1069
           lex.c   309            {
           lex.c   310                if (*Lexer->Pos == '\r' && Lexer->Pos+1 != Lexer->End)
    000006C6 65E2                   MOV.L       @R14,R5
    000006C8 6050                   MOV.B       @R5,R0
    000006CA 880D                   CMP/EQ      #13,R0
    000006CC 8B07                   BF          L1070
    000006CE 6253                   MOV         R5,R2
    000006D0 53E1                   MOV.L       @(4,R14),R3
    000006D2 7201                   ADD         #1,R2
    000006D4 3230                   CMP/EQ      R3,R2
    000006D6 8902                   BT          L1070
           lex.c   311                    Lexer->Pos++;
    000006D8 61E2                   MOV.L       @R14,R1
    000006DA 7101                   ADD         #1,R1
    000006DC 2E12                   MOV.L       R1,@R14
    000006DE              L1070:                            
           lex.c   312                
           lex.c   313                if (*Lexer->Pos == '\n' && Lexer->Pos+1 != Lexer->End)
    000006DE 65E2                   MOV.L       @R14,R5
    000006E0 6050                   MOV.B       @R5,R0
    000006E2 880A                   CMP/EQ      #10,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006E4 8B0E                   BF          L1071
    000006E6 6253                   MOV         R5,R2
    000006E8 53E1                   MOV.L       @(4,R14),R3
    000006EA 7201                   ADD         #1,R2
    000006EC 3230                   CMP/EQ      R3,R2
    000006EE 8909                   BT          L1071
           lex.c   314                {
           lex.c   315                    Lexer->Line++;
    000006F0 51E3                   MOV.L       @(12,R14),R1
    000006F2 7101                   ADD         #1,R1
    000006F4 1E13                   MOV.L       R1,@(12,R14)
           lex.c   316                    Lexer->Pos++;
    000006F6 63E2                   MOV.L       @R14,R3
    000006F8 7301                   ADD         #1,R3
    000006FA 2E32                   MOV.L       R3,@R14
           lex.c   317                    Lexer->CharacterPos = 0;
    000006FC 1E44                   MOV.L       R4,@(16,R14)
           lex.c   318                    Lexer->EmitExtraNewlines++;
    000006FE 52E7                   MOV.L       @(28,R14),R2
    00000700 7201                   ADD         #1,R2
    00000702 1E27                   MOV.L       R2,@(28,R14)
    00000704              L1071:                            
           lex.c   319                }
           lex.c   320                
           lex.c   321                Escape = FALSE;
    00000704 A005                   BRA         L1072
    00000706 6543                   MOV         R4,R5
    00000708              L1069:                            
           lex.c   322            }
           lex.c   323            else if (*Lexer->Pos == '\\')
    00000708 60E2                   MOV.L       @R14,R0
    0000070A 6000                   MOV.B       @R0,R0
    0000070C 885C                   CMP/EQ      #92,R0
    0000070E 8B00                   BF          L1072
           lex.c   324                Escape = TRUE;
    00000710 65C3                   MOV         R12,R5
    00000712              L1072:                            
           lex.c   325                
           lex.c   326            LEXER_INC(Lexer);
    00000712 62E2                   MOV.L       @R14,R2
    00000714 7201                   ADD         #1,R2
    00000716 2E22                   MOV.L       R2,@R14
    00000718 53E4                   MOV.L       @(16,R14),R3
    0000071A 7301                   ADD         #1,R3
    0000071C 1E34                   MOV.L       R3,@(16,R14)
    0000071E              L1067:                            
    0000071E 66E2                   MOV.L       @R14,R6
    00000720 52E1                   MOV.L       @(4,R14),R2
    00000722 3620                   CMP/EQ      R2,R6
    00000724 8905                   BT          L1074
    00000726 638E                   EXTS.B      R8,R3
    00000728 6160                   MOV.B       @R6,R1
    0000072A 3130                   CMP/EQ      R3,R1
    0000072C 8BC9                   BF          L1068
    0000072E 2558                   TST         R5,R5
    00000730 8BC7                   BF          L1068
    00000732              L1074:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   327        }
           lex.c   328        EndPos = Lexer->Pos;
    00000732 6DE2                   MOV.L       @R14,R13
           lex.c   329        
           lex.c   330        EscBuf = HeapAllocStack(EndPos - StartPos);
    00000734 D207                   MOV.L       L1309,R2   ; _HeapAllocStack
    00000736 64D3                   MOV         R13,R4
    00000738 420B                   JSR         @R2
    0000073A 3498                   SUB         R9,R4
    0000073C 6B03                   MOV         R0,R11
           lex.c   331    
           lex.c   332        if (EscBuf == NULL)
    0000073E 2BB8                   TST         R11,R11
    00000740 8B05                   BF          L1075
           lex.c   333            LexFail(Lexer, "out of memory");
    00000742 D205                   MOV.L       L1309+4,R2 ; L604
    00000744 D305                   MOV.L       L1309+8,R3 ; _LexFail
    00000746 2F26                   MOV.L       R2,@-R15
    00000748 430B                   JSR         @R3
    0000074A 64E3                   MOV         R14,R4
    0000074C 7F04                   ADD         #4,R15
    0000074E              L1075:                            
           lex.c   334    
           lex.c   335        for (EscBufPos = EscBuf, Lexer->Pos = StartPos; Lexer->Pos != EndPos;)
    0000074E 6AB3                   MOV         R11,R10
    00000750 A00D                   BRA         L1076
    00000752 2E92                   MOV.L       R9,@R14
    00000754              L1309:                            
    00000754 <00000000>             .DATA.L     _HeapAllocStack
    00000758 <00000000>             .DATA.L     L604
    0000075C <00000000>             .DATA.L     _LexFail
    00000760              L1077:                            
           lex.c   336            *EscBufPos++ = LexUnEscapeCharacter(&Lexer->Pos, EndPos);
    00000760 2FA6                   MOV.L       R10,@-R15
    00000762 65D3                   MOV         R13,R5
    00000764 7A01                   ADD         #1,R10
    00000766 BF07                   BSR         _LexUnEscapeCharacter
    00000768 64E3                   MOV         R14,R4
    0000076A 61F6                   MOV.L       @R15+,R1
    0000076C 2100                   MOV.B       R0,@R1
    0000076E              L1076:                            
    0000076E 63E2                   MOV.L       @R14,R3
    00000770 33D0                   CMP/EQ      R13,R3
    00000772 8BF5                   BF          L1077
           lex.c   337        
           lex.c   338        /* try to find an existing copy of this string literal */
           lex.c   339        RegString = TableStrRegister2(EscBuf, EscBufPos - EscBuf);
    00000774 D380                   MOV.L       L1310+2,R3 ; _TableStrRegister2
    00000776 65A3                   MOV         R10,R5
    00000778 35B8                   SUB         R11,R5
    0000077A 430B                   JSR         @R3
    0000077C 64B3                   MOV         R11,R4
    0000077E 6A03                   MOV         R0,R10
           lex.c   340        HeapPopStack(EscBuf, EndPos - StartPos);
    00000780 D27E                   MOV.L       L1310+6,R2 ; _HeapPopStack
    00000782 65D3                   MOV         R13,R5
    00000784 3598                   SUB         R9,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000786 420B                   JSR         @R2
    00000788 64B3                   MOV         R11,R4
           lex.c   341        ArrayValue = VariableStringLiteralGet(RegString);
    0000078A D37D                   MOV.L       L1310+10,R3; _VariableStringLiteralGet
    0000078C 430B                   JSR         @R3
    0000078E 64A3                   MOV         R10,R4
    00000790 6403                   MOV         R0,R4
           lex.c   342        if (ArrayValue == NULL)
    00000792 2448                   TST         R4,R4
    00000794 8B0F                   BF          L1078
           lex.c   343        {
           lex.c   344            /* create and store this string literal */
           lex.c   345            ArrayValue = VariableAllocValueAndData(NULL, 0, FALSE, NULL, TRUE);
    00000796 E700                   MOV         #0,R7
    00000798 D37A                   MOV.L       L1310+14,R3; _VariableAllocValueAndData
    0000079A 6673                   MOV         R7,R6
    0000079C 2FC6                   MOV.L       R12,@-R15
    0000079E 6573                   MOV         R7,R5
    000007A0 430B                   JSR         @R3
    000007A2 6473                   MOV         R7,R4
           lex.c   346            ArrayValue->Typ = CharArrayType;
    000007A4 D378                   MOV.L       L1310+18,R3; _CharArrayType
    000007A6 7F04                   ADD         #4,R15
    000007A8 6232                   MOV.L       @R3,R2
    000007AA 6503                   MOV         R0,R5
    000007AC 2522                   MOV.L       R2,@R5
           lex.c   347            ArrayValue->Val = (union AnyValue *)RegString;
    000007AE 15A1                   MOV.L       R10,@(4,R5)
           lex.c   348            VariableStringLiteralDefine(RegString, ArrayValue);
    000007B0 D276                   MOV.L       L1310+22,R2; _VariableStringLiteralDefine
    000007B2 420B                   JSR         @R2
    000007B4 64A3                   MOV         R10,R4
    000007B6              L1078:                            
           lex.c   349        }
           lex.c   350    
           lex.c   351        /* create the the pointer for this char* */
           lex.c   352        Value->Typ = CharPtrType;
           lex.c   353        Value->Val->Pointer = RegString;
           lex.c   354        if (*Lexer->Pos == EndChar)
    000007B6 688E                   EXTS.B      R8,R8
    000007B8 63F2                   MOV.L       @R15,R3
    000007BA D175                   MOV.L       L1310+26,R1; _CharPtrType
    000007BC 6212                   MOV.L       @R1,R2
    000007BE 2322                   MOV.L       R2,@R3
    000007C0 63F2                   MOV.L       @R15,R3
    000007C2 5231                   MOV.L       @(4,R3),R2
    000007C4 22A2                   MOV.L       R10,@R2
    000007C6 63E2                   MOV.L       @R14,R3
    000007C8 6230                   MOV.B       @R3,R2
    000007CA 3280                   CMP/EQ      R8,R2
    000007CC 8F06                   BF/S        L1079
           lex.c   355            LEXER_INC(Lexer);
           lex.c   356        
           lex.c   357        return TokenStringConstant;
    000007CE E030                   MOV         #48,R0
    000007D0 62E2                   MOV.L       @R14,R2
    000007D2 7201                   ADD         #1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007D4 2E22                   MOV.L       R2,@R14
    000007D6 53E4                   MOV.L       @(16,R14),R3
    000007D8 7301                   ADD         #1,R3
    000007DA 1E34                   MOV.L       R3,@(16,R14)
    000007DC              L1079:                            
           lex.c   358    }
    000007DC 7F04                   ADD         #4,R15
    000007DE 4F26                   LDS.L       @R15+,PR
    000007E0 68F6                   MOV.L       @R15+,R8
    000007E2 69F6                   MOV.L       @R15+,R9
    000007E4 6AF6                   MOV.L       @R15+,R10
    000007E6 6BF6                   MOV.L       @R15+,R11
    000007E8 6CF6                   MOV.L       @R15+,R12
    000007EA 6DF6                   MOV.L       @R15+,R13
    000007EC 000B                   RTS
    000007EE 6EF6                   MOV.L       @R15+,R14
           lex.c   359    
           lex.c   360    /* get a character constant - used while scanning */
           lex.c   361    enum LexToken LexGetCharacterConstant(struct LexState *Lexer, struct Value *Value)
    000007F0              _LexGetCharacterConstant:        ; function: LexGetCharacterConstant
                                                           ; frame size=20
    000007F0 2FE6                   MOV.L       R14,@-R15
           lex.c   362    {
           lex.c   363        Value->Typ = &CharType;
    000007F2 6353                   MOV         R5,R3
    000007F4 D267                   MOV.L       L1310+30,R2; _CharType
    000007F6 6E43                   MOV         R4,R14
    000007F8 2F86                   MOV.L       R8,@-R15
    000007FA 4F22                   STS.L       PR,@-R15
    000007FC 7FFC                   ADD         #-4,R15
    000007FE 2F52                   MOV.L       R5,@R15
    00000800 2322                   MOV.L       R2,@R3
           lex.c   364        Value->Val->Character = LexUnEscapeCharacter(&Lexer->Pos, Lexer->End);
    00000802 63F2                   MOV.L       @R15,R3
    00000804 55E1                   MOV.L       @(4,R14),R5
    00000806 5831                   MOV.L       @(4,R3),R8
    00000808 BEB6                   BSR         _LexUnEscapeCharacter
    0000080A 64E3                   MOV         R14,R4
    0000080C 2800                   MOV.B       R0,@R8
           lex.c   365        if (Lexer->Pos != Lexer->End && *Lexer->Pos != '\'')
    0000080E 64E2                   MOV.L       @R14,R4
    00000810 53E1                   MOV.L       @(4,R14),R3
    00000812 3430                   CMP/EQ      R3,R4
    00000814 8908                   BT          L1081
    00000816 6040                   MOV.B       @R4,R0
    00000818 8827                   CMP/EQ      #39,R0
    0000081A 8905                   BT          L1081
           lex.c   366            LexFail(Lexer, "expected \"'\"");
    0000081C D25E                   MOV.L       L1310+34,R2; L610
    0000081E 2F26                   MOV.L       R2,@-R15
    00000820 D35E                   MOV.L       L1310+38,R3; _LexFail
    00000822 430B                   JSR         @R3
    00000824 64E3                   MOV         R14,R4
    00000826 7F04                   ADD         #4,R15
    00000828              L1081:                            
           lex.c   367            
           lex.c   368        LEXER_INC(Lexer);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000828 62E2                   MOV.L       @R14,R2
           lex.c   369        return TokenCharacterConstant;
    0000082A E031                   MOV         #49,R0
    0000082C 7201                   ADD         #1,R2
    0000082E 2E22                   MOV.L       R2,@R14
    00000830 53E4                   MOV.L       @(16,R14),R3
    00000832 7301                   ADD         #1,R3
    00000834 1E34                   MOV.L       R3,@(16,R14)
           lex.c   370    }
    00000836 7F04                   ADD         #4,R15
    00000838 4F26                   LDS.L       @R15+,PR
    0000083A 68F6                   MOV.L       @R15+,R8
    0000083C 000B                   RTS
    0000083E 6EF6                   MOV.L       @R15+,R14
           lex.c   371    
           lex.c   372    /* skip a comment - used while scanning */
           lex.c   373    void LexSkipComment(struct LexState *Lexer, char NextChar, enum LexToken *ReturnToken)
    00000840              _LexSkipComment:                 ; function: LexSkipComment
                                                           ; frame size=0
           lex.c   374    {
           lex.c   375        if (NextChar == '*')
    00000840 605E                   EXTS.B      R5,R0
    00000842 882A                   CMP/EQ      #42,R0
    00000844 8B2D                   BF          L1090
           lex.c   376        {   
           lex.c   377            /* conventional C comment */
           lex.c   378            while (Lexer->Pos != Lexer->End && (*(Lexer->Pos-1) != '*' || *Lexer->Pos != '/'))
    00000846 A00D                   BRA         L1084
    00000848 0009                   NOP
    0000084A              L1085:                            
           lex.c   379            {
           lex.c   380                if (*Lexer->Pos == '\n')
    0000084A 6042                   MOV.L       @R4,R0
    0000084C 6000                   MOV.B       @R0,R0
    0000084E 880A                   CMP/EQ      #10,R0
    00000850 8B02                   BF          L1086
           lex.c   381                    Lexer->EmitExtraNewlines++;
    00000852 5247                   MOV.L       @(28,R4),R2
    00000854 7201                   ADD         #1,R2
    00000856 1427                   MOV.L       R2,@(28,R4)
    00000858              L1086:                            
           lex.c   382    
           lex.c   383                LEXER_INC(Lexer);
    00000858 6342                   MOV.L       @R4,R3
    0000085A 7301                   ADD         #1,R3
    0000085C 2432                   MOV.L       R3,@R4
    0000085E 5244                   MOV.L       @(16,R4),R2
    00000860 7201                   ADD         #1,R2
    00000862 1424                   MOV.L       R2,@(16,R4)
    00000864              L1084:                            
    00000864 6542                   MOV.L       @R4,R5
    00000866 5341                   MOV.L       @(4,R4),R3
    00000868 3530                   CMP/EQ      R3,R5
    0000086A 8907                   BT          L1087
    0000086C 6053                   MOV         R5,R0
    0000086E 70FF                   ADD         #-1,R0
    00000870 6000                   MOV.B       @R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000872 882A                   CMP/EQ      #42,R0
    00000874 8BE9                   BF          L1085
    00000876 6050                   MOV.B       @R5,R0
    00000878 882F                   CMP/EQ      #47,R0
    0000087A 8BE6                   BF          L1085
    0000087C              L1087:                            
           lex.c   384            }
           lex.c   385            
           lex.c   386            if (Lexer->Pos != Lexer->End)
    0000087C 5241                   MOV.L       @(4,R4),R2
    0000087E 6342                   MOV.L       @R4,R3
    00000880 3320                   CMP/EQ      R2,R3
    00000882 8D06                   BT/S        L1088
           lex.c   387                LEXER_INC(Lexer);
           lex.c   388            
           lex.c   389            Lexer->Mode = LexModeNormal;
    00000884 E200                   MOV         #0,R2
    00000886 6042                   MOV.L       @R4,R0
    00000888 7001                   ADD         #1,R0
    0000088A 2402                   MOV.L       R0,@R4
    0000088C 5344                   MOV.L       @(16,R4),R3
    0000088E 7301                   ADD         #1,R3
    00000890 1434                   MOV.L       R3,@(16,R4)
    00000892              L1088:                            
    00000892 A00D                   BRA         L1089
    00000894 1426                   MOV.L       R2,@(24,R4)
    00000896              L1091:                            
           lex.c   390        }
           lex.c   391        else
           lex.c   392        {   
           lex.c   393            /* C++ style comment */
           lex.c   394            while (Lexer->Pos != Lexer->End && *Lexer->Pos != '\n')
           lex.c   395                LEXER_INC(Lexer);
    00000896 6342                   MOV.L       @R4,R3
    00000898 7301                   ADD         #1,R3
    0000089A 2432                   MOV.L       R3,@R4
    0000089C 5244                   MOV.L       @(16,R4),R2
    0000089E 7201                   ADD         #1,R2
    000008A0 1424                   MOV.L       R2,@(16,R4)
    000008A2              L1090:                            
    000008A2 6542                   MOV.L       @R4,R5
    000008A4 5341                   MOV.L       @(4,R4),R3
    000008A6 3530                   CMP/EQ      R3,R5
    000008A8 8902                   BT          L1089
    000008AA 6050                   MOV.B       @R5,R0
    000008AC 880A                   CMP/EQ      #10,R0
    000008AE 8BF2                   BF          L1091
    000008B0              L1089:                            
           lex.c   396        }
           lex.c   397    }
    000008B0 000B                   RTS
    000008B2 0009                   NOP
           lex.c   398    
           lex.c   399    /* get a single token from the source - used while scanning */
           lex.c   400    enum LexToken LexScanGetToken(struct LexState *Lexer, struct Value **Value)
    000008B4              _LexScanGetToken:                ; function: LexScanGetToken
                                                           ; frame size=40




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008B4 2FE6                   MOV.L       R14,@-R15
    000008B6 6E43                   MOV         R4,R14
    000008B8 2FD6                   MOV.L       R13,@-R15
    000008BA 2FC6                   MOV.L       R12,@-R15
    000008BC 2FB6                   MOV.L       R11,@-R15
           lex.c   401    {
           lex.c   402        char ThisChar;
           lex.c   403        char NextChar;
           lex.c   404        enum LexToken GotToken = TokenNone;
    000008BE EC00                   MOV         #0,R12
    000008C0 2FA6                   MOV.L       R10,@-R15
    000008C2 2F96                   MOV.L       R9,@-R15
    000008C4 4F22                   STS.L       PR,@-R15
    000008C6 7FFC                   ADD         #-4,R15
    000008C8 2FC2                   MOV.L       R12,@R15
           lex.c   405        
           lex.c   406        /* handle cases line multi-line comments or string constants which mess up the line count */
           lex.c   407        if (Lexer->EmitExtraNewlines > 0)
    000008CA 53E7                   MOV.L       @(28,R14),R3
    000008CC 4315                   CMP/PL      R3
    000008CE 8F04                   BF/S        L1095
    000008D0 6B53                   MOV         R5,R11
           lex.c   408        {
           lex.c   409            Lexer->EmitExtraNewlines--;
    000008D2 51E7                   MOV.L       @(28,R14),R1
    000008D4 71FF                   ADD         #-1,R1
    000008D6 A00F                   BRA         L823
    000008D8 1E17                   MOV.L       R1,@(28,R14)
    000008DA              L1095:                            
           lex.c   410            return TokenEndOfLine;
           lex.c   411        }
           lex.c   412        
           lex.c   413        /* scan for a token */
           lex.c   414        do
           lex.c   415        {
           lex.c   416            *Value = &LexValue;
    000008DA D231                   MOV.L       L1310+42,R2; __$LexValue
           lex.c   417            while (Lexer->Pos != Lexer->End && isspace((int)*Lexer->Pos))
    000008DC A021                   BRA         L1096
    000008DE 2B22                   MOV.L       R2,@R11
    000008E0              L1097:                            
           lex.c   418            {
           lex.c   419                if (*Lexer->Pos == '\n')
    000008E0 60E2                   MOV.L       @R14,R0
    000008E2 6000                   MOV.B       @R0,R0
    000008E4 880A                   CMP/EQ      #10,R0
    000008E6 8B09                   BF          L1098
           lex.c   420                {
           lex.c   421                    Lexer->Line++;
    000008E8 52E3                   MOV.L       @(12,R14),R2
    000008EA 7201                   ADD         #1,R2
    000008EC 1E23                   MOV.L       R2,@(12,R14)
           lex.c   422                    Lexer->Pos++;
    000008EE 63E2                   MOV.L       @R14,R3
    000008F0 7301                   ADD         #1,R3
    000008F2 2E32                   MOV.L       R3,@R14
           lex.c   423                    Lexer->Mode = LexModeNormal;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008F4 1EC6                   MOV.L       R12,@(24,R14)
           lex.c   424                    Lexer->CharacterPos = 0;
    000008F6 1EC4                   MOV.L       R12,@(16,R14)
    000008F8              L823:
           lex.c   425                    return TokenEndOfLine;
    000008F8 A23C                   BRA         L1094
    000008FA E05E                   MOV         #94,R0
    000008FC              L1098:                            
           lex.c   426                }
           lex.c   427                else if (Lexer->Mode == LexModeHashDefine || Lexer->Mode == LexModeHashDefineSpace)
    000008FC 50E6                   MOV.L       @(24,R14),R0
    000008FE 8802                   CMP/EQ      #2,R0
    00000900 8D03                   BT/S        L1101
    00000902 6503                   MOV         R0,R5
    00000904 6053                   MOV         R5,R0
    00000906 8803                   CMP/EQ      #3,R0
    00000908 8B01                   BF          L1100
    0000090A              L1101:                            
           lex.c   428                    Lexer->Mode = LexModeHashDefineSpace;
    0000090A A004                   BRA         L1099
    0000090C 1E46                   MOV.L       R4,@(24,R14)
    0000090E              L1100:                            
           lex.c   429                
           lex.c   430                else if (Lexer->Mode == LexModeHashDefineSpaceIdent)
    0000090E 50E6                   MOV.L       @(24,R14),R0
    00000910 8804                   CMP/EQ      #4,R0
    00000912 8B00                   BF          L1099
           lex.c   431                    Lexer->Mode = LexModeNormal;
    00000914 1EC6                   MOV.L       R12,@(24,R14)
    00000916              L1099:                            
           lex.c   432        
           lex.c   433                LEXER_INC(Lexer);
    00000916 63E2                   MOV.L       @R14,R3
    00000918 7301                   ADD         #1,R3
    0000091A 2E32                   MOV.L       R3,@R14
    0000091C 52E4                   MOV.L       @(16,R14),R2
    0000091E 7201                   ADD         #1,R2
    00000920 1E24                   MOV.L       R2,@(16,R14)
    00000922              L1096:                            
    00000922 65E2                   MOV.L       @R14,R5
    00000924 53E1                   MOV.L       @(4,R14),R3
    00000926 3530                   CMP/EQ      R3,R5
    00000928 8D07                   BT/S        L1104
    0000092A E403                   MOV         #3,R4
    0000092C 6050                   MOV.B       @R5,R0
    0000092E 600C                   EXTU.B      R0,R0
    00000930 D11C                   MOV.L       L1310+46,R1; __ctype
    00000932 001C                   MOV.B       @(R0,R1),R0
    00000934 600C                   EXTU.B      R0,R0
    00000936 C840                   TST         #64,R0
    00000938 8BD2                   BF          L1097
    0000093A              L1104:                            
           lex.c   434            }
           lex.c   435            
           lex.c   436            if (Lexer->Pos == Lexer->End || *Lexer->Pos == '\0')
    0000093A 65E2                   MOV.L       @R14,R5
    0000093C 52E1                   MOV.L       @(4,R14),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000093E 3520                   CMP/EQ      R2,R5
    00000940 8902                   BT          L1106
    00000942 6150                   MOV.B       @R5,R1
    00000944 2118                   TST         R1,R1
    00000946 8B01                   BF          L1105
    00000948              L1106:                            
           lex.c   437                return TokenEOF;
    00000948 A214                   BRA         L1094
    0000094A E05D                   MOV         #93,R0
    0000094C              L1105:                            
           lex.c   438            
           lex.c   439            ThisChar = *Lexer->Pos;
    0000094C 65E2                   MOV.L       @R14,R5
    0000094E 6550                   MOV.B       @R5,R5
    00000950 D614                   MOV.L       L1310+46,R6; __ctype
    00000952 6A5E                   EXTS.B      R5,R10
    00000954 6763                   MOV         R6,R7
    00000956 60AC                   EXTU.B      R10,R0
    00000958 037C                   MOV.B       @(R0,R7),R3
    0000095A 633C                   EXTU.B      R3,R3
    0000095C 2348                   TST         R4,R3
    0000095E 8B05                   BF          L1108
    00000960 60A3                   MOV         R10,R0
    00000962 885F                   CMP/EQ      #95,R0
    00000964 8902                   BT          L1108
    00000966 60A3                   MOV         R10,R0
    00000968 8823                   CMP/EQ      #35,R0
    0000096A 8B1D                   BF          L1107
    0000096C              L1108:                            
           lex.c   440            if (isCidstart((int)ThisChar))
           lex.c   441                return LexGetWord(Lexer, *Value);
    0000096C 65B2                   MOV.L       @R11,R5
    0000096E BD6F                   BSR         _LexGetWord
    00000970 64E3                   MOV         R14,R4
    00000972 A1FF                   BRA         L1094
    00000974 0009                   NOP
    00000976              L1310:                            
    00000976 0000                   .DATA.W     0
    00000978 <00000000>             .DATA.L     _TableStrRegister2
    0000097C <00000000>             .DATA.L     _HeapPopStack
    00000980 <00000000>             .DATA.L     _VariableStringLiteralGet
    00000984 <00000000>             .DATA.L     _VariableAllocValueAndData
    00000988 <00000000>             .DATA.L     _CharArrayType
    0000098C <00000000>             .DATA.L     _VariableStringLiteralDefine
    00000990 <00000000>             .DATA.L     _CharPtrType
    00000994 <00000000>             .DATA.L     _CharType
    00000998 <00000000>             .DATA.L     L610
    0000099C <00000000>             .DATA.L     _LexFail
    000009A0 <00000000>             .DATA.L     __$LexValue
    000009A4 <00000000>             .DATA.L     __ctype
    000009A8              L1107:                            
           lex.c   442            
           lex.c   443            if (isdigit((int)ThisChar))
    000009A8 E604                   MOV         #4,R6
    000009AA 605C                   EXTU.B      R5,R0
    000009AC 037C                   MOV.B       @(R0,R7),R3
    000009AE 633C                   EXTU.B      R3,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009B0 2368                   TST         R6,R3
    000009B2 8904                   BT          L1109
           lex.c   444                return LexGetNumber(Lexer, *Value);
    000009B4 65B2                   MOV.L       @R11,R5
    000009B6 BB4D                   BSR         _LexGetNumber
    000009B8 64E3                   MOV         R14,R4
    000009BA A1DB                   BRA         L1094
    000009BC 0009                   NOP
    000009BE              L1109:                            
           lex.c   445            
           lex.c   446            NextChar = (Lexer->Pos+1 != Lexer->End) ? *(Lexer->Pos+1) : 0;
    000009BE 65E2                   MOV.L       @R14,R5
    000009C0 52E1                   MOV.L       @(4,R14),R2
    000009C2 7501                   ADD         #1,R5
    000009C4 3520                   CMP/EQ      R2,R5
    000009C6 8901                   BT          L1110
    000009C8 A001                   BRA         L1111
    000009CA 6550                   MOV.B       @R5,R5
    000009CC              L1110:                            
    000009CC E500                   MOV         #0,R5
    000009CE              L1111:                            
    000009CE 60A3                   MOV         R10,R0
           lex.c   447            LEXER_INC(Lexer);
    000009D0 63E2                   MOV.L       @R14,R3
    000009D2 8822                   CMP/EQ      #34,R0
    000009D4 7301                   ADD         #1,R3
    000009D6 2E32                   MOV.L       R3,@R14
    000009D8 52E4                   MOV.L       @(16,R14),R2
    000009DA 7201                   ADD         #1,R2
    000009DC 1E24                   MOV.L       R2,@(16,R14)
    000009DE 8D60                   BT/S        L893
    000009E0 6D5E                   EXTS.B      R5,R13
    000009E2 8827                   CMP/EQ      #39,R0
    000009E4 8963                   BT          L894
    000009E6 8828                   CMP/EQ      #40,R0
    000009E8 8966                   BT          L895
    000009EA 8829                   CMP/EQ      #41,R0
    000009EC 8B01                   BF          L1311
    000009EE A06C                   BRA         L896
    000009F0 0009                   NOP
    000009F2              L1311:                            
    000009F2 883D                   CMP/EQ      #61,R0
    000009F4 896B                   BT          L897
    000009F6 882B                   CMP/EQ      #43,R0
    000009F8 8B01                   BF          L1312
    000009FA A076                   BRA         L898
    000009FC 0009                   NOP
    000009FE              L1312:                            
    000009FE 882D                   CMP/EQ      #45,R0
    00000A00 8B01                   BF          L1313
    00000A02 A089                   BRA         L899
    00000A04 0009                   NOP
    00000A06              L1313:                            
    00000A06 882A                   CMP/EQ      #42,R0
    00000A08 8B01                   BF          L1314
    00000A0A A0A8                   BRA         L900
    00000A0C 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A0E              L1314:                            
    00000A0E 882F                   CMP/EQ      #47,R0
    00000A10 8B01                   BF          L1315
    00000A12 A0B2                   BRA         L901
    00000A14 0009                   NOP
    00000A16              L1315:                            
    00000A16 8825                   CMP/EQ      #37,R0
    00000A18 8B01                   BF          L1316
    00000A1A A0CC                   BRA         L902
    00000A1C 0009                   NOP
    00000A1E              L1316:                            
    00000A1E 883C                   CMP/EQ      #60,R0
    00000A20 8B01                   BF          L1317
    00000A22 A0D6                   BRA         L903
    00000A24 0009                   NOP
    00000A26              L1317:                            
    00000A26 883E                   CMP/EQ      #62,R0
    00000A28 8B01                   BF          L1318
    00000A2A A100                   BRA         L904
    00000A2C 0009                   NOP
    00000A2E              L1318:                            
    00000A2E 883B                   CMP/EQ      #59,R0
    00000A30 8B01                   BF          L1319
    00000A32 A121                   BRA         L905
    00000A34 0009                   NOP
    00000A36              L1319:                            
    00000A36 8826                   CMP/EQ      #38,R0
    00000A38 8B01                   BF          L1320
    00000A3A A11F                   BRA         L906
    00000A3C 0009                   NOP
    00000A3E              L1320:                            
    00000A3E 887C                   CMP/EQ      #124,R0
    00000A40 8B01                   BF          L1321
    00000A42 A133                   BRA         L907
    00000A44 0009                   NOP
    00000A46              L1321:                            
    00000A46 887B                   CMP/EQ      #123,R0
    00000A48 8B01                   BF          L1322
    00000A4A A147                   BRA         L908
    00000A4C 0009                   NOP
    00000A4E              L1322:                            
    00000A4E 887D                   CMP/EQ      #125,R0
    00000A50 8B01                   BF          L1323
    00000A52 A145                   BRA         L909
    00000A54 0009                   NOP
    00000A56              L1323:                            
    00000A56 885B                   CMP/EQ      #91,R0
    00000A58 8B01                   BF          L1324
    00000A5A A143                   BRA         L910
    00000A5C 0009                   NOP
    00000A5E              L1324:                            
    00000A5E 885D                   CMP/EQ      #93,R0
    00000A60 8B01                   BF          L1325
    00000A62 A141                   BRA         L911
    00000A64 0009                   NOP
    00000A66              L1325:                            
    00000A66 8821                   CMP/EQ      #33,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A68 8B01                   BF          L1326
    00000A6A A13F                   BRA         L912
    00000A6C 0009                   NOP
    00000A6E              L1326:                            
    00000A6E 885E                   CMP/EQ      #94,R0
    00000A70 8B01                   BF          L1327
    00000A72 A149                   BRA         L913
    00000A74 0009                   NOP
    00000A76              L1327:                            
    00000A76 887E                   CMP/EQ      #126,R0
    00000A78 8B01                   BF          L1328
    00000A7A A153                   BRA         L914
    00000A7C 0009                   NOP
    00000A7E              L1328:                            
    00000A7E 882C                   CMP/EQ      #44,R0
    00000A80 8B01                   BF          L1329
    00000A82 A151                   BRA         L915
    00000A84 0009                   NOP
    00000A86              L1329:                            
    00000A86 882E                   CMP/EQ      #46,R0
    00000A88 8B01                   BF          L1330
    00000A8A A14F                   BRA         L916
    00000A8C 0009                   NOP
    00000A8E              L1330:                            
    00000A8E 883F                   CMP/EQ      #63,R0
    00000A90 8B01                   BF          L1331
    00000A92 A15D                   BRA         L917
    00000A94 0009                   NOP
    00000A96              L1331:                            
    00000A96 883A                   CMP/EQ      #58,R0
    00000A98 8B01                   BF          L1332
    00000A9A A15B                   BRA         L918
    00000A9C 0009                   NOP
    00000A9E              L1332:                            
    00000A9E A15C                   BRA         L919
    00000AA0 0009                   NOP
    00000AA2              L893:                            ; case label 
           lex.c   448            switch (ThisChar)
           lex.c   449            {
           lex.c   450                case '"': GotToken = LexGetStringConstant(Lexer, *Value, '"'); break;
    00000AA2 E622                   MOV         #34,R6
    00000AA4 65B2                   MOV.L       @R11,R5
    00000AA6 BDFB                   BSR         _LexGetStringConstant
    00000AA8 64E3                   MOV         R14,R4
    00000AAA A099                   BRA         L1279
    00000AAC 0009                   NOP
    00000AAE              L894:                            ; case label 
           lex.c   451                case '\'': GotToken = LexGetCharacterConstant(Lexer, *Value); break;
    00000AAE 65B2                   MOV.L       @R11,R5
    00000AB0 BE9E                   BSR         _LexGetCharacterConstant
    00000AB2 64E3                   MOV         R14,R4
    00000AB4 A094                   BRA         L1279
    00000AB6 0009                   NOP
    00000AB8              L895:                            ; case label 
           lex.c   452                case '(': if (Lexer->Mode == LexModeHashDefineSpaceIdent) GotToken = TokenOpenMacroBracket; el
                         +se GotToken = TokenOpenBracket; Lexer->Mode = LexModeNormal; break;
    00000AB8 50E6                   MOV.L       @(24,R14),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000ABA 8804                   CMP/EQ      #4,R0
    00000ABC 8B01                   BF          L1113
    00000ABE A001                   BRA         L1269
    00000AC0 E45C                   MOV         #92,R4
    00000AC2              L1113:                            
    00000AC2 E42B                   MOV         #43,R4
    00000AC4              L1269:                            
    00000AC4 2F42                   MOV.L       R4,@R15
    00000AC6 A14F                   BRA         L1112
    00000AC8 1EC6                   MOV.L       R12,@(24,R14)
    00000ACA              L896:                            ; case label 
           lex.c   453                case ')': GotToken = TokenCloseBracket; break;
    00000ACA A144                   BRA         L1298
    00000ACC E42C                   MOV         #44,R4
    00000ACE              L897:                            ; case label 
           lex.c   454                case '=': NEXTIS('=', TokenEqual, TokenAssign); break;
    00000ACE 60D3                   MOV         R13,R0
    00000AD0 883D                   CMP/EQ      #61,R0
    00000AD2 8B07                   BF          L1115
    00000AD4 63E2                   MOV.L       @R14,R3
    00000AD6 7301                   ADD         #1,R3
    00000AD8 2E32                   MOV.L       R3,@R14
    00000ADA 52E4                   MOV.L       @(16,R14),R2
    00000ADC 7201                   ADD         #1,R2
    00000ADE 1E24                   MOV.L       R2,@(16,R14)
    00000AE0 A001                   BRA         L1270
    00000AE2 E414                   MOV         #20,R4
    00000AE4              L1115:                            
    00000AE4 E402                   MOV         #2,R4
    00000AE6              L1270:                            
    00000AE6 A13F                   BRA         L1112
    00000AE8 2F42                   MOV.L       R4,@R15
    00000AEA              L898:                            ; case label 
           lex.c   455                case '+': NEXTIS3('=', TokenAddAssign, '+', TokenIncrement, TokenPlus); break;
    00000AEA 60D3                   MOV         R13,R0
    00000AEC 883D                   CMP/EQ      #61,R0
    00000AEE 8B06                   BF          L1117
    00000AF0 63E2                   MOV.L       @R14,R3
    00000AF2 7301                   ADD         #1,R3
    00000AF4 2E32                   MOV.L       R3,@R14
    00000AF6 52E4                   MOV.L       @(16,R14),R2
    00000AF8 7201                   ADD         #1,R2
    00000AFA A12C                   BRA         L1298
    00000AFC 1E24                   MOV.L       R2,@(16,R14)
    00000AFE              L1117:                            
    00000AFE 882B                   CMP/EQ      #43,R0
    00000B00 8B07                   BF          L1119
    00000B02 63E2                   MOV.L       @R14,R3
    00000B04 7301                   ADD         #1,R3
    00000B06 2E32                   MOV.L       R3,@R14
    00000B08 52E4                   MOV.L       @(16,R14),R2
    00000B0A 7201                   ADD         #1,R2
    00000B0C 1E24                   MOV.L       R2,@(16,R14)
    00000B0E A001                   BRA         L1271
    00000B10 E421                   MOV         #33,R4
    00000B12              L1119:                            
    00000B12 E41C                   MOV         #28,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B14              L1271:                            
    00000B14 A128                   BRA         L1112
    00000B16 2F42                   MOV.L       R4,@R15
    00000B18              L899:                            ; case label 
           lex.c   456                case '-': NEXTIS4('=', TokenSubtractAssign, '>', TokenArrow, '-', TokenDecrement, TokenMinus);
                         + break;
    00000B18 60D3                   MOV         R13,R0
    00000B1A 883D                   CMP/EQ      #61,R0
    00000B1C 8B07                   BF          L1121
    00000B1E 63E2                   MOV.L       @R14,R3
    00000B20 7301                   ADD         #1,R3
    00000B22 2E32                   MOV.L       R3,@R14
    00000B24 52E4                   MOV.L       @(16,R14),R2
    00000B26 7201                   ADD         #1,R2
    00000B28 1E24                   MOV.L       R2,@(16,R14)
    00000B2A A11D                   BRA         L1112
    00000B2C 2F62                   MOV.L       R6,@R15
    00000B2E              L1121:                            
    00000B2E 883E                   CMP/EQ      #62,R0
    00000B30 8B07                   BF          L1123
    00000B32 63E2                   MOV.L       @R14,R3
    00000B34 7301                   ADD         #1,R3
    00000B36 2E32                   MOV.L       R3,@R14
    00000B38 52E4                   MOV.L       @(16,R14),R2
    00000B3A 7201                   ADD         #1,R2
    00000B3C 1E24                   MOV.L       R2,@(16,R14)
    00000B3E A10A                   BRA         L1298
    00000B40 E42A                   MOV         #42,R4
    00000B42              L1123:                            
    00000B42 60D3                   MOV         R13,R0
    00000B44 882D                   CMP/EQ      #45,R0
    00000B46 8B07                   BF          L1125
    00000B48 63E2                   MOV.L       @R14,R3
    00000B4A 7301                   ADD         #1,R3
    00000B4C 2E32                   MOV.L       R3,@R14
    00000B4E 52E4                   MOV.L       @(16,R14),R2
    00000B50 7201                   ADD         #1,R2
    00000B52 1E24                   MOV.L       R2,@(16,R14)
    00000B54 A001                   BRA         L1273
    00000B56 E422                   MOV         #34,R4
    00000B58              L1125:                            
    00000B58 E41D                   MOV         #29,R4
    00000B5A              L1273:                            
    00000B5A A105                   BRA         L1112
    00000B5C 2F42                   MOV.L       R4,@R15
    00000B5E              L900:                            ; case label 
           lex.c   457                case '*': NEXTIS('=', TokenMultiplyAssign, TokenAsterisk); break;
    00000B5E 60D3                   MOV         R13,R0
    00000B60 883D                   CMP/EQ      #61,R0
    00000B62 8B07                   BF          L1127
    00000B64 63E2                   MOV.L       @R14,R3
    00000B66 7301                   ADD         #1,R3
    00000B68 2E32                   MOV.L       R3,@R14
    00000B6A 52E4                   MOV.L       @(16,R14),R2
    00000B6C 7201                   ADD         #1,R2
    00000B6E 1E24                   MOV.L       R2,@(16,R14)
    00000B70 A001                   BRA         L1275




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B72 E405                   MOV         #5,R4
    00000B74              L1127:                            
    00000B74 E41E                   MOV         #30,R4
    00000B76              L1275:                            
    00000B76 A0F7                   BRA         L1112
    00000B78 2F42                   MOV.L       R4,@R15
    00000B7A              L901:                            ; case label 
           lex.c   458                case '/': if (NextChar == '/' || NextChar == '*') { LEXER_INC(Lexer); LexSkipComment(Lexer, Ne
                         +xtChar, &GotToken); } else NEXTIS('=', TokenDivideAssign, TokenSlash); break;
    00000B7A 60D3                   MOV         R13,R0
    00000B7C 882F                   CMP/EQ      #47,R0
    00000B7E 8902                   BT          L1130
    00000B80 60D3                   MOV         R13,R0
    00000B82 882A                   CMP/EQ      #42,R0
    00000B84 8B0A                   BF          L1129
    00000B86              L1130:                            
    00000B86 66F3                   MOV         R15,R6
    00000B88 62E2                   MOV.L       @R14,R2
    00000B8A 7201                   ADD         #1,R2
    00000B8C 2E22                   MOV.L       R2,@R14
    00000B8E 53E4                   MOV.L       @(16,R14),R3
    00000B90 7301                   ADD         #1,R3
    00000B92 1E34                   MOV.L       R3,@(16,R14)
    00000B94 BE54                   BSR         _LexSkipComment
    00000B96 64E3                   MOV         R14,R4
    00000B98 A0E6                   BRA         L1112
    00000B9A 0009                   NOP
    00000B9C              L1129:                            
    00000B9C 883D                   CMP/EQ      #61,R0
    00000B9E 8B07                   BF          L1132
    00000BA0 63E2                   MOV.L       @R14,R3
    00000BA2 7301                   ADD         #1,R3
    00000BA4 2E32                   MOV.L       R3,@R14
    00000BA6 52E4                   MOV.L       @(16,R14),R2
    00000BA8 7201                   ADD         #1,R2
    00000BAA 1E24                   MOV.L       R2,@(16,R14)
    00000BAC A001                   BRA         L1276
    00000BAE E406                   MOV         #6,R4
    00000BB0              L1132:                            
    00000BB0 E41F                   MOV         #31,R4
    00000BB2              L1276:                            
    00000BB2 A0D9                   BRA         L1112
    00000BB4 2F42                   MOV.L       R4,@R15
    00000BB6              L902:                            ; case label 
           lex.c   459                case '%': NEXTIS('=', TokenModulusAssign, TokenModulus); break;
    00000BB6 60D3                   MOV         R13,R0
    00000BB8 883D                   CMP/EQ      #61,R0
    00000BBA 8B07                   BF          L1134
    00000BBC 63E2                   MOV.L       @R14,R3
    00000BBE 7301                   ADD         #1,R3
    00000BC0 2E32                   MOV.L       R3,@R14
    00000BC2 52E4                   MOV.L       @(16,R14),R2
    00000BC4 7201                   ADD         #1,R2
    00000BC6 1E24                   MOV.L       R2,@(16,R14)
    00000BC8 A001                   BRA         L1277
    00000BCA E407                   MOV         #7,R4
    00000BCC              L1134:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BCC E420                   MOV         #32,R4
    00000BCE              L1277:                            
    00000BCE A0CB                   BRA         L1112
    00000BD0 2F42                   MOV.L       R4,@R15
    00000BD2              L903:                            ; case label 
           lex.c   460                case '<': if (Lexer->Mode == LexModeHashInclude) GotToken = LexGetStringConstant(Lexer, *Value
                         +, '>'); else { NEXTIS3PLUS('=', TokenLessEqual, '<', TokenShiftLeft, '=', TokenShiftLeftAssign, TokenLessT
                         +han); } break; 
    00000BD2 50E6                   MOV.L       @(24,R14),R0
    00000BD4 8801                   CMP/EQ      #1,R0
    00000BD6 8B05                   BF          L1136
    00000BD8 65B2                   MOV.L       @R11,R5
    00000BDA E63E                   MOV         #62,R6
    00000BDC BD60                   BSR         _LexGetStringConstant
    00000BDE 64E3                   MOV         R14,R4
    00000BE0              L1279:                            
    00000BE0 A0C2                   BRA         L1112
    00000BE2 2F02                   MOV.L       R0,@R15
    00000BE4              L1136:                            
    00000BE4 60D3                   MOV         R13,R0
    00000BE6 883D                   CMP/EQ      #61,R0
    00000BE8 8B07                   BF          L1138
    00000BEA 63E2                   MOV.L       @R14,R3
    00000BEC 7301                   ADD         #1,R3
    00000BEE 2E32                   MOV.L       R3,@R14
    00000BF0 52E4                   MOV.L       @(16,R14),R2
    00000BF2 7201                   ADD         #1,R2
    00000BF4 1E24                   MOV.L       R2,@(16,R14)
    00000BF6 A0AE                   BRA         L1298
    00000BF8 E418                   MOV         #24,R4
    00000BFA              L1138:                            
    00000BFA 883C                   CMP/EQ      #60,R0
    00000BFC 8B14                   BF          L1140
    00000BFE 63E2                   MOV.L       @R14,R3
    00000C00 8431                   MOV.B       @(1,R3),R0
    00000C02 883D                   CMP/EQ      #61,R0
    00000C04 8B07                   BF          L1141
    00000C06 62E2                   MOV.L       @R14,R2
    00000C08 7202                   ADD         #2,R2
    00000C0A 2E22                   MOV.L       R2,@R14
    00000C0C 53E4                   MOV.L       @(16,R14),R3
    00000C0E 7302                   ADD         #2,R3
    00000C10 1E34                   MOV.L       R3,@(16,R14)
    00000C12 A007                   BRA         L1278
    00000C14 E408                   MOV         #8,R4
    00000C16              L1141:                            
    00000C16 E41A                   MOV         #26,R4
    00000C18 62E2                   MOV.L       @R14,R2
    00000C1A 7201                   ADD         #1,R2
    00000C1C 2E22                   MOV.L       R2,@R14
    00000C1E 53E4                   MOV.L       @(16,R14),R3
    00000C20 7301                   ADD         #1,R3
    00000C22 1E34                   MOV.L       R3,@(16,R14)
    00000C24              L1278:                            
    00000C24 A0A0                   BRA         L1112
    00000C26 2F42                   MOV.L       R4,@R15
    00000C28              L1140:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C28 E416                   MOV         #22,R4
    00000C2A A09D                   BRA         L1112
    00000C2C 2F42                   MOV.L       R4,@R15
    00000C2E              L904:                            ; case label 
           lex.c   461                case '>': NEXTIS3PLUS('=', TokenGreaterEqual, '>', TokenShiftRight, '=', TokenShiftRightAssign
                         +, TokenGreaterThan); break;
    00000C2E 60D3                   MOV         R13,R0
    00000C30 883D                   CMP/EQ      #61,R0
    00000C32 8B07                   BF          L1144
    00000C34 63E2                   MOV.L       @R14,R3
    00000C36 7301                   ADD         #1,R3
    00000C38 2E32                   MOV.L       R3,@R14
    00000C3A 52E4                   MOV.L       @(16,R14),R2
    00000C3C 7201                   ADD         #1,R2
    00000C3E 1E24                   MOV.L       R2,@(16,R14)
    00000C40 A089                   BRA         L1298
    00000C42 E419                   MOV         #25,R4
    00000C44              L1144:                            
    00000C44 883E                   CMP/EQ      #62,R0
    00000C46 8B14                   BF          L1146
    00000C48 63E2                   MOV.L       @R14,R3
    00000C4A 8431                   MOV.B       @(1,R3),R0
    00000C4C 883D                   CMP/EQ      #61,R0
    00000C4E 8B07                   BF          L1147
    00000C50 62E2                   MOV.L       @R14,R2
    00000C52 7202                   ADD         #2,R2
    00000C54 2E22                   MOV.L       R2,@R14
    00000C56 53E4                   MOV.L       @(16,R14),R3
    00000C58 7302                   ADD         #2,R3
    00000C5A 1E34                   MOV.L       R3,@(16,R14)
    00000C5C A007                   BRA         L1281
    00000C5E E409                   MOV         #9,R4
    00000C60              L1147:                            
    00000C60 62E2                   MOV.L       @R14,R2
    00000C62 E41B                   MOV         #27,R4
    00000C64 7201                   ADD         #1,R2
    00000C66 2E22                   MOV.L       R2,@R14
    00000C68 53E4                   MOV.L       @(16,R14),R3
    00000C6A 7301                   ADD         #1,R3
    00000C6C 1E34                   MOV.L       R3,@(16,R14)
    00000C6E              L1281:                            
    00000C6E A07B                   BRA         L1112
    00000C70 2F42                   MOV.L       R4,@R15
    00000C72              L1146:                            
    00000C72 E417                   MOV         #23,R4
    00000C74 A078                   BRA         L1112
    00000C76 2F42                   MOV.L       R4,@R15
    00000C78              L905:                            ; case label 
           lex.c   462                case ';': GotToken = TokenSemicolon; break;
    00000C78 A06D                   BRA         L1298
    00000C7A E432                   MOV         #50,R4
    00000C7C              L906:                            ; case label 
           lex.c   463                case '&': NEXTIS3('=', TokenArithmeticAndAssign, '&', TokenLogicalAnd, TokenAmpersand); break;
    00000C7C 60D3                   MOV         R13,R0
    00000C7E 883D                   CMP/EQ      #61,R0
    00000C80 8B07                   BF          L1150
    00000C82 63E2                   MOV.L       @R14,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C84 7301                   ADD         #1,R3
    00000C86 2E32                   MOV.L       R3,@R14
    00000C88 52E4                   MOV.L       @(16,R14),R2
    00000C8A 7201                   ADD         #1,R2
    00000C8C 1E24                   MOV.L       R2,@(16,R14)
    00000C8E A062                   BRA         L1298
    00000C90 E40A                   MOV         #10,R4
    00000C92              L1150:                            
    00000C92 8826                   CMP/EQ      #38,R0
    00000C94 8B07                   BF          L1152
    00000C96 63E2                   MOV.L       @R14,R3
    00000C98 7301                   ADD         #1,R3
    00000C9A 2E32                   MOV.L       R3,@R14
    00000C9C 52E4                   MOV.L       @(16,R14),R2
    00000C9E 7201                   ADD         #1,R2
    00000CA0 1E24                   MOV.L       R2,@(16,R14)
    00000CA2 A001                   BRA         L1284
    00000CA4 E410                   MOV         #16,R4
    00000CA6              L1152:                            
    00000CA6 E413                   MOV         #19,R4
    00000CA8              L1284:                            
    00000CA8 A05E                   BRA         L1112
    00000CAA 2F42                   MOV.L       R4,@R15
    00000CAC              L907:                            ; case label 
           lex.c   464                case '|': NEXTIS3('=', TokenArithmeticOrAssign, '|', TokenLogicalOr, TokenArithmeticOr); break
                         +;
    00000CAC 60D3                   MOV         R13,R0
    00000CAE 883D                   CMP/EQ      #61,R0
    00000CB0 8B07                   BF          L1154
    00000CB2 63E2                   MOV.L       @R14,R3
    00000CB4 7301                   ADD         #1,R3
    00000CB6 2E32                   MOV.L       R3,@R14
    00000CB8 52E4                   MOV.L       @(16,R14),R2
    00000CBA 7201                   ADD         #1,R2
    00000CBC 1E24                   MOV.L       R2,@(16,R14)
    00000CBE A04A                   BRA         L1298
    00000CC0 E40B                   MOV         #11,R4
    00000CC2              L1154:                            
    00000CC2 887C                   CMP/EQ      #124,R0
    00000CC4 8B07                   BF          L1156
    00000CC6 63E2                   MOV.L       @R14,R3
    00000CC8 7301                   ADD         #1,R3
    00000CCA 2E32                   MOV.L       R3,@R14
    00000CCC 52E4                   MOV.L       @(16,R14),R2
    00000CCE 7201                   ADD         #1,R2
    00000CD0 1E24                   MOV.L       R2,@(16,R14)
    00000CD2 A001                   BRA         L1286
    00000CD4 E40F                   MOV         #15,R4
    00000CD6              L1156:                            
    00000CD6 E411                   MOV         #17,R4
    00000CD8              L1286:                            
    00000CD8 A046                   BRA         L1112
    00000CDA 2F42                   MOV.L       R4,@R15
    00000CDC              L908:                            ; case label 
           lex.c   465                case '{': GotToken = TokenLeftBrace; break;
    00000CDC A03B                   BRA         L1298
    00000CDE E434                   MOV         #52,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CE0              L909:                            ; case label 
           lex.c   466                case '}': GotToken = TokenRightBrace; break;
    00000CE0 A039                   BRA         L1298
    00000CE2 E435                   MOV         #53,R4
    00000CE4              L910:                            ; case label 
           lex.c   467                case '[': GotToken = TokenLeftSquareBracket; break;
    00000CE4 A037                   BRA         L1298
    00000CE6 E427                   MOV         #39,R4
    00000CE8              L911:                            ; case label 
           lex.c   468                case ']': GotToken = TokenRightSquareBracket; break;
    00000CE8 A035                   BRA         L1298
    00000CEA E428                   MOV         #40,R4
    00000CEC              L912:                            ; case label 
           lex.c   469                case '!': NEXTIS('=', TokenNotEqual, TokenUnaryNot); break;
    00000CEC 60D3                   MOV         R13,R0
    00000CEE 883D                   CMP/EQ      #61,R0
    00000CF0 8B07                   BF          L1158
    00000CF2 63E2                   MOV.L       @R14,R3
    00000CF4 7301                   ADD         #1,R3
    00000CF6 2E32                   MOV.L       R3,@R14
    00000CF8 52E4                   MOV.L       @(16,R14),R2
    00000CFA 7201                   ADD         #1,R2
    00000CFC 1E24                   MOV.L       R2,@(16,R14)
    00000CFE A001                   BRA         L1292
    00000D00 E415                   MOV         #21,R4
    00000D02              L1158:                            
    00000D02 E423                   MOV         #35,R4
    00000D04              L1292:                            
    00000D04 A030                   BRA         L1112
    00000D06 2F42                   MOV.L       R4,@R15
    00000D08              L913:                            ; case label 
           lex.c   470                case '^': NEXTIS('=', TokenArithmeticExorAssign, TokenArithmeticExor); break;
    00000D08 60D3                   MOV         R13,R0
    00000D0A 883D                   CMP/EQ      #61,R0
    00000D0C 8B07                   BF          L1160
    00000D0E 63E2                   MOV.L       @R14,R3
    00000D10 7301                   ADD         #1,R3
    00000D12 2E32                   MOV.L       R3,@R14
    00000D14 52E4                   MOV.L       @(16,R14),R2
    00000D16 7201                   ADD         #1,R2
    00000D18 1E24                   MOV.L       R2,@(16,R14)
    00000D1A A001                   BRA         L1293
    00000D1C E40C                   MOV         #12,R4
    00000D1E              L1160:                            
    00000D1E E412                   MOV         #18,R4
    00000D20              L1293:                            
    00000D20 A022                   BRA         L1112
    00000D22 2F42                   MOV.L       R4,@R15
    00000D24              L914:                            ; case label 
           lex.c   471                case '~': GotToken = TokenUnaryExor; break;
    00000D24 A017                   BRA         L1298
    00000D26 E424                   MOV         #36,R4
    00000D28              L915:                            ; case label 
           lex.c   472                case ',': GotToken = TokenComma; break;
    00000D28 A015                   BRA         L1298
    00000D2A E401                   MOV         #1,R4
    00000D2C              L916:                            ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   473                case '.': NEXTISEXACTLY3('.', '.', TokenEllipsis, TokenDot); break;
    00000D2C 60D3                   MOV         R13,R0
    00000D2E 882E                   CMP/EQ      #46,R0
    00000D30 8B0B                   BF          L1162
    00000D32 63E2                   MOV.L       @R14,R3
    00000D34 8431                   MOV.B       @(1,R3),R0
    00000D36 882E                   CMP/EQ      #46,R0
    00000D38 8B07                   BF          L1162
    00000D3A 62E2                   MOV.L       @R14,R2
    00000D3C 7202                   ADD         #2,R2
    00000D3E 2E22                   MOV.L       R2,@R14
    00000D40 53E4                   MOV.L       @(16,R14),R3
    00000D42 7302                   ADD         #2,R3
    00000D44 1E34                   MOV.L       R3,@(16,R14)
    00000D46 A001                   BRA         L1296
    00000D48 E433                   MOV         #51,R4
    00000D4A              L1162:                            
    00000D4A E429                   MOV         #41,R4
    00000D4C              L1296:                            
    00000D4C A00C                   BRA         L1112
    00000D4E 2F42                   MOV.L       R4,@R15
    00000D50              L917:                            ; case label 
           lex.c   474                case '?': GotToken = TokenQuestionMark; break;
    00000D50 A001                   BRA         L1298
    00000D52 E40D                   MOV         #13,R4
    00000D54              L918:                            ; case label 
           lex.c   475                case ':': GotToken = TokenColon; break;
    00000D54 E40E                   MOV         #14,R4
    00000D56              L1298:                            
    00000D56 A007                   BRA         L1112
    00000D58 2F42                   MOV.L       R4,@R15
    00000D5A              L919:                            ; default label 
           lex.c   476                default:  LexFail(Lexer, "illegal character '%c'", ThisChar); break;
    00000D5A D95A                   MOV.L       L1333,R9   ; _LexFail
    00000D5C DD5A                   MOV.L       L1333+4,R13; L675
    00000D5E 2FA6                   MOV.L       R10,@-R15
    00000D60 2FD6                   MOV.L       R13,@-R15
    00000D62 490B                   JSR         @R9
    00000D64 64E3                   MOV         R14,R4
    00000D66 7F08                   ADD         #8,R15
    00000D68              L1112:                            
           lex.c   477            }
           lex.c   478        } while (GotToken == TokenNone);
    00000D68 63F2                   MOV.L       @R15,R3
    00000D6A 2338                   TST         R3,R3
    00000D6C 8B01                   BF          L1334
    00000D6E ADB4                   BRA         L1095
    00000D70 0009                   NOP
    00000D72              L1334:                            
           lex.c   479        
           lex.c   480        return GotToken;
    00000D72 60F2                   MOV.L       @R15,R0
           lex.c   481    }
    00000D74              L1094:                            
    00000D74 7F04                   ADD         #4,R15
    00000D76 4F26                   LDS.L       @R15+,PR
    00000D78 69F6                   MOV.L       @R15+,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D7A 6AF6                   MOV.L       @R15+,R10
    00000D7C 6BF6                   MOV.L       @R15+,R11
    00000D7E 6CF6                   MOV.L       @R15+,R12
    00000D80 6DF6                   MOV.L       @R15+,R13
    00000D82 000B                   RTS
    00000D84 6EF6                   MOV.L       @R15+,R14
           lex.c   482    
           lex.c   483    /* what size value goes with each token */
           lex.c   484    int LexTokenSize(enum LexToken Token)
    00000D86              _LexTokenSize:                   ; function: LexTokenSize
                                                           ; frame size=0
           lex.c   485    {
           lex.c   486        switch (Token)
    00000D86 6043                   MOV         R4,R0
    00000D88 882D                   CMP/EQ      #45,R0
    00000D8A 8909                   BT          L824
    00000D8C 8830                   CMP/EQ      #48,R0
    00000D8E 8907                   BT          L824
    00000D90 882E                   CMP/EQ      #46,R0
    00000D92 8905                   BT          L824
    00000D94 8831                   CMP/EQ      #49,R0
    00000D96 8905                   BT          L924
    00000D98 882F                   CMP/EQ      #47,R0
    00000D9A 8905                   BT          L925
    00000D9C A006                   BRA         L926
    00000D9E 0009                   NOP
    00000DA0              L824:
           lex.c   487        {
           lex.c   488            case TokenIdentifier: case TokenStringConstant: return sizeof(char *);
           lex.c   489            case TokenIntegerConstant: return sizeof(int);
    00000DA0 000B                   RTS
    00000DA2 E004                   MOV         #4,R0
    00000DA4              L924:                            ; case label 
           lex.c   490            case TokenCharacterConstant: return sizeof(unsigned char);
    00000DA4 000B                   RTS
    00000DA6 E001                   MOV         #1,R0
    00000DA8              L925:                            ; case label 
           lex.c   491            case TokenFPConstant: return sizeof(double);
    00000DA8 000B                   RTS
    00000DAA E008                   MOV         #8,R0
    00000DAC              L926:                            ; default label 
           lex.c   492            default: return 0;
    00000DAC E000                   MOV         #0,R0
           lex.c   493        }
           lex.c   494    }
    00000DAE              L1165:                            
    00000DAE 000B                   RTS
    00000DB0 0009                   NOP
           lex.c   495    
           lex.c   496    /* produce tokens from the lexer and return a heap buffer with the result - used for scanning */
           lex.c   497    void *LexTokenise(struct LexState *Lexer, int *TokenLen)
    00000DB2              _LexTokenise:                    ; function: LexTokenise
                                                           ; frame size=44
    00000DB2 2FE6                   MOV.L       R14,@-R15
    00000DB4 2FD6                   MOV.L       R13,@-R15
           lex.c   498    {
           lex.c   499        enum LexToken Token;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   500        void *HeapMem;
           lex.c   501        struct Value *GotValue;
           lex.c   502        int MemUsed = 0;
    00000DB6 ED00                   MOV         #0,R13
    00000DB8 2FC6                   MOV.L       R12,@-R15
    00000DBA 2FB6                   MOV.L       R11,@-R15
    00000DBC 2FA6                   MOV.L       R10,@-R15
    00000DBE 6B43                   MOV         R4,R11
    00000DC0 2F96                   MOV.L       R9,@-R15
    00000DC2 2F86                   MOV.L       R8,@-R15
    00000DC4 4F22                   STS.L       PR,@-R15
    00000DC6 7FF8                   ADD         #-8,R15
    00000DC8 1F51                   MOV.L       R5,@(4,R15)
           lex.c   503        int ValueSize;
           lex.c   504        int ReserveSpace = (Lexer->End - Lexer->Pos) * 4 + 16; 
    00000DCA 63B2                   MOV.L       @R11,R3
    00000DCC 58B1                   MOV.L       @(4,R11),R8
    00000DCE 3838                   SUB         R3,R8
           lex.c   505        void *TokenSpace = HeapAllocStack(ReserveSpace);
    00000DD0 D33E                   MOV.L       L1333+8,R3 ; _HeapAllocStack
    00000DD2 4808                   SHLL2       R8
    00000DD4 7810                   ADD         #16,R8
    00000DD6 430B                   JSR         @R3
    00000DD8 6483                   MOV         R8,R4
    00000DDA 6903                   MOV         R0,R9
           lex.c   506        char *TokenPos = (char *)TokenSpace;
    00000DDC 6E03                   MOV         R0,R14
           lex.c   507        int LastCharacterPos = 0;
           lex.c   508    
           lex.c   509        if (TokenSpace == NULL)
    00000DDE 2998                   TST         R9,R9
    00000DE0 8F06                   BF/S        L1167
    00000DE2 6CD3                   MOV         R13,R12
           lex.c   510            LexFail(Lexer, "out of memory");
    00000DE4 D33A                   MOV.L       L1333+12,R3; L604
    00000DE6 2F36                   MOV.L       R3,@-R15
    00000DE8 D236                   MOV.L       L1333,R2   ; _LexFail
    00000DEA 420B                   JSR         @R2
    00000DEC 64B3                   MOV         R11,R4
    00000DEE 7F04                   ADD         #4,R15
           lex.c   511    
           lex.c   512        do
    00000DF0              L1167:                            
           lex.c   513        { 
           lex.c   514            /* store the token at the end of the stack area */
           lex.c   515            Token = LexScanGetToken(Lexer, &GotValue);
    00000DF0 65F3                   MOV         R15,R5
    00000DF2 BD5F                   BSR         _LexScanGetToken
    00000DF4 64B3                   MOV         R11,R4
    00000DF6 6A03                   MOV         R0,R10
           lex.c   516            
           lex.c   517    #ifdef DEBUG_LEXER
           lex.c   518            printf("Token: %02x\n", Token);
           lex.c   519    #endif
           lex.c   520            *(unsigned char *)TokenPos = Token;
    00000DF8 2EA0                   MOV.B       R10,@R14
           lex.c   521            TokenPos++;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   522            MemUsed++;
           lex.c   523    
           lex.c   524            *(unsigned char *)TokenPos = (unsigned char)LastCharacterPos;
           lex.c   525            TokenPos++;
           lex.c   526            MemUsed++;
    00000DFA 7D02                   ADD         #2,R13
    00000DFC 7E01                   ADD         #1,R14
    00000DFE 2EC0                   MOV.B       R12,@R14
    00000E00 7E01                   ADD         #1,R14
           lex.c   527    
           lex.c   528            ValueSize = LexTokenSize(Token);
    00000E02 BFC0                   BSR         _LexTokenSize
    00000E04 64A3                   MOV         R10,R4
    00000E06 6C03                   MOV         R0,R12
           lex.c   529            if (ValueSize > 0)
    00000E08 4C15                   CMP/PL      R12
    00000E0A 8B07                   BF          L1168
           lex.c   530            { 
           lex.c   531                /* store a value as well */
           lex.c   532                memcpy((void *)TokenPos, (void *)GotValue->Val, ValueSize);
    00000E0C 65F2                   MOV.L       @R15,R5
    00000E0E 66C3                   MOV         R12,R6
    00000E10 D330                   MOV.L       L1333+16,R3; _memcpy
    00000E12 5551                   MOV.L       @(4,R5),R5
    00000E14 430B                   JSR         @R3
    00000E16 64E3                   MOV         R14,R4
           lex.c   533                TokenPos += ValueSize;
    00000E18 3ECC                   ADD         R12,R14
           lex.c   534                MemUsed += ValueSize;
    00000E1A 3DCC                   ADD         R12,R13
    00000E1C              L1168:                            
           lex.c   535            }
           lex.c   536        
           lex.c   537            LastCharacterPos = Lexer->CharacterPos;
           lex.c   538                        
           lex.c   539        } while (Token != TokenEOF);
    00000E1C 60A3                   MOV         R10,R0
    00000E1E 885D                   CMP/EQ      #93,R0
    00000E20 8FE6                   BF/S        L1167
    00000E22 5CB4                   MOV.L       @(16,R11),R12
           lex.c   540        
           lex.c   541        HeapMem = HeapAllocMem(MemUsed);
    00000E24 D32C                   MOV.L       L1333+20,R3; _HeapAllocMem
    00000E26 430B                   JSR         @R3
    00000E28 64D3                   MOV         R13,R4
    00000E2A 6E03                   MOV         R0,R14
           lex.c   542        if (HeapMem == NULL)
    00000E2C 2EE8                   TST         R14,R14
    00000E2E 8B05                   BF          L1169
           lex.c   543            LexFail(Lexer, "out of memory");
    00000E30 D327                   MOV.L       L1333+12,R3; L604
    00000E32 2F36                   MOV.L       R3,@-R15
    00000E34 D223                   MOV.L       L1333,R2   ; _LexFail
    00000E36 420B                   JSR         @R2
    00000E38 64B3                   MOV         R11,R4
    00000E3A 7F04                   ADD         #4,R15
    00000E3C              L1169:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   544            
           lex.c   545        assert(ReserveSpace >= MemUsed);
    00000E3C 38D3                   CMP/GE      R13,R8
    00000E3E 8902                   BT          L1171
    00000E40 D226                   MOV.L       L1333+24,R2; _abort
    00000E42 420B                   JSR         @R2
    00000E44 0009                   NOP
    00000E46              L1171:                            
           lex.c   546        memcpy(HeapMem, TokenSpace, MemUsed);
    00000E46 66D3                   MOV         R13,R6
    00000E48 D222                   MOV.L       L1333+16,R2; _memcpy
    00000E4A 6593                   MOV         R9,R5
    00000E4C 420B                   JSR         @R2
    00000E4E 64E3                   MOV         R14,R4
           lex.c   547        HeapPopStack(TokenSpace, ReserveSpace);
    00000E50 D323                   MOV.L       L1333+28,R3; _HeapPopStack
    00000E52 6583                   MOV         R8,R5
    00000E54 430B                   JSR         @R3
    00000E56 6493                   MOV         R9,R4
           lex.c   548    #ifdef DEBUG_LEXER
           lex.c   549        {
           lex.c   550            int Count;
           lex.c   551            printf("Tokens: ");
           lex.c   552            for (Count = 0; Count < MemUsed; Count++)
           lex.c   553                printf("%02x ", *((unsigned char *)HeapMem+Count));
           lex.c   554            printf("\n");
           lex.c   555        }
           lex.c   556    #endif
           lex.c   557        if (TokenLen)
    00000E58 52F1                   MOV.L       @(4,R15),R2
    00000E5A 2228                   TST         R2,R2
    00000E5C 8901                   BT          L1172
           lex.c   558            *TokenLen = MemUsed;
    00000E5E 53F1                   MOV.L       @(4,R15),R3
    00000E60 23D2                   MOV.L       R13,@R3
    00000E62              L1172:                            
           lex.c   559        
           lex.c   560        return HeapMem;
    00000E62 60E3                   MOV         R14,R0
           lex.c   561    }
    00000E64 7F08                   ADD         #8,R15
    00000E66 4F26                   LDS.L       @R15+,PR
    00000E68 68F6                   MOV.L       @R15+,R8
    00000E6A 69F6                   MOV.L       @R15+,R9
    00000E6C 6AF6                   MOV.L       @R15+,R10
    00000E6E 6BF6                   MOV.L       @R15+,R11
    00000E70 6CF6                   MOV.L       @R15+,R12
    00000E72 6DF6                   MOV.L       @R15+,R13
    00000E74 000B                   RTS
    00000E76 6EF6                   MOV.L       @R15+,R14
           lex.c   562    
           lex.c   563    /* lexically analyse some source text */
           lex.c   564    void *LexAnalyse(const char *FileName, const char *Source, int SourceLen, int *TokenLen)
    00000E78              _LexAnalyse:                     ; function: LexAnalyse
                                                           ; frame size=40
    00000E78 4F22                   STS.L       PR,@-R15
           lex.c   565    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   566        struct LexState Lexer;
           lex.c   567        
           lex.c   568        Lexer.Pos = Source;
           lex.c   569        Lexer.End = Source + SourceLen;
    00000E7A 365C                   ADD         R5,R6
    00000E7C 7FDC                   ADD         #-36,R15
    00000E7E 2F72                   MOV.L       R7,@R15
    00000E80 1F51                   MOV.L       R5,@(4,R15)
    00000E82 1F62                   MOV.L       R6,@(8,R15)
           lex.c   570        Lexer.Line = 1;
    00000E84 E601                   MOV         #1,R6
    00000E86 1F64                   MOV.L       R6,@(16,R15)
           lex.c   571        Lexer.FileName = FileName;
    00000E88 1F43                   MOV.L       R4,@(12,R15)
           lex.c   572        Lexer.Mode = LexModeNormal;
    00000E8A E400                   MOV         #0,R4
    00000E8C 1F47                   MOV.L       R4,@(28,R15)
           lex.c   573        Lexer.EmitExtraNewlines = 0;
    00000E8E 1F48                   MOV.L       R4,@(32,R15)
           lex.c   574        Lexer.CharacterPos = 1;
    00000E90 1F65                   MOV.L       R6,@(20,R15)
           lex.c   575        Lexer.SourceText = Source;
           lex.c   576        
           lex.c   577        return LexTokenise(&Lexer, TokenLen);
    00000E92 64F3                   MOV         R15,R4
    00000E94 1F56                   MOV.L       R5,@(24,R15)
    00000E96 65F2                   MOV.L       @R15,R5
    00000E98 BF8B                   BSR         _LexTokenise
    00000E9A 7404                   ADD         #4,R4
           lex.c   578    }
    00000E9C 7F24                   ADD         #36,R15
    00000E9E 4F26                   LDS.L       @R15+,PR
    00000EA0 000B                   RTS
    00000EA2 0009                   NOP
           lex.c   579    
           lex.c   580    /* prepare to parse a pre-tokenised buffer */
           lex.c   581    void LexInitParser(struct ParseState *Parser, const char *SourceText, void *TokenSource, const char *FileN
                         +ame, int RunIt)
    00000EA4              _LexInitParser:                  ; function: LexInitParser
                                                           ; frame size=0
           lex.c   582    {
           lex.c   583        Parser->Pos = TokenSource;
    00000EA4 2462                   MOV.L       R6,@R4
           lex.c   584        Parser->Line = 1;
    00000EA6 E001                   MOV         #1,R0
    00000EA8 8144                   MOV.W       R0,@(8,R4)
           lex.c   585        Parser->FileName = FileName;
           lex.c   586        Parser->Mode = RunIt ? RunModeRun : RunModeSkip;
           lex.c   587        Parser->SearchLabel = 0;
    00000EAA E600                   MOV         #0,R6
    00000EAC 1471                   MOV.L       R7,@(4,R4)
           lex.c   588        Parser->HashIfLevel = 0;
    00000EAE 6063                   MOV         R6,R0
    00000EB0 62F2                   MOV.L       @R15,R2
    00000EB2 2228                   TST         R2,R2
    00000EB4 0329                   MOVT        R3
    00000EB6 1433                   MOV.L       R3,@(12,R4)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EB8 1464                   MOV.L       R6,@(16,R4)
    00000EBA 814C                   MOV.W       R0,@(24,R4)
           lex.c   589        Parser->HashIfEvaluateToLevel = 0;
    00000EBC 814D                   MOV.W       R0,@(26,R4)
           lex.c   590        Parser->CharacterPos = 0;
    00000EBE 8145                   MOV.W       R0,@(10,R4)
           lex.c   591        Parser->SourceText = SourceText;
           lex.c   592    }
    00000EC0 000B                   RTS
    00000EC2 1457                   MOV.L       R5,@(28,R4)
    00000EC4              L1333:                            
    00000EC4 <00000000>             .DATA.L     _LexFail
    00000EC8 <00000000>             .DATA.L     L675
    00000ECC <00000000>             .DATA.L     _HeapAllocStack
    00000ED0 <00000000>             .DATA.L     L604
    00000ED4 <00000000>             .DATA.L     _memcpy
    00000ED8 <00000000>             .DATA.L     _HeapAllocMem
    00000EDC <00000000>             .DATA.L     _abort
    00000EE0 <00000000>             .DATA.L     _HeapPopStack
           lex.c   593    
           lex.c   594    /* get the next token, without pre-processing */
           lex.c   595    enum LexToken LexGetRawToken(struct ParseState *Parser, struct Value **Value, int IncPos)
    00000EE4              _LexGetRawToken:                 ; function: LexGetRawToken
                                                           ; frame size=308
    00000EE4 2FE6                   MOV.L       R14,@-R15
    00000EE6 2FD6                   MOV.L       R13,@-R15
    00000EE8 2FC6                   MOV.L       R12,@-R15
    00000EEA 6D43                   MOV         R4,R13
    00000EEC DE40                   MOV.L       L1335+16,R14; __$InteractiveCurrentLine
    00000EEE 2FB6                   MOV.L       R11,@-R15
    00000EF0 2FA6                   MOV.L       R10,@-R15
           lex.c   596    {
           lex.c   597        enum LexToken Token = TokenNone;
    00000EF2 EB00                   MOV         #0,R11
    00000EF4 9074                   MOV.W       L1335,R0   ; H'FEF0
    00000EF6 6CB3                   MOV         R11,R12
    00000EF8 DA3C                   MOV.L       L1335+12,R10; __$InteractiveHead
    00000EFA 2F96                   MOV.L       R9,@-R15
    00000EFC 2F86                   MOV.L       R8,@-R15
    00000EFE 4F22                   STS.L       PR,@-R15
    00000F00 D838                   MOV.L       L1335+4,R8 ; __$LexUseStatementPrompt
    00000F02 3F0C                   ADD         R0,R15
    00000F04 D938                   MOV.L       L1335+8,R9 ; _StrEmpty
    00000F06 63F3                   MOV         R15,R3
    00000F08 1F52                   MOV.L       R5,@(8,R15)
    00000F0A 7310                   ADD         #16,R3
    00000F0C 1F63                   MOV.L       R6,@(12,R15)
    00000F0E 2F32                   MOV.L       R3,@R15
           lex.c   598        int ValueSize;
           lex.c   599        char *Prompt = NULL;
           lex.c   600        
           lex.c   601        do
    00000F10              L1177:                            
           lex.c   602        { 
           lex.c   603            /* get the next token */
           lex.c   604            if (Parser->Pos == NULL && InteractiveHead != NULL)
    00000F10 63D2                   MOV.L       @R13,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F12 2338                   TST         R3,R3
    00000F14 8B06                   BF          L1178
    00000F16 D235                   MOV.L       L1335+12,R2; __$InteractiveHead
    00000F18 6322                   MOV.L       @R2,R3
    00000F1A 2338                   TST         R3,R3
    00000F1C 8902                   BT          L1178
           lex.c   605                Parser->Pos = InteractiveHead->Tokens;
    00000F1E 63A2                   MOV.L       @R10,R3
    00000F20 5231                   MOV.L       @(4,R3),R2
    00000F22 2D22                   MOV.L       R2,@R13
    00000F24              L1178:                            
           lex.c   606            
           lex.c   607            if (Parser->FileName != StrEmpty || InteractiveHead != NULL)
    00000F24 6392                   MOV.L       @R9,R3
    00000F26 51D1                   MOV.L       @(4,R13),R1
    00000F28 3130                   CMP/EQ      R3,R1
    00000F2A 8B0B                   BF          L1181
    00000F2C D22F                   MOV.L       L1335+12,R2; __$InteractiveHead
    00000F2E 6022                   MOV.L       @R2,R0
    00000F30 2008                   TST         R0,R0
    00000F32 890D                   BT          L1179
           lex.c   608            { 
           lex.c   609                /* skip leading newlines */
           lex.c   610                while ((Token = (enum LexToken)*(unsigned char *)Parser->Pos) == TokenEndOfLine)
    00000F34 A006                   BRA         L1181
    00000F36 0009                   NOP
    00000F38              L1182:                            
           lex.c   611                {
           lex.c   612                    Parser->Line++;
    00000F38 85D4                   MOV.W       @(8,R13),R0
    00000F3A 7001                   ADD         #1,R0
    00000F3C 81D4                   MOV.W       R0,@(8,R13)
           lex.c   613                    Parser->Pos += TOKEN_DATA_OFFSET;
    00000F3E 63D2                   MOV.L       @R13,R3
    00000F40 7302                   ADD         #2,R3
    00000F42 2D32                   MOV.L       R3,@R13
    00000F44              L1181:                            
    00000F44 6CD2                   MOV.L       @R13,R12
    00000F46 6CC0                   MOV.B       @R12,R12
    00000F48 6CCC                   EXTU.B      R12,R12
    00000F4A 60C3                   MOV         R12,R0
    00000F4C 885E                   CMP/EQ      #94,R0
    00000F4E 89F3                   BT          L1182
    00000F50              L1179:                            
    00000F50 6292                   MOV.L       @R9,R2
    00000F52 53D1                   MOV.L       @(4,R13),R3
    00000F54 3320                   CMP/EQ      R2,R3
    00000F56 8D02                   BT/S        L1336
    00000F58 64A2                   MOV.L       @R10,R4
    00000F5A A091                   BRA         L1183
    00000F5C 0009                   NOP
    00000F5E              L1336:                            
    00000F5E 2448                   TST         R4,R4
    00000F60 8910                   BT          L1186
    00000F62 60C3                   MOV         R12,R0
    00000F64 885D                   CMP/EQ      #93,R0
    00000F66 8901                   BT          L1337




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F68 A08A                   BRA         L1183
    00000F6A 0009                   NOP
    00000F6C              L1337:                            
           lex.c   614                }
           lex.c   615            }
           lex.c   616        
           lex.c   617            if (Parser->FileName == StrEmpty && (InteractiveHead == NULL || Token == TokenEOF))
           lex.c   618            { 
           lex.c   619                /* we're at the end of an interactive input token list */
           lex.c   620                char LineBuffer[LINEBUFFER_MAX];
           lex.c   621                void *LineTokens;
           lex.c   622                int LineBytes;
           lex.c   623                struct TokenLine *LineNode;
           lex.c   624                
           lex.c   625                if (InteractiveHead == NULL || (unsigned char *)Parser->Pos == &InteractiveTail->Tokens[Intera
                         +ctiveTail->NumBytes-TOKEN_DATA_OFFSET])
    00000F6C 2448                   TST         R4,R4
    00000F6E 8909                   BT          L1186
    00000F70 D220                   MOV.L       L1335+20,R2; __$InteractiveTail
    00000F72 6322                   MOV.L       @R2,R3
    00000F74 6133                   MOV         R3,R1
    00000F76 5012                   MOV.L       @(8,R1),R0
    00000F78 5331                   MOV.L       @(4,R3),R3
    00000F7A 70FE                   ADD         #-2,R0
    00000F7C 61D2                   MOV.L       @R13,R1
    00000F7E 303C                   ADD         R3,R0
    00000F80 3100                   CMP/EQ      R0,R1
    00000F82 8B4B                   BF          L1185
    00000F84              L1186:                            
           lex.c   626                { 
           lex.c   627                    /* get interactive input */
           lex.c   628                    if (LexUseStatementPrompt)
    00000F84 6282                   MOV.L       @R8,R2
    00000F86 2228                   TST         R2,R2
    00000F88 8902                   BT          L1187
           lex.c   629                    {
           lex.c   630                        Prompt = INTERACTIVE_PROMPT_STATEMENT;
    00000F8A D61B                   MOV.L       L1335+24,R6; L728
           lex.c   631                        LexUseStatementPrompt = FALSE;
    00000F8C A001                   BRA         L1188
    00000F8E 28B2                   MOV.L       R11,@R8
    00000F90              L1187:                            
           lex.c   632                    }
           lex.c   633                    else
           lex.c   634                        Prompt = INTERACTIVE_PROMPT_LINE;
    00000F90 D61A                   MOV.L       L1335+28,R6; L729
    00000F92              L1188:                            
           lex.c   635                        
           lex.c   636                    if (PlatformGetLine(&LineBuffer[0], LINEBUFFER_MAX, Prompt) == NULL)
    00000F92 9526                   MOV.W       L1335+2,R5 ; H'0100
    00000F94 D31A                   MOV.L       L1335+32,R3; _PlatformGetLine
    00000F96 430B                   JSR         @R3
    00000F98 64F2                   MOV.L       @R15,R4
    00000F9A 2008                   TST         R0,R0
    00000F9C 8B01                   BF          L1189
           lex.c   637                        return TokenEOF;
    00000F9E A0DD                   BRA         L1190




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FA0 E05D                   MOV         #93,R0
    00000FA2              L1189:                            
           lex.c   638    
           lex.c   639                    /* put the new line at the end of the linked list of interactive lines */        
           lex.c   640                    LineTokens = LexAnalyse(StrEmpty, &LineBuffer[0], strlen(LineBuffer), &LineBytes);
    00000FA2 67F3                   MOV         R15,R7
    00000FA4 D317                   MOV.L       L1335+36,R3; _strlen
    00000FA6 7704                   ADD         #4,R7
    00000FA8 2F76                   MOV.L       R7,@-R15
    00000FAA 64F3                   MOV         R15,R4
    00000FAC 430B                   JSR         @R3
    00000FAE 7414                   ADD         #20,R4
    00000FB0 55F1                   MOV.L       @(4,R15),R5
    00000FB2 6603                   MOV         R0,R6
    00000FB4 6492                   MOV.L       @R9,R4
    00000FB6 BF5F                   BSR         _LexAnalyse
    00000FB8 67F6                   MOV.L       @R15+,R7
    00000FBA 6C03                   MOV         R0,R12
           lex.c   641                    LineNode = VariableAlloc(Parser, sizeof(struct TokenLine), TRUE);
    00000FBC D212                   MOV.L       L1335+40,R2; _VariableAlloc
    00000FBE E601                   MOV         #1,R6
    00000FC0 E50C                   MOV         #12,R5
    00000FC2 420B                   JSR         @R2
    00000FC4 64D3                   MOV         R13,R4
    00000FC6 6403                   MOV         R0,R4
           lex.c   642                    LineNode->Tokens = LineTokens;
    00000FC8 14C1                   MOV.L       R12,@(4,R4)
           lex.c   643                    LineNode->NumBytes = LineBytes;
    00000FCA 53F1                   MOV.L       @(4,R15),R3
    00000FCC 1432                   MOV.L       R3,@(8,R4)
           lex.c   644                    if (InteractiveHead == NULL)
    00000FCE 62A2                   MOV.L       @R10,R2
    00000FD0 2228                   TST         R2,R2
    00000FD2 8B1B                   BF          L1191
           lex.c   645                    { 
           lex.c   646                        /* start a new list */
           lex.c   647                        InteractiveHead = LineNode;
    00000FD4 2A42                   MOV.L       R4,@R10
           lex.c   648                        Parser->Line = 1;
    00000FD6 E001                   MOV         #1,R0
    00000FD8 81D4                   MOV.W       R0,@(8,R13)
           lex.c   649                        Parser->CharacterPos = 0;
    00000FDA 60B3                   MOV         R11,R0
    00000FDC A019                   BRA         L1192
    00000FDE 81D5                   MOV.W       R0,@(10,R13)
    00000FE0              L1335:                            
    00000FE0 FEF0                   .DATA.W     H'FEF0
    00000FE2 0100                   .DATA.W     H'0100
    00000FE4 <00000000>             .DATA.L     __$LexUseStatementPrompt
    00000FE8 <00000000>             .DATA.L     _StrEmpty
    00000FEC <00000000>             .DATA.L     __$InteractiveHead
    00000FF0 <00000000>             .DATA.L     __$InteractiveCurrentLine
    00000FF4 <00000000>             .DATA.L     __$InteractiveTail
    00000FF8 <00000000>             .DATA.L     L728
    00000FFC <00000000>             .DATA.L     L729
    00001000 <00000000>             .DATA.L     _PlatformGetLine
    00001004 <00000000>             .DATA.L     _strlen




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001008 <00000000>             .DATA.L     _VariableAlloc
    0000100C              L1191:                            
           lex.c   650                    }
           lex.c   651                    else
           lex.c   652                        InteractiveTail->Next = LineNode;
    0000100C D342                   MOV.L       L1338,R3   ; __$InteractiveTail
    0000100E 6232                   MOV.L       @R3,R2
    00001010 2242                   MOV.L       R4,@R2
    00001012              L1192:                            
           lex.c   653    
           lex.c   654                    InteractiveTail = LineNode;
    00001012 D241                   MOV.L       L1338,R2   ; __$InteractiveTail
    00001014 2242                   MOV.L       R4,@R2
           lex.c   655                    InteractiveCurrentLine = LineNode;
    00001016 2E42                   MOV.L       R4,@R14
           lex.c   656                    Parser->Pos = LineTokens;
    00001018 A02F                   BRA         L1193
    0000101A 2DC2                   MOV.L       R12,@R13
    0000101C              L1185:                            
    0000101C 65E2                   MOV.L       @R14,R5
    0000101E 5252                   MOV.L       @(8,R5),R2
    00001020 5351                   MOV.L       @(4,R5),R3
    00001022 72FE                   ADD         #-2,R2
    00001024 61D2                   MOV.L       @R13,R1
    00001026 323C                   ADD         R3,R2
    00001028 3120                   CMP/EQ      R2,R1
    0000102A 8914                   BT          L1194
           lex.c   657                }
           lex.c   658                else
           lex.c   659                { 
           lex.c   660                    /* go to the next token line */
           lex.c   661                    if (Parser->Pos != &InteractiveCurrentLine->Tokens[InteractiveCurrentLine->NumBytes-TOKEN_
                         +DATA_OFFSET])
           lex.c   662                    { 
           lex.c   663                        /* scan for the line */
           lex.c   664                        for (InteractiveCurrentLine = InteractiveHead; Parser->Pos != &InteractiveCurrentLine-
                         +>Tokens[InteractiveCurrentLine->NumBytes-TOKEN_DATA_OFFSET]; InteractiveCurrentLine = InteractiveCurrentLi
                         +ne->Next)
    0000102C A00A                   BRA         L1195
    0000102E 2E42                   MOV.L       R4,@R14
    00001030              L1196:                            
           lex.c   665                        { assert(InteractiveCurrentLine->Next != NULL); }
    00001030 63E2                   MOV.L       @R14,R3
    00001032 6232                   MOV.L       @R3,R2
    00001034 2228                   TST         R2,R2
    00001036 8B02                   BF          L1198
    00001038 D238                   MOV.L       L1338+4,R2 ; _abort
    0000103A 420B                   JSR         @R2
    0000103C 0009                   NOP
    0000103E              L1198:                            
    0000103E 62E2                   MOV.L       @R14,R2
    00001040 6322                   MOV.L       @R2,R3
    00001042 2E32                   MOV.L       R3,@R14
    00001044              L1195:                            
    00001044 62E2                   MOV.L       @R14,R2
    00001046 6323                   MOV         R2,R3
    00001048 5132                   MOV.L       @(8,R3),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000104A 71FE                   ADD         #-2,R1
    0000104C 5321                   MOV.L       @(4,R2),R3
    0000104E 313C                   ADD         R3,R1
    00001050 62D2                   MOV.L       @R13,R2
    00001052 3210                   CMP/EQ      R1,R2
    00001054 8BEC                   BF          L1196
    00001056              L1194:                            
           lex.c   666                    }
           lex.c   667    
           lex.c   668                    assert(InteractiveCurrentLine != NULL);
    00001056 61E2                   MOV.L       @R14,R1
    00001058 2118                   TST         R1,R1
    0000105A 8B02                   BF          L1200
    0000105C D32F                   MOV.L       L1338+4,R3 ; _abort
    0000105E 430B                   JSR         @R3
    00001060 0009                   NOP
    00001062              L1200:                            
           lex.c   669                    InteractiveCurrentLine = InteractiveCurrentLine->Next;
    00001062 63E2                   MOV.L       @R14,R3
    00001064 6232                   MOV.L       @R3,R2
           lex.c   670                    assert(InteractiveCurrentLine != NULL);
    00001066 6323                   MOV         R2,R3
    00001068 2338                   TST         R3,R3
    0000106A 8F03                   BF/S        L1202
    0000106C 2E22                   MOV.L       R2,@R14
    0000106E D32B                   MOV.L       L1338+4,R3 ; _abort
    00001070 430B                   JSR         @R3
    00001072 0009                   NOP
    00001074              L1202:                            
           lex.c   671                    Parser->Pos = InteractiveCurrentLine->Tokens;
    00001074 63E2                   MOV.L       @R14,R3
    00001076 5231                   MOV.L       @(4,R3),R2
    00001078 2D22                   MOV.L       R2,@R13
    0000107A              L1193:                            
           lex.c   672                }
           lex.c   673    
           lex.c   674                Token = (enum LexToken)*(unsigned char *)Parser->Pos;
    0000107A 6CD2                   MOV.L       @R13,R12
    0000107C 6CC0                   MOV.B       @R12,R12
    0000107E 6CCC                   EXTU.B      R12,R12
    00001080              L1183:                            
           lex.c   675            }
           lex.c   676        } while ((Parser->FileName == StrEmpty && Token == TokenEOF) || Token == TokenEndOfLine);
    00001080 6392                   MOV.L       @R9,R3
    00001082 52D1                   MOV.L       @(4,R13),R2
    00001084 3230                   CMP/EQ      R3,R2
    00001086 8B04                   BF          L1203
    00001088 60C3                   MOV         R12,R0
    0000108A 885D                   CMP/EQ      #93,R0
    0000108C 8B01                   BF          L1339
    0000108E AF3F                   BRA         L1177
    00001090 0009                   NOP
    00001092              L1339:                            
    00001092              L1203:                            
    00001092 60C3                   MOV         R12,R0
    00001094 885E                   CMP/EQ      #94,R0
    00001096 8B01                   BF          L1340




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001098 AF3A                   BRA         L1177
    0000109A 0009                   NOP
    0000109C              L1340:                            
           lex.c   677    
           lex.c   678        Parser->CharacterPos = *((unsigned char *)Parser->Pos + 1);
    0000109C 63D2                   MOV.L       @R13,R3
    0000109E 8431                   MOV.B       @(1,R3),R0
    000010A0 600C                   EXTU.B      R0,R0
    000010A2 81D5                   MOV.W       R0,@(10,R13)
           lex.c   679        ValueSize = LexTokenSize(Token);
    000010A4 BE6F                   BSR         _LexTokenSize
    000010A6 64C3                   MOV         R12,R4
    000010A8 6A03                   MOV         R0,R10
           lex.c   680        if (ValueSize > 0)
    000010AA 4A15                   CMP/PL      R10
    000010AC 8B44                   BF          L1204
           lex.c   681        { 
           lex.c   682            /* this token requires a value - unpack it */
           lex.c   683            if (Value != NULL)
    000010AE 53F2                   MOV.L       @(8,R15),R3
    000010B0 2338                   TST         R3,R3
    000010B2 8929                   BT          L1205
           lex.c   684            { 
           lex.c   685                switch (Token)
    000010B4 DE1A                   MOV.L       L1338+8,R14; __$LexValue
    000010B6 60C3                   MOV         R12,R0
    000010B8 8830                   CMP/EQ      #48,R0
    000010BA 8909                   BT          L933
    000010BC 882D                   CMP/EQ      #45,R0
    000010BE 890B                   BT          L934
    000010C0 882E                   CMP/EQ      #46,R0
    000010C2 890B                   BT          L935
    000010C4 8831                   CMP/EQ      #49,R0
    000010C6 890C                   BT          L936
    000010C8 882F                   CMP/EQ      #47,R0
    000010CA 890D                   BT          L937
    000010CC A00E                   BRA         L1206
    000010CE 0009                   NOP
    000010D0              L933:                            ; case label 
           lex.c   686                {
           lex.c   687                    case TokenStringConstant:       LexValue.Typ = CharPtrType; break;
    000010D0 D214                   MOV.L       L1338+12,R2; _CharPtrType
    000010D2 6322                   MOV.L       @R2,R3
    000010D4 A00A                   BRA         L1206
    000010D6 2E32                   MOV.L       R3,@R14
    000010D8              L934:                            ; case label 
           lex.c   688                    case TokenIdentifier:           LexValue.Typ = NULL; break;
    000010D8 A008                   BRA         L1206
    000010DA 2EB2                   MOV.L       R11,@R14
    000010DC              L935:                            ; case label 
           lex.c   689                    case TokenIntegerConstant:      LexValue.Typ = &IntType; break;
    000010DC D212                   MOV.L       L1338+16,R2; _IntType
    000010DE A004                   BRA         L1299
    000010E0 0009                   NOP
    000010E2              L936:                            ; case label 
           lex.c   690                    case TokenCharacterConstant:    LexValue.Typ = &CharType; break;
    000010E2 D112                   MOV.L       L1338+20,R1; _CharType




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010E4 A002                   BRA         L1206
    000010E6 2E12                   MOV.L       R1,@R14
    000010E8              L937:                            ; case label 
           lex.c   691    #ifndef NO_FP
           lex.c   692                    case TokenFPConstant:           LexValue.Typ = &FPType; break;
    000010E8 D211                   MOV.L       L1338+24,R2; _FPType
    000010EA              L1299:                            
    000010EA 2E22                   MOV.L       R2,@R14
           lex.c   693    #endif
           lex.c   694                    default: break;
    000010EC              L1206:                            
           lex.c   695                }
           lex.c   696                
           lex.c   697                memcpy((void *)LexValue.Val, (void *)((char *)Parser->Pos + TOKEN_DATA_OFFSET), ValueSize);
    000010EC 65D2                   MOV.L       @R13,R5
    000010EE 66A3                   MOV         R10,R6
    000010F0 D310                   MOV.L       L1338+28,R3; _memcpy
    000010F2 7502                   ADD         #2,R5
    000010F4 430B                   JSR         @R3
    000010F6 54E1                   MOV.L       @(4,R14),R4
           lex.c   698                LexValue.ValOnHeap = FALSE;
           lex.c   699                LexValue.ValOnStack = FALSE;
           lex.c   700                LexValue.IsLValue = FALSE;
           lex.c   701                LexValue.LValueFrom = NULL;
           lex.c   702                *Value = &LexValue;
    000010F8 D209                   MOV.L       L1338+8,R2 ; __$LexValue
    000010FA 60B3                   MOV         R11,R0
    000010FC 80EC                   MOV.B       R0,@(12,R14)
    000010FE 80ED                   MOV.B       R0,@(13,R14)
    00001100 80EE                   MOV.B       R0,@(14,R14)
    00001102 1E02                   MOV.L       R0,@(8,R14)
    00001104 53F2                   MOV.L       @(8,R15),R3
    00001106 2322                   MOV.L       R2,@R3
    00001108              L1205:                            
           lex.c   703            }
           lex.c   704            
           lex.c   705            if (IncPos)
    00001108 53F3                   MOV.L       @(12,R15),R3
    0000110A 2338                   TST         R3,R3
    0000110C 891D                   BT          L1208
           lex.c   706                Parser->Pos += ValueSize + TOKEN_DATA_OFFSET;
    0000110E 7A02                   ADD         #2,R10
    00001110 63D2                   MOV.L       @R13,R3
    00001112 33AC                   ADD         R10,R3
    00001114 A019                   BRA         L1208
    00001116 2D32                   MOV.L       R3,@R13
    00001118              L1338:                            
    00001118 <00000000>             .DATA.L     __$InteractiveTail
    0000111C <00000000>             .DATA.L     _abort
    00001120 <00000000>             .DATA.L     __$LexValue
    00001124 <00000000>             .DATA.L     _CharPtrType
    00001128 <00000000>             .DATA.L     _IntType
    0000112C <00000000>             .DATA.L     _CharType
    00001130 <00000000>             .DATA.L     _FPType
    00001134 <00000000>             .DATA.L     _memcpy
    00001138              L1204:                            
           lex.c   707        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   708        else
           lex.c   709        {
           lex.c   710            if (IncPos && Token != TokenEOF)
    00001138 51F3                   MOV.L       @(12,R15),R1
    0000113A 2118                   TST         R1,R1
    0000113C 8905                   BT          L1208
    0000113E 60C3                   MOV         R12,R0
    00001140 885D                   CMP/EQ      #93,R0
    00001142 8902                   BT          L1208
           lex.c   711                Parser->Pos += TOKEN_DATA_OFFSET;
    00001144 62D2                   MOV.L       @R13,R2
    00001146 7202                   ADD         #2,R2
    00001148 2D22                   MOV.L       R2,@R13
    0000114A              L1208:                            
           lex.c   712        }
           lex.c   713        
           lex.c   714    #ifdef DEBUG_LEXER
           lex.c   715        printf("Got token=%02x inc=%d pos=%d\n", Token, IncPos, Parser->CharacterPos);
           lex.c   716    #endif
           lex.c   717        assert(Token >= TokenNone && Token <= TokenEndOfFunction);
    0000114A 4C11                   CMP/PZ      R12
    0000114C 8B02                   BF          L1210
    0000114E E25F                   MOV         #95,R2
    00001150 3C27                   CMP/GT      R2,R12
    00001152 8B02                   BF          L1211
    00001154              L1210:                            
    00001154 D127                   MOV.L       L1341+2,R1 ; _abort
    00001156 410B                   JSR         @R1
    00001158 0009                   NOP
    0000115A              L1211:                            
           lex.c   718        return Token;
    0000115A 60C3                   MOV         R12,R0
           lex.c   719    }
    0000115C              L1190:                            
    0000115C 9149                   MOV.W       L1341,R1   ; H'0110
    0000115E 3F1C                   ADD         R1,R15
    00001160 4F26                   LDS.L       @R15+,PR
    00001162 68F6                   MOV.L       @R15+,R8
    00001164 69F6                   MOV.L       @R15+,R9
    00001166 6AF6                   MOV.L       @R15+,R10
    00001168 6BF6                   MOV.L       @R15+,R11
    0000116A 6CF6                   MOV.L       @R15+,R12
    0000116C 6DF6                   MOV.L       @R15+,R13
    0000116E 000B                   RTS
    00001170 6EF6                   MOV.L       @R15+,R14
           lex.c   720    
           lex.c   721    /* correct the token position depending if we already incremented the position */
           lex.c   722    void LexHashIncPos(struct ParseState *Parser, int IncPos)
    00001172              _LexHashIncPos:                  ; function: LexHashIncPos
                                                           ; frame size=0
           lex.c   723    {
           lex.c   724        if (!IncPos)
    00001172 2558                   TST         R5,R5
    00001174 8B02                   BF          L1212
           lex.c   725            LexGetRawToken(Parser, NULL, TRUE);
    00001176 E601                   MOV         #1,R6
    00001178 AEB4                   BRA         _LexGetRawToken




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000117A E500                   MOV         #0,R5
    0000117C              L1212:                            
           lex.c   726    }
    0000117C 000B                   RTS
    0000117E 0009                   NOP
           lex.c   727    
           lex.c   728    /* handle a #ifdef directive */
           lex.c   729    void LexHashIfdef(struct ParseState *Parser, int IfNot)
    00001180              _LexHashIfdef:                   ; function: LexHashIfdef
                                                           ; frame size=28
    00001180 2FE6                   MOV.L       R14,@-R15
           lex.c   730    {
           lex.c   731        /* get symbol to check */
           lex.c   732        struct Value *IdentValue;
           lex.c   733        struct Value *SavedValue;
           lex.c   734        int IsDefined;
           lex.c   735        enum LexToken Token = LexGetRawToken(Parser, &IdentValue, TRUE);
    00001182 E601                   MOV         #1,R6
    00001184 4F22                   STS.L       PR,@-R15
    00001186 6E43                   MOV         R4,R14
    00001188 7FF4                   ADD         #-12,R15
    0000118A 1F51                   MOV.L       R5,@(4,R15)
    0000118C 65F3                   MOV         R15,R5
    0000118E BEA9                   BSR         _LexGetRawToken
    00001190 64E3                   MOV         R14,R4
           lex.c   736        
           lex.c   737        if (Token != TokenIdentifier)
    00001192 882D                   CMP/EQ      #45,R0
    00001194 8D06                   BT/S        L1213
    00001196 6403                   MOV         R0,R4
           lex.c   738            ProgramFail(Parser, "identifier expected");
    00001198 D317                   MOV.L       L1341+6,R3 ; L753
    0000119A 2F36                   MOV.L       R3,@-R15
    0000119C D217                   MOV.L       L1341+10,R2; _ProgramFail
    0000119E 420B                   JSR         @R2
    000011A0 64E3                   MOV         R14,R4
    000011A2 7F04                   ADD         #4,R15
    000011A4              L1213:                            
           lex.c   739        
           lex.c   740        /* is the identifier defined? */
           lex.c   741        IsDefined = TableGet(&GlobalTable, IdentValue->Val->Identifier, &SavedValue, NULL, NULL, NULL);
    000011A4 D416                   MOV.L       L1341+14,R4; _GlobalTable
    000011A6 E300                   MOV         #0,R3
    000011A8 D216                   MOV.L       L1341+18,R2; _TableGet
    000011AA 6733                   MOV         R3,R7
    000011AC 2F36                   MOV.L       R3,@-R15
    000011AE 2F36                   MOV.L       R3,@-R15
    000011B0 55F2                   MOV.L       @(8,R15),R5
    000011B2 66F3                   MOV         R15,R6
    000011B4 5551                   MOV.L       @(4,R5),R5
    000011B6 7610                   ADD         #16,R6
    000011B8 420B                   JSR         @R2
    000011BA 6552                   MOV.L       @R5,R5
    000011BC 6403                   MOV         R0,R4
           lex.c   742        if (Parser->HashIfEvaluateToLevel == Parser->HashIfLevel && ( (IsDefined && !IfNot) || (!IsDefined && 
                         +IfNot)) )
    000011BE 85ED                   MOV.W       @(26,R14),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011C0 6303                   MOV         R0,R3
    000011C2 85EC                   MOV.W       @(24,R14),R0
    000011C4 3300                   CMP/EQ      R0,R3
    000011C6 8F0D                   BF/S        L1214
    000011C8 7F08                   ADD         #8,R15
    000011CA 2448                   TST         R4,R4
    000011CC 8902                   BT          L1216
    000011CE 52F1                   MOV.L       @(4,R15),R2
    000011D0 2228                   TST         R2,R2
    000011D2 8904                   BT          L1215
    000011D4              L1216:                            
    000011D4 2448                   TST         R4,R4
    000011D6 8B05                   BF          L1214
    000011D8 52F1                   MOV.L       @(4,R15),R2
    000011DA 2228                   TST         R2,R2
    000011DC 8902                   BT          L1214
    000011DE              L1215:                            
           lex.c   743        {
           lex.c   744            /* #if is active, evaluate to this new level */
           lex.c   745            Parser->HashIfEvaluateToLevel++;
    000011DE 85ED                   MOV.W       @(26,R14),R0
    000011E0 7001                   ADD         #1,R0
    000011E2 81ED                   MOV.W       R0,@(26,R14)
    000011E4              L1214:                            
           lex.c   746        }
           lex.c   747        
           lex.c   748        Parser->HashIfLevel++;
    000011E4 85EC                   MOV.W       @(24,R14),R0
    000011E6 7001                   ADD         #1,R0
    000011E8 81EC                   MOV.W       R0,@(24,R14)
           lex.c   749    }
    000011EA 7F0C                   ADD         #12,R15
    000011EC 4F26                   LDS.L       @R15+,PR
    000011EE 000B                   RTS
    000011F0 6EF6                   MOV.L       @R15+,R14
    000011F2              L1341:                            
    000011F2 0110                   .DATA.W     H'0110
    000011F4 <00000000>             .DATA.L     _abort
    000011F8 <00000000>             .DATA.L     L753
    000011FC <00000000>             .DATA.L     _ProgramFail
    00001200 <00000000>             .DATA.L     _GlobalTable
    00001204 <00000000>             .DATA.L     _TableGet
           lex.c   750    
           lex.c   751    /* handle a #if directive */
           lex.c   752    void LexHashIf(struct ParseState *Parser)
    00001208              _LexHashIf:                      ; function: LexHashIf
                                                           ; frame size=60
    00001208 2FE6                   MOV.L       R14,@-R15
           lex.c   753    {
           lex.c   754        /* get symbol to check */
           lex.c   755        struct Value *IdentValue;
           lex.c   756        struct Value *SavedValue;
           lex.c   757        struct ParseState MacroParser;
           lex.c   758        enum LexToken Token = LexGetRawToken(Parser, &IdentValue, TRUE);
    0000120A E601                   MOV         #1,R6
    0000120C 2FD6                   MOV.L       R13,@-R15
    0000120E 6E43                   MOV         R4,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001210 4F22                   STS.L       PR,@-R15
    00001212 7FD8                   ADD         #-40,R15
    00001214 BE66                   BSR         _LexGetRawToken
    00001216 65F3                   MOV         R15,R5
           lex.c   759    
           lex.c   760        if (Token == TokenIdentifier)
    00001218 DD7B                   MOV.L       L1342,R13  ; _ProgramFail
    0000121A 882D                   CMP/EQ      #45,R0
    0000121C 8F2F                   BF/S        L1217
    0000121E 6403                   MOV         R0,R4
           lex.c   761        {
           lex.c   762            /* look up a value from a macro definition */
           lex.c   763            if (!TableGet(&GlobalTable, IdentValue->Val->Identifier, &SavedValue, NULL, NULL, NULL))
    00001220 D47A                   MOV.L       L1342+4,R4 ; _GlobalTable
    00001222 E300                   MOV         #0,R3
    00001224 D27A                   MOV.L       L1342+8,R2 ; _TableGet
    00001226 6733                   MOV         R3,R7
    00001228 2F36                   MOV.L       R3,@-R15
    0000122A 2F36                   MOV.L       R3,@-R15
    0000122C 55F2                   MOV.L       @(8,R15),R5
    0000122E 66F3                   MOV         R15,R6
    00001230 5551                   MOV.L       @(4,R5),R5
    00001232 760C                   ADD         #12,R6
    00001234 420B                   JSR         @R2
    00001236 6552                   MOV.L       @R5,R5
    00001238 2008                   TST         R0,R0
    0000123A 8F09                   BF/S        L1218
    0000123C 7F08                   ADD         #8,R15
           lex.c   764                ProgramFail(Parser, "'%s' is undefined", IdentValue->Val->Identifier);
    0000123E 62F2                   MOV.L       @R15,R2
    00001240 5321                   MOV.L       @(4,R2),R3
    00001242 6132                   MOV.L       @R3,R1
    00001244 D273                   MOV.L       L1342+12,R2; L763
    00001246 2F16                   MOV.L       R1,@-R15
    00001248 2F26                   MOV.L       R2,@-R15
    0000124A 4D0B                   JSR         @R13
    0000124C 64E3                   MOV         R14,R4
    0000124E 7F08                   ADD         #8,R15
    00001250              L1218:                            
           lex.c   765            
           lex.c   766            if (SavedValue->Typ->Base != TypeMacro)
    00001250 50F1                   MOV.L       @(4,R15),R0
    00001252 6002                   MOV.L       @R0,R0
    00001254 6002                   MOV.L       @R0,R0
    00001256 880A                   CMP/EQ      #10,R0
    00001258 8904                   BT          L1219
           lex.c   767                ProgramFail(Parser, "value expected");
    0000125A D26F                   MOV.L       L1342+16,R2; L764
    0000125C 2F26                   MOV.L       R2,@-R15
    0000125E 4D0B                   JSR         @R13
    00001260 64E3                   MOV         R14,R4
    00001262 7F04                   ADD         #4,R15
    00001264              L1219:                            
           lex.c   768            
           lex.c   769            ParserCopy(&MacroParser, &SavedValue->Val->MacroDef.Body);
    00001264 55F1                   MOV.L       @(4,R15),R5
    00001266 64F3                   MOV         R15,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001268 D36C                   MOV.L       L1342+20,R3; _ParserCopy
    0000126A 5551                   MOV.L       @(4,R5),R5
    0000126C 7508                   ADD         #8,R5
    0000126E 430B                   JSR         @R3
    00001270 7408                   ADD         #8,R4
           lex.c   770            Token = LexGetRawToken(&MacroParser, &IdentValue, TRUE);
    00001272 E601                   MOV         #1,R6
    00001274 65F3                   MOV         R15,R5
    00001276 64F3                   MOV         R15,R4
    00001278 BE34                   BSR         _LexGetRawToken
    0000127A 7408                   ADD         #8,R4
    0000127C 6403                   MOV         R0,R4
    0000127E              L1217:                            
           lex.c   771        }
           lex.c   772        
           lex.c   773        if (Token != TokenCharacterConstant)
    0000127E 6043                   MOV         R4,R0
    00001280 8831                   CMP/EQ      #49,R0
    00001282 8904                   BT          L1220
           lex.c   774            ProgramFail(Parser, "value expected");
    00001284 D264                   MOV.L       L1342+16,R2; L764
    00001286 2F26                   MOV.L       R2,@-R15
    00001288 4D0B                   JSR         @R13
    0000128A 64E3                   MOV         R14,R4
    0000128C 7F04                   ADD         #4,R15
    0000128E              L1220:                            
           lex.c   775        
           lex.c   776        /* is the identifier defined? */
           lex.c   777        if (Parser->HashIfEvaluateToLevel == Parser->HashIfLevel && IdentValue->Val->Character)
    0000128E 85ED                   MOV.W       @(26,R14),R0
    00001290 6303                   MOV         R0,R3
    00001292 85EC                   MOV.W       @(24,R14),R0
    00001294 3300                   CMP/EQ      R0,R3
    00001296 8B07                   BF          L1221
    00001298 63F2                   MOV.L       @R15,R3
    0000129A 5231                   MOV.L       @(4,R3),R2
    0000129C 6120                   MOV.B       @R2,R1
    0000129E 2118                   TST         R1,R1
    000012A0 8902                   BT          L1221
           lex.c   778        {
           lex.c   779            /* #if is active, evaluate to this new level */
           lex.c   780            Parser->HashIfEvaluateToLevel++;
    000012A2 85ED                   MOV.W       @(26,R14),R0
    000012A4 7001                   ADD         #1,R0
    000012A6 81ED                   MOV.W       R0,@(26,R14)
    000012A8              L1221:                            
           lex.c   781        }
           lex.c   782        
           lex.c   783        Parser->HashIfLevel++;
    000012A8 85EC                   MOV.W       @(24,R14),R0
    000012AA 7001                   ADD         #1,R0
    000012AC 81EC                   MOV.W       R0,@(24,R14)
           lex.c   784    }
    000012AE 7F28                   ADD         #40,R15
    000012B0 4F26                   LDS.L       @R15+,PR
    000012B2 6DF6                   MOV.L       @R15+,R13
    000012B4 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012B6 6EF6                   MOV.L       @R15+,R14
           lex.c   785    
           lex.c   786    /* handle a #else directive */
           lex.c   787    void LexHashElse(struct ParseState *Parser)
    000012B8              _LexHashElse:                    ; function: LexHashElse
                                                           ; frame size=12
    000012B8 2FE6                   MOV.L       R14,@-R15
    000012BA 6E43                   MOV         R4,R14
    000012BC 4F22                   STS.L       PR,@-R15
           lex.c   788    {
           lex.c   789        if (Parser->HashIfEvaluateToLevel == Parser->HashIfLevel - 1)
    000012BE 85ED                   MOV.W       @(26,R14),R0
    000012C0 6303                   MOV         R0,R3
    000012C2 85EC                   MOV.W       @(24,R14),R0
    000012C4 70FF                   ADD         #-1,R0
    000012C6 3300                   CMP/EQ      R0,R3
    000012C8 8B03                   BF          L1222
           lex.c   790            Parser->HashIfEvaluateToLevel++;     /* #if was not active, make this next section active */
    000012CA 85ED                   MOV.W       @(26,R14),R0
    000012CC 7001                   ADD         #1,R0
    000012CE A011                   BRA         L1223
    000012D0 81ED                   MOV.W       R0,@(26,R14)
    000012D2              L1222:                            
           lex.c   791            
           lex.c   792        else if (Parser->HashIfEvaluateToLevel == Parser->HashIfLevel)
    000012D2 85ED                   MOV.W       @(26,R14),R0
    000012D4 6303                   MOV         R0,R3
    000012D6 85EC                   MOV.W       @(24,R14),R0
    000012D8 3300                   CMP/EQ      R0,R3
    000012DA 8B0B                   BF          L1223
           lex.c   793        {
           lex.c   794            /* #if was active, now go inactive */
           lex.c   795            if (Parser->HashIfLevel == 0)
    000012DC 85EC                   MOV.W       @(24,R14),R0
    000012DE 2008                   TST         R0,R0
    000012E0 8B05                   BF          L1225
           lex.c   796                ProgramFail(Parser, "#else without #if");
    000012E2 D24F                   MOV.L       L1342+24,R2; L770
    000012E4 D348                   MOV.L       L1342,R3   ; _ProgramFail
    000012E6 2F26                   MOV.L       R2,@-R15
    000012E8 430B                   JSR         @R3
    000012EA 64E3                   MOV         R14,R4
    000012EC 7F04                   ADD         #4,R15
    000012EE              L1225:                            
           lex.c   797                
           lex.c   798            Parser->HashIfEvaluateToLevel--;
    000012EE 85ED                   MOV.W       @(26,R14),R0
    000012F0 70FF                   ADD         #-1,R0
    000012F2 81ED                   MOV.W       R0,@(26,R14)
    000012F4              L1223:                            
           lex.c   799        }
           lex.c   800    }
    000012F4 4F26                   LDS.L       @R15+,PR
    000012F6 000B                   RTS
    000012F8 6EF6                   MOV.L       @R15+,R14
           lex.c   801    
           lex.c   802    /* handle a #endif directive */




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   803    void LexHashEndif(struct ParseState *Parser)
    000012FA              _LexHashEndif:                   ; function: LexHashEndif
                                                           ; frame size=12
    000012FA 2FE6                   MOV.L       R14,@-R15
    000012FC 4F22                   STS.L       PR,@-R15
    000012FE 6E43                   MOV         R4,R14
           lex.c   804    {
           lex.c   805        if (Parser->HashIfLevel == 0)
    00001300 85EC                   MOV.W       @(24,R14),R0
    00001302 2008                   TST         R0,R0
    00001304 8B05                   BF          L1226
           lex.c   806            ProgramFail(Parser, "#endif without #if");
    00001306 D247                   MOV.L       L1342+28,R2; L774
    00001308 D33F                   MOV.L       L1342,R3   ; _ProgramFail
    0000130A 2F26                   MOV.L       R2,@-R15
    0000130C 430B                   JSR         @R3
    0000130E 64E3                   MOV         R14,R4
    00001310 7F04                   ADD         #4,R15
    00001312              L1226:                            
           lex.c   807    
           lex.c   808        Parser->HashIfLevel--;
    00001312 85EC                   MOV.W       @(24,R14),R0
    00001314 70FF                   ADD         #-1,R0
    00001316 81EC                   MOV.W       R0,@(24,R14)
           lex.c   809        if (Parser->HashIfEvaluateToLevel > Parser->HashIfLevel)
    00001318 85ED                   MOV.W       @(26,R14),R0
    0000131A 6303                   MOV         R0,R3
    0000131C 85EC                   MOV.W       @(24,R14),R0
    0000131E 3307                   CMP/GT      R0,R3
    00001320 8B01                   BF          L1227
           lex.c   810            Parser->HashIfEvaluateToLevel = Parser->HashIfLevel;
    00001322 85EC                   MOV.W       @(24,R14),R0
    00001324 81ED                   MOV.W       R0,@(26,R14)
    00001326              L1227:                            
           lex.c   811    }
    00001326 4F26                   LDS.L       @R15+,PR
    00001328 000B                   RTS
    0000132A 6EF6                   MOV.L       @R15+,R14
           lex.c   812    
           lex.c   813    /* get the next token given a parser state, pre-processing as we go */
           lex.c   814    enum LexToken LexGetToken(struct ParseState *Parser, struct Value **Value, int IncPos)
    0000132C              _LexGetToken:                    ; function: LexGetToken
                                                           ; frame size=36
    0000132C 2FE6                   MOV.L       R14,@-R15
    0000132E 6E43                   MOV         R4,R14
    00001330 2FD6                   MOV.L       R13,@-R15
    00001332 6D63                   MOV         R6,R13
    00001334 2FC6                   MOV.L       R12,@-R15
    00001336 2DD8                   TST         R13,R13
    00001338 2FB6                   MOV.L       R11,@-R15
    0000133A 2FA6                   MOV.L       R10,@-R15
    0000133C 2F96                   MOV.L       R9,@-R15
    0000133E EA01                   MOV         #1,R10
    00001340 2F86                   MOV.L       R8,@-R15
    00001342 E900                   MOV         #0,R9
    00001344 4F22                   STS.L       PR,@-R15
    00001346 0829                   MOVT        R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001348 7FFC                   ADD         #-4,R15
    0000134A 2F52                   MOV.L       R5,@R15
           lex.c   815    {
           lex.c   816        enum LexToken Token;
           lex.c   817        int TryNextToken;
           lex.c   818        
           lex.c   819        /* implements the pre-processor #if commands */
           lex.c   820        do
    0000134C              L1229:                            
           lex.c   821        {
           lex.c   822            int WasPreProcToken = TRUE;
           lex.c   823    
           lex.c   824            Token = LexGetRawToken(Parser, Value, IncPos);
    0000134C 65F2                   MOV.L       @R15,R5
    0000134E 6BA3                   MOV         R10,R11
    00001350 66D3                   MOV         R13,R6
    00001352 BDC7                   BSR         _LexGetRawToken
    00001354 64E3                   MOV         R14,R4
           lex.c   825            switch (Token)
    00001356 8856                   CMP/EQ      #86,R0
    00001358 8D0A                   BT/S        L945
    0000135A 6C03                   MOV         R0,R12
    0000135C 8857                   CMP/EQ      #87,R0
    0000135E 890F                   BT          L946
    00001360 8855                   CMP/EQ      #85,R0
    00001362 8915                   BT          L947
    00001364 8858                   CMP/EQ      #88,R0
    00001366 891A                   BT          L948
    00001368 8859                   CMP/EQ      #89,R0
    0000136A 891F                   BT          L949
    0000136C A025                   BRA         L950
    0000136E 0009                   NOP
    00001370              L945:                            ; case label 
           lex.c   826            {
           lex.c   827                case TokenHashIfdef:    LexHashIncPos(Parser, IncPos); LexHashIfdef(Parser, FALSE); break;
    00001370 65D3                   MOV         R13,R5
    00001372 BEFE                   BSR         _LexHashIncPos
    00001374 64E3                   MOV         R14,R4
    00001376 E500                   MOV         #0,R5
    00001378 BF02                   BSR         _LexHashIfdef
    0000137A 64E3                   MOV         R14,R4
    0000137C A01E                   BRA         L1230
    0000137E 0009                   NOP
    00001380              L946:                            ; case label 
           lex.c   828                case TokenHashIfndef:   LexHashIncPos(Parser, IncPos); LexHashIfdef(Parser, TRUE); break;
    00001380 65D3                   MOV         R13,R5
    00001382 BEF6                   BSR         _LexHashIncPos
    00001384 64E3                   MOV         R14,R4
    00001386 E501                   MOV         #1,R5
    00001388 BEFA                   BSR         _LexHashIfdef
    0000138A 64E3                   MOV         R14,R4
    0000138C A016                   BRA         L1230
    0000138E 0009                   NOP
    00001390              L947:                            ; case label 
           lex.c   829                case TokenHashIf:       LexHashIncPos(Parser, IncPos); LexHashIf(Parser); break;
    00001390 65D3                   MOV         R13,R5
    00001392 BEEE                   BSR         _LexHashIncPos




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001394 64E3                   MOV         R14,R4
    00001396 BF37                   BSR         _LexHashIf
    00001398 64E3                   MOV         R14,R4
    0000139A A00F                   BRA         L1230
    0000139C 0009                   NOP
    0000139E              L948:                            ; case label 
           lex.c   830                case TokenHashElse:     LexHashIncPos(Parser, IncPos); LexHashElse(Parser); break;
    0000139E 65D3                   MOV         R13,R5
    000013A0 BEE7                   BSR         _LexHashIncPos
    000013A2 64E3                   MOV         R14,R4
    000013A4 BF88                   BSR         _LexHashElse
    000013A6 64E3                   MOV         R14,R4
    000013A8 A008                   BRA         L1230
    000013AA 0009                   NOP
    000013AC              L949:                            ; case label 
           lex.c   831                case TokenHashEndif:    LexHashIncPos(Parser, IncPos); LexHashEndif(Parser); break;
    000013AC 65D3                   MOV         R13,R5
    000013AE BEE0                   BSR         _LexHashIncPos
    000013B0 64E3                   MOV         R14,R4
    000013B2 BFA2                   BSR         _LexHashEndif
    000013B4 64E3                   MOV         R14,R4
    000013B6 A001                   BRA         L1230
    000013B8 0009                   NOP
    000013BA              L950:                            ; default label 
           lex.c   832                default:                WasPreProcToken = FALSE; break;
    000013BA 6B93                   MOV         R9,R11
    000013BC              L1230:                            
           lex.c   833            }
           lex.c   834    
           lex.c   835            /* if we're going to reject this token, increment the token pointer to the next one */
           lex.c   836            TryNextToken = (Parser->HashIfEvaluateToLevel < Parser->HashIfLevel && Token != TokenEOF) || WasPr
                         +eProcToken;
    000013BC 85ED                   MOV.W       @(26,R14),R0
    000013BE 6303                   MOV         R0,R3
    000013C0 85EC                   MOV.W       @(24,R14),R0
    000013C2 3303                   CMP/GE      R0,R3
    000013C4 8902                   BT          L1232
    000013C6 60C3                   MOV         R12,R0
    000013C8 885D                   CMP/EQ      #93,R0
    000013CA 8B03                   BF          L1231
    000013CC              L1232:                            
    000013CC 2BB8                   TST         R11,R11
    000013CE 8B01                   BF          L1231
    000013D0 A001                   BRA         L1233
    000013D2 EB00                   MOV         #0,R11
    000013D4              L1231:                            
    000013D4 EB01                   MOV         #1,R11
    000013D6              L1233:                            
           lex.c   837            if (!IncPos && TryNextToken)
    000013D6 2888                   TST         R8,R8
    000013D8 8905                   BT          L1234
    000013DA 2BB8                   TST         R11,R11
    000013DC 8903                   BT          L1234
           lex.c   838                LexGetRawToken(Parser, NULL, TRUE);
    000013DE E601                   MOV         #1,R6
    000013E0 E500                   MOV         #0,R5
    000013E2 BD7F                   BSR         _LexGetRawToken




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013E4 64E3                   MOV         R14,R4
    000013E6              L1234:                            
           lex.c   839                
           lex.c   840        } while (TryNextToken);
    000013E6 2BB8                   TST         R11,R11
    000013E8 8BB0                   BF          L1229
           lex.c   841        
           lex.c   842        return Token;
    000013EA 60C3                   MOV         R12,R0
           lex.c   843    }
    000013EC 7F04                   ADD         #4,R15
    000013EE 4F26                   LDS.L       @R15+,PR
    000013F0 68F6                   MOV.L       @R15+,R8
    000013F2 69F6                   MOV.L       @R15+,R9
    000013F4 6AF6                   MOV.L       @R15+,R10
    000013F6 6BF6                   MOV.L       @R15+,R11
    000013F8 6CF6                   MOV.L       @R15+,R12
    000013FA 6DF6                   MOV.L       @R15+,R13
    000013FC 000B                   RTS
    000013FE 6EF6                   MOV.L       @R15+,R14
           lex.c   844    
           lex.c   845    /* take a quick peek at the next token, skipping any pre-processing */
           lex.c   846    enum LexToken LexRawPeekToken(struct ParseState *Parser)
    00001400              _LexRawPeekToken:                ; function: LexRawPeekToken
                                                           ; frame size=0
           lex.c   847    {
           lex.c   848        return (enum LexToken)*(unsigned char *)Parser->Pos;
    00001400 6042                   MOV.L       @R4,R0
    00001402 6000                   MOV.B       @R0,R0
           lex.c   849    }
    00001404 000B                   RTS
    00001406 600C                   EXTU.B      R0,R0
    00001408              L1342:                            
    00001408 <00000000>             .DATA.L     _ProgramFail
    0000140C <00000000>             .DATA.L     _GlobalTable
    00001410 <00000000>             .DATA.L     _TableGet
    00001414 <00000000>             .DATA.L     L763
    00001418 <00000000>             .DATA.L     L764
    0000141C <00000000>             .DATA.L     _ParserCopy
    00001420 <00000000>             .DATA.L     L770
    00001424 <00000000>             .DATA.L     L774
           lex.c   850    
           lex.c   851    /* find the end of the line */
           lex.c   852    void LexToEndOfLine(struct ParseState *Parser)
    00001428              _LexToEndOfLine:                 ; function: LexToEndOfLine
                                                           ; frame size=8
    00001428 2FE6                   MOV.L       R14,@-R15
    0000142A 6E43                   MOV         R4,R14
    0000142C 4F22                   STS.L       PR,@-R15
           lex.c   853    {
           lex.c   854        while (TRUE)
    0000142E              L1238:                            
           lex.c   855        {
           lex.c   856            enum LexToken Token = (enum LexToken)*(unsigned char *)Parser->Pos;
    0000142E 64E2                   MOV.L       @R14,R4
    00001430 6440                   MOV.B       @R4,R4
    00001432 644C                   EXTU.B      R4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   857            if (Token == TokenEndOfLine || Token == TokenEOF)
    00001434 6043                   MOV         R4,R0
    00001436 885E                   CMP/EQ      #94,R0
    00001438 8908                   BT          L1241
    0000143A 6043                   MOV         R4,R0
    0000143C 885D                   CMP/EQ      #93,R0
    0000143E 8905                   BT          L1241
           lex.c   858                return;
           lex.c   859            else
           lex.c   860                LexGetRawToken(Parser, NULL, TRUE);
    00001440 E601                   MOV         #1,R6
    00001442 E500                   MOV         #0,R5
    00001444 BD4E                   BSR         _LexGetRawToken
    00001446 64E3                   MOV         R14,R4
    00001448 AFF1                   BRA         L1238
    0000144A 0009                   NOP
    0000144C              L1241:                            
           lex.c   861        }
           lex.c   862    }
    0000144C 4F26                   LDS.L       @R15+,PR
    0000144E 000B                   RTS
    00001450 6EF6                   MOV.L       @R15+,R14
           lex.c   863    
           lex.c   864    /* copy the tokens from StartParser to EndParser into new memory, removing TokenEOFs and terminate with a 
                         +TokenEndOfFunction */
           lex.c   865    void *LexCopyTokens(struct ParseState *StartParser, struct ParseState *EndParser)
    00001452              _LexCopyTokens:                  ; function: LexCopyTokens
                                                           ; frame size=40
    00001452 2FE6                   MOV.L       R14,@-R15
    00001454 2FD6                   MOV.L       R13,@-R15
    00001456 2FC6                   MOV.L       R12,@-R15
    00001458 2FB6                   MOV.L       R11,@-R15
    0000145A 6C53                   MOV         R5,R12
    0000145C D37D                   MOV.L       L1343+6,R3 ; __$InteractiveHead
    0000145E 2FA6                   MOV.L       R10,@-R15
    00001460 2F96                   MOV.L       R9,@-R15
    00001462 6943                   MOV         R4,R9
    00001464 2F86                   MOV.L       R8,@-R15
    00001466 4F22                   STS.L       PR,@-R15
    00001468 D879                   MOV.L       L1343+2,R8 ; _memcpy
    0000146A 7FF8                   ADD         #-8,R15
    0000146C 6432                   MOV.L       @R3,R4
    0000146E 2448                   TST         R4,R4
    00001470 8D20                   BT/S        L825
           lex.c   866    {
           lex.c   867        int MemSize = 0;
           lex.c   868        int CopySize;
           lex.c   869        unsigned char *Pos = (unsigned char *)StartParser->Pos;
    00001472 6B92                   MOV.L       @R9,R11
           lex.c   870        unsigned char *NewTokens;
           lex.c   871        unsigned char *NewTokenPos;
           lex.c   872        struct TokenLine *ILine;
           lex.c   873        
           lex.c   874        if (InteractiveHead == NULL)
           lex.c   875        { 
           lex.c   876            /* non-interactive mode - copy the tokens */
           lex.c   877            MemSize = EndParser->Pos - StartParser->Pos;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   878            NewTokens = VariableAlloc(StartParser, MemSize + TOKEN_DATA_OFFSET, TRUE);
           lex.c   879            memcpy(NewTokens, (void *)StartParser->Pos, MemSize);
           lex.c   880        }
           lex.c   881        else
           lex.c   882        { 
           lex.c   883            /* we're in interactive mode - add up line by line */
           lex.c   884            for (InteractiveCurrentLine = InteractiveHead; InteractiveCurrentLine != NULL && (Pos < &Interacti
                         +veCurrentLine->Tokens[0] || Pos >= &InteractiveCurrentLine->Tokens[InteractiveCurrentLine->NumBytes]); Int
                         +eractiveCurrentLine = InteractiveCurrentLine->Next)
    00001474 DE78                   MOV.L       L1343+10,R14; __$InteractiveCurrentLine
    00001476 A003                   BRA         L1245
    00001478 2E42                   MOV.L       R4,@R14
    0000147A              L1246:                            
    0000147A 63E2                   MOV.L       @R14,R3
    0000147C 6232                   MOV.L       @R3,R2
    0000147E 2E22                   MOV.L       R2,@R14
    00001480              L1245:                            
    00001480 63E2                   MOV.L       @R14,R3
    00001482 2338                   TST         R3,R3
    00001484 890A                   BT          L1247
    00001486 63E2                   MOV.L       @R14,R3
    00001488 5231                   MOV.L       @(4,R3),R2
    0000148A 3B22                   CMP/HS      R2,R11
    0000148C 8BF5                   BF          L1246
    0000148E 61E2                   MOV.L       @R14,R1
    00001490 6313                   MOV         R1,R3
    00001492 5332                   MOV.L       @(8,R3),R3
    00001494 5211                   MOV.L       @(4,R1),R2
    00001496 323C                   ADD         R3,R2
    00001498 3B22                   CMP/HS      R2,R11
    0000149A 89EE                   BT          L1246
    0000149C              L1247:                            
           lex.c   885            {} /* find the line we just counted */
           lex.c   886            
           lex.c   887            if (EndParser->Pos >= StartParser->Pos && EndParser->Pos < &InteractiveCurrentLine->Tokens[Interac
                         +tiveCurrentLine->NumBytes])
    0000149C 64C2                   MOV.L       @R12,R4
    0000149E 6292                   MOV.L       @R9,R2
    000014A0 3422                   CMP/HS      R2,R4
    000014A2 8B15                   BF          L1248
    000014A4 D36C                   MOV.L       L1343+10,R3; __$InteractiveCurrentLine
    000014A6 6132                   MOV.L       @R3,R1
    000014A8 6213                   MOV         R1,R2
    000014AA 5222                   MOV.L       @(8,R2),R2
    000014AC 5111                   MOV.L       @(4,R1),R1
    000014AE 312C                   ADD         R2,R1
    000014B0 3412                   CMP/HS      R1,R4
    000014B2 890D                   BT          L1248
    000014B4              L825:
           lex.c   888            { 
           lex.c   889                /* all on a single line */
           lex.c   890                MemSize = EndParser->Pos - StartParser->Pos;
    000014B4 6392                   MOV.L       @R9,R3
           lex.c   891                NewTokens = VariableAlloc(StartParser, MemSize + TOKEN_DATA_OFFSET, TRUE);
    000014B6 E601                   MOV         #1,R6
    000014B8 D268                   MOV.L       L1343+14,R2; _VariableAlloc
    000014BA 6AC2                   MOV.L       @R12,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014BC 3A38                   SUB         R3,R10
    000014BE 65A3                   MOV         R10,R5
    000014C0 7502                   ADD         #2,R5
    000014C2 420B                   JSR         @R2
    000014C4 6493                   MOV         R9,R4
           lex.c   892                memcpy(NewTokens, (void *)StartParser->Pos, MemSize);
    000014C6 66A3                   MOV         R10,R6
    000014C8 2F02                   MOV.L       R0,@R15
    000014CA 6592                   MOV.L       @R9,R5
    000014CC A057                   BRA         L1301
    000014CE 6403                   MOV         R0,R4
    000014D0              L1248:                            
           lex.c   893            }
           lex.c   894            else
           lex.c   895            { 
           lex.c   896                /* it's spread across multiple lines */
           lex.c   897                MemSize = &InteractiveCurrentLine->Tokens[InteractiveCurrentLine->NumBytes-TOKEN_DATA_OFFSET] 
                         +- Pos;
    000014D0 64E2                   MOV.L       @R14,R4
    000014D2 5A42                   MOV.L       @(8,R4),R10
    000014D4 5341                   MOV.L       @(4,R4),R3
    000014D6 7AFE                   ADD         #-2,R10
    000014D8 3A3C                   ADD         R3,R10
    000014DA 3AB8                   SUB         R11,R10
           lex.c   898    
           lex.c   899                for (ILine = InteractiveCurrentLine->Next; ILine != NULL && (EndParser->Pos < &ILine->Tokens[0
                         +] || EndParser->Pos >= &ILine->Tokens[ILine->NumBytes]); ILine = ILine->Next)
    000014DC A004                   BRA         L1250
    000014DE 6D42                   MOV.L       @R4,R13
    000014E0              L1251:                            
           lex.c   900                    MemSize += ILine->NumBytes - TOKEN_DATA_OFFSET;
    000014E0 53D2                   MOV.L       @(8,R13),R3
    000014E2 73FE                   ADD         #-2,R3
    000014E4 6DD2                   MOV.L       @R13,R13
    000014E6 3A3C                   ADD         R3,R10
    000014E8              L1250:                            
    000014E8 2DD8                   TST         R13,R13
    000014EA 8909                   BT          L1252
    000014EC 53D1                   MOV.L       @(4,R13),R3
    000014EE 62C2                   MOV.L       @R12,R2
    000014F0 3232                   CMP/HS      R3,R2
    000014F2 8BF5                   BF          L1251
    000014F4 53D2                   MOV.L       @(8,R13),R3
    000014F6 51D1                   MOV.L       @(4,R13),R1
    000014F8 62C2                   MOV.L       @R12,R2
    000014FA 313C                   ADD         R3,R1
    000014FC 3212                   CMP/HS      R1,R2
    000014FE 89EF                   BT          L1251
    00001500              L1252:                            
           lex.c   901                
           lex.c   902                assert(ILine != NULL);
    00001500 2DD8                   TST         R13,R13
    00001502 8B02                   BF          L1254
    00001504 D356                   MOV.L       L1343+18,R3; _abort
    00001506 430B                   JSR         @R3
    00001508 0009                   NOP
    0000150A              L1254:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   903                MemSize += EndParser->Pos - &ILine->Tokens[0];
           lex.c   904                NewTokens = VariableAlloc(StartParser, MemSize + TOKEN_DATA_OFFSET, TRUE);
    0000150A E601                   MOV         #1,R6
    0000150C 53D1                   MOV.L       @(4,R13),R3
    0000150E 61C2                   MOV.L       @R12,R1
    00001510 3138                   SUB         R3,R1
    00001512 3A1C                   ADD         R1,R10
    00001514 D351                   MOV.L       L1343+14,R3; _VariableAlloc
    00001516 65A3                   MOV         R10,R5
    00001518 7502                   ADD         #2,R5
    0000151A 430B                   JSR         @R3
    0000151C 6493                   MOV         R9,R4
           lex.c   905                
           lex.c   906                CopySize = &InteractiveCurrentLine->Tokens[InteractiveCurrentLine->NumBytes-TOKEN_DATA_OFFSET]
                         + - Pos;
           lex.c   907                memcpy(NewTokens, Pos, CopySize);
    0000151E 65B3                   MOV         R11,R5
    00001520 2F02                   MOV.L       R0,@R15
    00001522 6DE2                   MOV.L       @R14,R13
    00001524 63D3                   MOV         R13,R3
    00001526 5232                   MOV.L       @(8,R3),R2
    00001528 5DD1                   MOV.L       @(4,R13),R13
    0000152A 72FE                   ADD         #-2,R2
    0000152C 3D2C                   ADD         R2,R13
    0000152E 3DB8                   SUB         R11,R13
    00001530 66D3                   MOV         R13,R6
    00001532 480B                   JSR         @R8
    00001534 6403                   MOV         R0,R4
           lex.c   908                NewTokenPos = NewTokens + CopySize;
    00001536 6BF2                   MOV.L       @R15,R11
    00001538 3BDC                   ADD         R13,R11
           lex.c   909                for (ILine = InteractiveCurrentLine->Next; ILine != NULL && (EndParser->Pos < &ILine->Tokens[0
                         +] || EndParser->Pos >= &ILine->Tokens[ILine->NumBytes]); ILine = ILine->Next)
    0000153A A008                   BRA         L1300
    0000153C 6DE2                   MOV.L       @R14,R13
    0000153E              L1256:                            
           lex.c   910                {
           lex.c   911                    memcpy(NewTokenPos, &ILine->Tokens[0], ILine->NumBytes - TOKEN_DATA_OFFSET);
    0000153E 56D2                   MOV.L       @(8,R13),R6
    00001540 55D1                   MOV.L       @(4,R13),R5
    00001542 76FE                   ADD         #-2,R6
    00001544 480B                   JSR         @R8
    00001546 64B3                   MOV         R11,R4
           lex.c   912                    NewTokenPos += ILine->NumBytes-TOKEN_DATA_OFFSET;
    00001548 52D2                   MOV.L       @(8,R13),R2
    0000154A 72FE                   ADD         #-2,R2
    0000154C 3B2C                   ADD         R2,R11
    0000154E              L1300:                            
    0000154E 6DD2                   MOV.L       @R13,R13
    00001550 2DD8                   TST         R13,R13
    00001552 8909                   BT          L1257
    00001554 52D1                   MOV.L       @(4,R13),R2
    00001556 63C2                   MOV.L       @R12,R3
    00001558 3322                   CMP/HS      R2,R3
    0000155A 8BF0                   BF          L1256
    0000155C 53D2                   MOV.L       @(8,R13),R3
    0000155E 51D1                   MOV.L       @(4,R13),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001560 62C2                   MOV.L       @R12,R2
    00001562 313C                   ADD         R3,R1
    00001564 3212                   CMP/HS      R1,R2
    00001566 89EA                   BT          L1256
    00001568              L1257:                            
           lex.c   913                }
           lex.c   914                assert(ILine != NULL);
    00001568 2DD8                   TST         R13,R13
    0000156A 8B02                   BF          L1259
    0000156C D33C                   MOV.L       L1343+18,R3; _abort
    0000156E 430B                   JSR         @R3
    00001570 0009                   NOP
    00001572              L1259:                            
           lex.c   915                memcpy(NewTokenPos, &ILine->Tokens[0], EndParser->Pos - &ILine->Tokens[0]);
    00001572 64B3                   MOV         R11,R4
    00001574 53D1                   MOV.L       @(4,R13),R3
    00001576 1F31                   MOV.L       R3,@(4,R15)
    00001578 66C2                   MOV.L       @R12,R6
    0000157A 6533                   MOV         R3,R5
    0000157C 3638                   SUB         R3,R6
    0000157E              L1301:                            
    0000157E 480B                   JSR         @R8
    00001580 0009                   NOP
           lex.c   916            }
           lex.c   917        }
           lex.c   918        
           lex.c   919        NewTokens[MemSize] = (unsigned char)TokenEndOfFunction;
    00001582 E35F                   MOV         #95,R3
    00001584 60F2                   MOV.L       @R15,R0
    00001586 0A34                   MOV.B       R3,@(R0,R10)
           lex.c   920            
           lex.c   921        return NewTokens;
    00001588 60F2                   MOV.L       @R15,R0
           lex.c   922    }
    0000158A 7F08                   ADD         #8,R15
    0000158C 4F26                   LDS.L       @R15+,PR
    0000158E 68F6                   MOV.L       @R15+,R8
    00001590 69F6                   MOV.L       @R15+,R9
    00001592 6AF6                   MOV.L       @R15+,R10
    00001594 6BF6                   MOV.L       @R15+,R11
    00001596 6CF6                   MOV.L       @R15+,R12
    00001598 6DF6                   MOV.L       @R15+,R13
    0000159A 000B                   RTS
    0000159C 6EF6                   MOV.L       @R15+,R14
           lex.c   923    
           lex.c   924    /* indicate that we've completed up to this point in the interactive input and free expired tokens */
           lex.c   925    void LexInteractiveClear(struct ParseState *Parser)
    0000159E              _LexInteractiveClear:            ; function: LexInteractiveClear
                                                           ; frame size=20
    0000159E 2FE6                   MOV.L       R14,@-R15
    000015A0 2FD6                   MOV.L       R13,@-R15
    000015A2 2FC6                   MOV.L       R12,@-R15
    000015A4 4F22                   STS.L       PR,@-R15
    000015A6 7FFC                   ADD         #-4,R15
    000015A8 DD2E                   MOV.L       L1343+22,R13; _HeapFreeMem
    000015AA DE2A                   MOV.L       L1343+6,R14; __$InteractiveHead
           lex.c   926    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           lex.c   927        while (InteractiveHead != NULL)
    000015AC A008                   BRA         L1261
    000015AE 2F42                   MOV.L       R4,@R15
    000015B0              L1262:                            
           lex.c   928        {
           lex.c   929            struct TokenLine *NextLine = InteractiveHead->Next;
    000015B0 6CE2                   MOV.L       @R14,R12
    000015B2 6CC2                   MOV.L       @R12,R12
           lex.c   930            
           lex.c   931            HeapFreeMem(InteractiveHead->Tokens);
    000015B4 64E2                   MOV.L       @R14,R4
    000015B6 4D0B                   JSR         @R13
    000015B8 5441                   MOV.L       @(4,R4),R4
           lex.c   932            HeapFreeMem(InteractiveHead);
    000015BA 4D0B                   JSR         @R13
    000015BC 64E2                   MOV.L       @R14,R4
           lex.c   933            InteractiveHead = NextLine;
    000015BE 2EC2                   MOV.L       R12,@R14
    000015C0              L1261:                            
    000015C0 63E2                   MOV.L       @R14,R3
    000015C2 2338                   TST         R3,R3
    000015C4 8BF4                   BF          L1262
           lex.c   934        }
           lex.c   935    
           lex.c   936        if (Parser != NULL)
    000015C6 63F2                   MOV.L       @R15,R3
    000015C8 2338                   TST         R3,R3
    000015CA 8D02                   BT/S        L1263
    000015CC E400                   MOV         #0,R4
           lex.c   937            Parser->Pos = NULL;
    000015CE 63F2                   MOV.L       @R15,R3
    000015D0 2342                   MOV.L       R4,@R3
    000015D2              L1263:                            
           lex.c   938        InteractiveTail = NULL;
    000015D2 D325                   MOV.L       L1343+26,R3; __$InteractiveTail
    000015D4 2342                   MOV.L       R4,@R3
           lex.c   939    }
    000015D6 7F04                   ADD         #4,R15
    000015D8 4F26                   LDS.L       @R15+,PR
    000015DA 6CF6                   MOV.L       @R15+,R12
    000015DC 6DF6                   MOV.L       @R15+,R13
    000015DE 000B                   RTS
    000015E0 6EF6                   MOV.L       @R15+,R14
           lex.c   940    
           lex.c   941    /* indicate that we've completed up to this point in the interactive input and free expired tokens */
           lex.c   942    void LexInteractiveCompleted(struct ParseState *Parser)
    000015E2              _LexInteractiveCompleted:        ; function: LexInteractiveCompleted
                                                           ; frame size=28
    000015E2 2FE6                   MOV.L       R14,@-R15
    000015E4 2FD6                   MOV.L       R13,@-R15
    000015E6 2FC6                   MOV.L       R12,@-R15
    000015E8 2FB6                   MOV.L       R11,@-R15
    000015EA 6C43                   MOV         R4,R12
    000015EC DE19                   MOV.L       L1343+6,R14; __$InteractiveHead
    000015EE 2FA6                   MOV.L       R10,@-R15
    000015F0 2F96                   MOV.L       R9,@-R15
    000015F2 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015F4 D91C                   MOV.L       L1343+26,R9; __$InteractiveTail
    000015F6 DB1B                   MOV.L       L1343+22,R11; _HeapFreeMem
           lex.c   943    {
           lex.c   944        while (InteractiveHead != NULL && !(Parser->Pos >= &InteractiveHead->Tokens[0] && Parser->Pos < &Inter
                         +activeHead->Tokens[InteractiveHead->NumBytes]))
    000015F8 A00D                   BRA         L1264
    000015FA ED00                   MOV         #0,R13
    000015FC              L1265:                            
           lex.c   945        { 
           lex.c   946            /* this token line is no longer needed - free it */
           lex.c   947            struct TokenLine *NextLine = InteractiveHead->Next;
    000015FC 6AE2                   MOV.L       @R14,R10
    000015FE 6AA2                   MOV.L       @R10,R10
           lex.c   948            
           lex.c   949            HeapFreeMem(InteractiveHead->Tokens);
    00001600 64E2                   MOV.L       @R14,R4
    00001602 4B0B                   JSR         @R11
    00001604 5441                   MOV.L       @(4,R4),R4
           lex.c   950            HeapFreeMem(InteractiveHead);
    00001606 4B0B                   JSR         @R11
    00001608 64E2                   MOV.L       @R14,R4
           lex.c   951            InteractiveHead = NextLine;
           lex.c   952            
           lex.c   953            if (InteractiveHead == NULL)
    0000160A 63A3                   MOV         R10,R3
    0000160C 2338                   TST         R3,R3
    0000160E 8F02                   BF/S        L1264
    00001610 2EA2                   MOV.L       R10,@R14
           lex.c   954            { 
           lex.c   955                /* we've emptied the list */
           lex.c   956                Parser->Pos = NULL;
    00001612 2CD2                   MOV.L       R13,@R12
           lex.c   957                InteractiveTail = NULL;
    00001614 29D2                   MOV.L       R13,@R9
    00001616              L1264:                            
    00001616 63E2                   MOV.L       @R14,R3
    00001618 2338                   TST         R3,R3
    0000161A 890C                   BT          L1267
    0000161C 63E2                   MOV.L       @R14,R3
    0000161E 5231                   MOV.L       @(4,R3),R2
    00001620 61C2                   MOV.L       @R12,R1
    00001622 3122                   CMP/HS      R2,R1
    00001624 8BEA                   BF          L1265
    00001626 60E2                   MOV.L       @R14,R0
    00001628 61C2                   MOV.L       @R12,R1
    0000162A 6303                   MOV         R0,R3
    0000162C 5201                   MOV.L       @(4,R0),R2
    0000162E 5332                   MOV.L       @(8,R3),R3
    00001630 323C                   ADD         R3,R2
    00001632 3122                   CMP/HS      R2,R1
    00001634 89E2                   BT          L1265
    00001636              L1267:                            
           lex.c   958            }
           lex.c   959        }
           lex.c   960    }
    00001636 4F26                   LDS.L       @R15+,PR
    00001638 69F6                   MOV.L       @R15+,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000163A 6AF6                   MOV.L       @R15+,R10
    0000163C 6BF6                   MOV.L       @R15+,R11
    0000163E 6CF6                   MOV.L       @R15+,R12
    00001640 6DF6                   MOV.L       @R15+,R13
    00001642 000B                   RTS
    00001644 6EF6                   MOV.L       @R15+,R14
           lex.c   961    
           lex.c   962    /* the next time we prompt, make it the full statement prompt */
           lex.c   963    void LexInteractiveStatementPrompt()
    00001646              _LexInteractiveStatementPrompt:  ; function: LexInteractiveStatementPrompt
                                                           ; frame size=0
           lex.c   964    {
           lex.c   965        LexUseStatementPrompt = TRUE;
    00001646 E301                   MOV         #1,R3
    00001648 D208                   MOV.L       L1343+30,R2; __$LexUseStatementPrompt
           lex.c   966    }
    0000164A 000B                   RTS
    0000164C 2232                   MOV.L       R3,@R2
    0000164E              L1343:                            
    0000164E 0000                   .DATA.W     0
    00001650 <00000000>             .DATA.L     _memcpy
    00001654 <00000000>             .DATA.L     __$InteractiveHead
    00001658 <00000000>             .DATA.L     __$InteractiveCurrentLine
    0000165C <00000000>             .DATA.L     _VariableAlloc
    00001660 <00000000>             .DATA.L     _abort
    00001664 <00000000>             .DATA.L     _HeapFreeMem
    00001668 <00000000>             .DATA.L     __$InteractiveTail
    0000166C <00000000>             .DATA.L     __$LexUseStatementPrompt
D   00000000              __$LexValue:                     ; static: LexValue
    00000000 00000000               .DATA.L     H'00000000
    00000004 <00000000>             .DATA.L     __$LexAnyValue
    00000008 00000000               .DATA.L     H'00000000
    0000000C 00                     .DATA.B     H'00
    0000000D 0000000301             .DATAB.B    3,0
             00           
    00000010              __$ReservedWords:                ; static: ReservedWords
    00000010 <00000000>             .DATA.L     L496
    00000014 00000053               .DATA.L     H'00000053
    00000018 00000000               .DATA.L     H'00000000
    0000001C <00000000>             .DATA.L     L497
    00000020 00000058               .DATA.L     H'00000058
    00000024 00000000               .DATA.L     H'00000000
    00000028 <00000000>             .DATA.L     L498
    0000002C 00000059               .DATA.L     H'00000059
    00000030 00000000               .DATA.L     H'00000000
    00000034 <00000000>             .DATA.L     L499
    00000038 00000055               .DATA.L     H'00000055
    0000003C 00000000               .DATA.L     H'00000000
    00000040 <00000000>             .DATA.L     L500
    00000044 00000056               .DATA.L     H'00000056
    00000048 00000000               .DATA.L     H'00000000
    0000004C <00000000>             .DATA.L     L501
    00000050 00000057               .DATA.L     H'00000057
    00000054 00000000               .DATA.L     H'00000000
    00000058 <00000000>             .DATA.L     L502
    0000005C 00000054               .DATA.L     H'00000054
    00000060 00000000               .DATA.L     H'00000000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000064 <00000000>             .DATA.L     L503
    00000068 00000040               .DATA.L     H'00000040
    0000006C 00000000               .DATA.L     H'00000000
    00000070 <00000000>             .DATA.L     L504
    00000074 0000004E               .DATA.L     H'0000004E
    00000078 00000000               .DATA.L     H'00000000
    0000007C <00000000>             .DATA.L     L505
    00000080 00000050               .DATA.L     H'00000050
    00000084 00000000               .DATA.L     H'00000000
    00000088 <00000000>             .DATA.L     L506
    0000008C 00000037               .DATA.L     H'00000037
    00000090 00000000               .DATA.L     H'00000000
    00000094 <00000000>             .DATA.L     L507
    00000098 00000047               .DATA.L     H'00000047
    0000009C 00000000               .DATA.L     H'00000000
    000000A0 <00000000>             .DATA.L     L508
    000000A4 00000051               .DATA.L     H'00000051
    000000A8 00000000               .DATA.L     H'00000000
    000000AC <00000000>             .DATA.L     L509
    000000B0 0000005B               .DATA.L     H'0000005B
    000000B4 00000000               .DATA.L     H'00000000
    000000B8 <00000000>             .DATA.L     L510
    000000BC 00000048               .DATA.L     H'00000048
    000000C0 00000000               .DATA.L     H'00000000
    000000C4 <00000000>             .DATA.L     L511
    000000C8 00000039               .DATA.L     H'00000039
    000000CC 00000000               .DATA.L     H'00000000
    000000D0 <00000000>             .DATA.L     L512
    000000D4 00000049               .DATA.L     H'00000049
    000000D8 00000000               .DATA.L     H'00000000
    000000DC <00000000>             .DATA.L     L513
    000000E0 0000003B               .DATA.L     H'0000003B
    000000E4 00000000               .DATA.L     H'00000000
    000000E8 <00000000>             .DATA.L     L514
    000000EC 00000042               .DATA.L     H'00000042
    000000F0 00000000               .DATA.L     H'00000000
    000000F4 <00000000>             .DATA.L     L515
    000000F8 00000038               .DATA.L     H'00000038
    000000FC 00000000               .DATA.L     H'00000000
    00000100 <00000000>             .DATA.L     L516
    00000104 0000004A               .DATA.L     H'0000004A
    00000108 00000000               .DATA.L     H'00000000
    0000010C <00000000>             .DATA.L     L517
    00000110 0000004B               .DATA.L     H'0000004B
    00000114 00000000               .DATA.L     H'00000000
    00000118 <00000000>             .DATA.L     L518
    0000011C 0000004C               .DATA.L     H'0000004C
    00000120 00000000               .DATA.L     H'00000000
    00000124 <00000000>             .DATA.L     L519
    00000128 00000036               .DATA.L     H'00000036
    0000012C 00000000               .DATA.L     H'00000000
    00000130 <00000000>             .DATA.L     L520
    00000134 0000003C               .DATA.L     H'0000003C
    00000138 00000000               .DATA.L     H'00000000
    0000013C <00000000>             .DATA.L     L521
    00000140 0000005A               .DATA.L     H'0000005A
    00000144 00000000               .DATA.L     H'00000000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000148 <00000000>             .DATA.L     L522
    0000014C 00000041               .DATA.L     H'00000041
    00000150 00000000               .DATA.L     H'00000000
    00000154 <00000000>             .DATA.L     L523
    00000158 00000052               .DATA.L     H'00000052
    0000015C 00000000               .DATA.L     H'00000000
    00000160 <00000000>             .DATA.L     L524
    00000164 0000003E               .DATA.L     H'0000003E
    00000168 00000000               .DATA.L     H'00000000
    0000016C <00000000>             .DATA.L     L525
    00000170 0000003D               .DATA.L     H'0000003D
    00000174 00000000               .DATA.L     H'00000000
    00000178 <00000000>             .DATA.L     L526
    0000017C 00000025               .DATA.L     H'00000025
    00000180 00000000               .DATA.L     H'00000000
    00000184 <00000000>             .DATA.L     L527
    00000188 0000003F               .DATA.L     H'0000003F
    0000018C 00000000               .DATA.L     H'00000000
    00000190 <00000000>             .DATA.L     L528
    00000194 00000043               .DATA.L     H'00000043
    00000198 00000000               .DATA.L     H'00000000
    0000019C <00000000>             .DATA.L     L529
    000001A0 0000004F               .DATA.L     H'0000004F
    000001A4 00000000               .DATA.L     H'00000000
    000001A8 <00000000>             .DATA.L     L530
    000001AC 00000046               .DATA.L     H'00000046
    000001B0 00000000               .DATA.L     H'00000000
    000001B4 <00000000>             .DATA.L     L531
    000001B8 00000044               .DATA.L     H'00000044
    000001BC 00000000               .DATA.L     H'00000000
    000001C0 <00000000>             .DATA.L     L532
    000001C4 00000045               .DATA.L     H'00000045
    000001C8 00000000               .DATA.L     H'00000000
    000001CC <00000000>             .DATA.L     L533
    000001D0 0000003A               .DATA.L     H'0000003A
    000001D4 00000000               .DATA.L     H'00000000
    000001D8 <00000000>             .DATA.L     L534
    000001DC 0000004D               .DATA.L     H'0000004D
    000001E0 00000000               .DATA.L     H'00000000
    000001E4              __$InteractiveHead:              ; static: InteractiveHead
    000001E4 00000000               .DATA.L     H'00000000
    000001E8              __$InteractiveTail:              ; static: InteractiveTail
    000001E8 00000000               .DATA.L     H'00000000
    000001EC              __$InteractiveCurrentLine:       ; static: InteractiveCurrentLine
    000001EC 00000000               .DATA.L     H'00000000
    000001F0              __$LexUseStatementPrompt:        ; static: LexUseStatementPrompt
    000001F0 00000000               .DATA.L     H'00000000
C   00000000              L604:
    00000000 6F7574206F             .SDATA      "out of memory"
             66206D656D   
             6F7279       
    0000000D 00                     .DATA.B     H'00
    0000000E 00000002               .RES.W      1
    00000010              L610:
    00000010 6578706563             .SDATA      "expected ""'"""
             7465642022   
             2722         




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000001C 00                     .DATA.B     H'00
    0000001D 00000001               .RES.B      1
    0000001E 00000002               .RES.W      1
    00000020              L675:
    00000020 696C6C6567             .SDATA      "illegal character '%c'"
             616C206368   
             6172616374   
             6572202725   
             6327         
    00000036 00                     .DATA.B     H'00
    00000037 00000001               .RES.B      1
    00000038              L695:
    00000038 4153534552             .SDATA      "ASSERTION FAILED: ReserveSpace >= MemUsed FILE %s,LINE %d "
             54494F4E20   
             4641494C45   
             443A205265   
             7365727665   
             5370616365   
             203E3D204D   
             656D557365   
             642046494C   
             452025732C   
             4C494E4520   
             256420       
    00000072 0A00                   .DATA.B     H'0A,H'00
    00000074              L696:
    00000074 453A5C416E             .SDATA      "E:\Anderain\fx-9860\dPicoc\lex.c"
             6465726169   
             6E5C66782D   
             393836305C   
             645069636F   
             635C6C6578   
             2E63         
    00000094 00                     .DATA.B     H'00
    00000095 00000001               .RES.B      1
    00000096 00000002               .RES.W      1
    00000098              L728:
    00000098 7069636F63             .SDATA      "picoc> "
             3E20         
    0000009F 00                     .DATA.B     H'00
    000000A0              L729:
    000000A0 2020202020             .SDATA      "     > "
             3E20         
    000000A7 00                     .DATA.B     H'00
    000000A8              L734:
    000000A8 4153534552             .SDATA      "ASSERTION FAILED: InteractiveCurrentLine->Next != NULL FILE %s,LINE %d "
             54494F4E20   
             4641494C45   
             443A20496E   
             7465726163   
             7469766543   
             757272656E   
             744C696E65   
             2D3E4E6578   
             7420213D20   
             4E554C4C20   
             46494C4520   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             25732C4C49   
             4E45202564   
             20           
    000000EF 0A00                   .DATA.B     H'0A,H'00
    000000F1 00000001               .RES.B      1
    000000F2 00000002               .RES.W      1
    000000F4              L735:
    000000F4 4153534552             .SDATA      "ASSERTION FAILED: InteractiveCurrentLine != NULL FILE %s,LINE %d "
             54494F4E20   
             4641494C45   
             443A20496E   
             7465726163   
             7469766543   
             757272656E   
             744C696E65   
             20213D204E   
             554C4C2046   
             494C452025   
             732C4C494E   
             4520256420   
    00000135 0A00                   .DATA.B     H'0A,H'00
    00000137 00000001               .RES.B      1
    00000138              L740:
    00000138 4153534552             .SDATA      "ASSERTION FAILED: Token >= TokenNone && Token <= TokenEndOfFunction FILE %s,LINE %"
             54494F4E20   
             4641494C45   
             443A20546F   
             6B656E203E   
             3D20546F6B   
             656E4E6F6E   
             6520262620   
             546F6B656E   
             203C3D2054   
             6F6B656E45   
             6E644F6646   
             756E637469   
             6F6E204649   
             4C45202573   
             2C4C494E45   
             2025         
    0000018A 6420                   .SDATA      "d "
    0000018C 0A00                   .DATA.B     H'0A,H'00
    0000018E 00000002               .RES.W      1
    00000190              L753:
    00000190 6964656E74             .SDATA      "identifier expected"
             6966696572   
             2065787065   
             63746564     
    000001A3 00                     .DATA.B     H'00
    000001A4              L763:
    000001A4 2725732720             .SDATA      "'%s' is undefined"
             697320756E   
             646566696E   
             6564         
    000001B5 00                     .DATA.B     H'00
    000001B6 00000002               .RES.W      1
    000001B8              L764:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001B8 76616C7565             .SDATA      "value expected"
             2065787065   
             63746564     
    000001C6 00                     .DATA.B     H'00
    000001C7 00000001               .RES.B      1
    000001C8              L770:
    000001C8 23656C7365             .SDATA      "#else without #if"
             2077697468   
             6F75742023   
             6966         
    000001D9 00                     .DATA.B     H'00
    000001DA 00000002               .RES.W      1
    000001DC              L774:
    000001DC 23656E6469             .SDATA      "#endif without #if"
             6620776974   
             686F757420   
             236966       
    000001EE 00                     .DATA.B     H'00
    000001EF 00000001               .RES.B      1
    000001F0              L804:
    000001F0 4153534552             .SDATA      "ASSERTION FAILED: ILine != NULL FILE %s,LINE %d "
             54494F4E20   
             4641494C45   
             443A20494C   
             696E652021   
             3D204E554C   
             4C2046494C   
             452025732C   
             4C494E4520   
             256420       
    00000220 0A00                   .DATA.B     H'0A,H'00
    00000222 00000002               .RES.W      1
    00000224              L496:
    00000224 2364656669             .SDATA      "#define"
             6E65         
    0000022B 00                     .DATA.B     H'00
    0000022C              L497:
    0000022C 23656C7365             .SDATA      "#else"
    00000231 00                     .DATA.B     H'00
    00000232 00000002               .RES.W      1
    00000234              L498:
    00000234 23656E6469             .SDATA      "#endif"
             66           
    0000023A 00                     .DATA.B     H'00
    0000023B 00000001               .RES.B      1
    0000023C              L499:
    0000023C 236966                 .SDATA      "#if"
    0000023F 00                     .DATA.B     H'00
    00000240              L500:
    00000240 2369666465             .SDATA      "#ifdef"
             66           
    00000246 00                     .DATA.B     H'00
    00000247 00000001               .RES.B      1
    00000248              L501:
    00000248 2369666E64             .SDATA      "#ifndef"
             6566         
    0000024F 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000250              L502:
    00000250 23696E636C             .SDATA      "#include"
             756465       
    00000258 00                     .DATA.B     H'00
    00000259 00000001               .RES.B      1
    0000025A 00000002               .RES.W      1
    0000025C              L503:
    0000025C 6175746F               .SDATA      "auto"
    00000260 00                     .DATA.B     H'00
    00000261 00000001               .RES.B      1
    00000262 00000002               .RES.W      1
    00000264              L504:
    00000264 627265616B             .SDATA      "break"
    00000269 00                     .DATA.B     H'00
    0000026A 00000002               .RES.W      1
    0000026C              L505:
    0000026C 63617365               .SDATA      "case"
    00000270 00                     .DATA.B     H'00
    00000271 00000001               .RES.B      1
    00000272 00000002               .RES.W      1
    00000274              L506:
    00000274 63686172               .SDATA      "char"
    00000278 00                     .DATA.B     H'00
    00000279 00000001               .RES.B      1
    0000027A 00000002               .RES.W      1
    0000027C              L507:
    0000027C 636F6E7469             .SDATA      "continue"
             6E7565       
    00000284 00                     .DATA.B     H'00
    00000285 00000001               .RES.B      1
    00000286 00000002               .RES.W      1
    00000288              L508:
    00000288 6465666175             .SDATA      "default"
             6C74         
    0000028F 00                     .DATA.B     H'00
    00000290              L509:
    00000290 64656C6574             .SDATA      "delete"
             65           
    00000296 00                     .DATA.B     H'00
    00000297 00000001               .RES.B      1
    00000298              L510:
    00000298 646F                   .SDATA      "do"
    0000029A 00                     .DATA.B     H'00
    0000029B 00000001               .RES.B      1
    0000029C              L511:
    0000029C 646F75626C             .SDATA      "double"
             65           
    000002A2 00                     .DATA.B     H'00
    000002A3 00000001               .RES.B      1
    000002A4              L512:
    000002A4 656C7365               .SDATA      "else"
    000002A8 00                     .DATA.B     H'00
    000002A9 00000001               .RES.B      1
    000002AA 00000002               .RES.W      1
    000002AC              L513:
    000002AC 656E756D               .SDATA      "enum"
    000002B0 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002B1 00000001               .RES.B      1
    000002B2 00000002               .RES.W      1
    000002B4              L514:
    000002B4 6578746572             .SDATA      "extern"
             6E           
    000002BA 00                     .DATA.B     H'00
    000002BB 00000001               .RES.B      1
    000002BC              L515:
    000002BC 666C6F6174             .SDATA      "float"
    000002C1 00                     .DATA.B     H'00
    000002C2 00000002               .RES.W      1
    000002C4              L516:
    000002C4 666F72                 .SDATA      "for"
    000002C7 00                     .DATA.B     H'00
    000002C8              L517:
    000002C8 676F746F               .SDATA      "goto"
    000002CC 00                     .DATA.B     H'00
    000002CD 00000001               .RES.B      1
    000002CE 00000002               .RES.W      1
    000002D0              L518:
    000002D0 6966                   .SDATA      "if"
    000002D2 00                     .DATA.B     H'00
    000002D3 00000001               .RES.B      1
    000002D4              L519:
    000002D4 696E74                 .SDATA      "int"
    000002D7 00                     .DATA.B     H'00
    000002D8              L520:
    000002D8 6C6F6E67               .SDATA      "long"
    000002DC 00                     .DATA.B     H'00
    000002DD 00000001               .RES.B      1
    000002DE 00000002               .RES.W      1
    000002E0              L521:
    000002E0 6E6577                 .SDATA      "new"
    000002E3 00                     .DATA.B     H'00
    000002E4              L522:
    000002E4 7265676973             .SDATA      "register"
             746572       
    000002EC 00                     .DATA.B     H'00
    000002ED 00000001               .RES.B      1
    000002EE 00000002               .RES.W      1
    000002F0              L523:
    000002F0 7265747572             .SDATA      "return"
             6E           
    000002F6 00                     .DATA.B     H'00
    000002F7 00000001               .RES.B      1
    000002F8              L524:
    000002F8 73686F7274             .SDATA      "short"
    000002FD 00                     .DATA.B     H'00
    000002FE 00000002               .RES.W      1
    00000300              L525:
    00000300 7369676E65             .SDATA      "signed"
             64           
    00000306 00                     .DATA.B     H'00
    00000307 00000001               .RES.B      1
    00000308              L526:
    00000308 73697A656F             .SDATA      "sizeof"
             66           




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000030E 00                     .DATA.B     H'00
    0000030F 00000001               .RES.B      1
    00000310              L527:
    00000310 7374617469             .SDATA      "static"
             63           
    00000316 00                     .DATA.B     H'00
    00000317 00000001               .RES.B      1
    00000318              L528:
    00000318 7374727563             .SDATA      "struct"
             74           
    0000031E 00                     .DATA.B     H'00
    0000031F 00000001               .RES.B      1
    00000320              L529:
    00000320 7377697463             .SDATA      "switch"
             68           
    00000326 00                     .DATA.B     H'00
    00000327 00000001               .RES.B      1
    00000328              L530:
    00000328 7479706564             .SDATA      "typedef"
             6566         
    0000032F 00                     .DATA.B     H'00
    00000330              L531:
    00000330 756E696F6E             .SDATA      "union"
    00000335 00                     .DATA.B     H'00
    00000336 00000002               .RES.W      1
    00000338              L532:
    00000338 756E736967             .SDATA      "unsigned"
             6E6564       
    00000340 00                     .DATA.B     H'00
    00000341 00000001               .RES.B      1
    00000342 00000002               .RES.W      1
    00000344              L533:
    00000344 766F6964               .SDATA      "void"
    00000348 00                     .DATA.B     H'00
    00000349 00000001               .RES.B      1
    0000034A 00000002               .RES.W      1
    0000034C              L534:
    0000034C 7768696C65             .SDATA      "while"
    00000351 00                     .DATA.B     H'00
B   00000000              __$LexAnyValue:                  ; static: LexAnyValue
    00000000 00000038               .RES.L      14




















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:22  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      966



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00001670 Byte(s)
CONSTANT SECTION (C):                               00000352 Byte(s)
DATA     SECTION (D):                               000001F4 Byte(s)
BSS      SECTION (B):                               00000038 Byte(s)

 TOTAL PROGRAM SIZE: 00001BEE Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           32
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          28
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           453






























*** COMMAND PARAMETER ***


  -subcommand=C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\hmk343.tmp 

