SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\dPicoc\expression.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression     1    #include "interpreter.h"
      expression     2    
      expression     3    /* whether evaluation is left to right for a given precedence level */
      expression     4    #define IS_LEFT_TO_RIGHT(p) ((p) != 2 && (p) != 14)
      expression     5    #define BRACKET_PRECEDENCE 20
      expression     6    #define IS_TYPE_TOKEN(t) ((t) >= TokenIntType && (t) <= TokenUnsignedType)
      expression     7    
      expression     8    #define DEEP_PRECEDENCE (BRACKET_PRECEDENCE*1000)
      expression     9    
      expression    10    /* local prototypes */
      expression    11    enum OperatorOrder
      expression    12    {
      expression    13        OrderNone,
      expression    14        OrderPrefix,
      expression    15        OrderInfix,
      expression    16        OrderPostfix
      expression    17    };
      expression    18    
      expression    19    /* a stack of expressions we use in evaluation */
      expression    20    struct ExpressionStack
      expression    21    {
      expression    22        struct ExpressionStack *Next;       /* the next lower item on the stack */
      expression    23        struct Value *Val;                  /* the value for this stack node */
      expression    24        enum LexToken Op;                   /* the operator */
      expression    25        short unsigned int Precedence;      /* the operator precedence of this node */
      expression    26        unsigned char Order;                /* the evaluation order of this operator */
      expression    27    };
      expression    28    
      expression    29    /* operator precedence definitions */
      expression    30    struct OpPrecedence
      expression    31    {
      expression    32        unsigned int PrefixPrecedence:4;
      expression    33        unsigned int PostfixPrecedence:4;
      expression    34        unsigned int InfixPrecedence:4;
      expression    35        char *Name;
      expression    36    };
      expression    37    
      expression    38    /* NOTE: the order of this array must correspond exactly to the order of these tokens in enum LexToken */
      expression    39    static struct OpPrecedence OperatorPrecedence[] =
      expression    40    {
      expression    41        /* TokenNone, */ { 0, 0, 0, "none" },
      expression    42        /* TokenComma, */ { 0, 0, 0, "," },
      expression    43        /* TokenAssign, */ { 0, 0, 2, "=" }, /* TokenAddAssign, */ { 0, 0, 2, "+=" }, /* TokenSubtractAssign, 
                         +*/ { 0, 0, 2, "-=" }, 
      expression    44        /* TokenMultiplyAssign, */ { 0, 0, 2, "*=" }, /* TokenDivideAssign, */ { 0, 0, 2, "/=" }, /* TokenModu
                         +lusAssign, */ { 0, 0, 2, "%=" },
      expression    45        /* TokenShiftLeftAssign, */ { 0, 0, 2, "<<=" }, /* TokenShiftRightAssign, */ { 0, 0, 2, ">>=" }, /* To
                         +kenArithmeticAndAssign, */ { 0, 0, 2, "&=" }, 
      expression    46        /* TokenArithmeticOrAssign, */ { 0, 0, 2, "|=" }, /* TokenArithmeticExorAssign, */ { 0, 0, 2, "^=" },
      expression    47        /* TokenQuestionMark, */ { 0, 0, 3, "?" }, /* TokenColon, */ { 0, 0, 3, ":" },
      expression    48        /* TokenLogicalOr, */ { 0, 0, 4, "||" },
      expression    49        /* TokenLogicalAnd, */ { 0, 0, 5, "&&" },
      expression    50        /* TokenArithmeticOr, */ { 0, 0, 6, "|" },
      expression    51        /* TokenArithmeticExor, */ { 0, 0, 7, "^" },




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression    52        /* TokenAmpersand, */ { 14, 0, 8, "&" },
      expression    53        /* TokenEqual, */  { 0, 0, 9, "==" }, /* TokenNotEqual, */ { 0, 0, 9, "!=" },
      expression    54        /* TokenLessThan, */ { 0, 0, 10, "<" }, /* TokenGreaterThan, */ { 0, 0, 10, ">" }, /* TokenLessEqual, 
                         +*/ { 0, 0, 10, "<=" }, /* TokenGreaterEqual, */ { 0, 0, 10, ">=" },
      expression    55        /* TokenShiftLeft, */ { 0, 0, 11, "<<" }, /* TokenShiftRight, */ { 0, 0, 11, ">>" },
      expression    56        /* TokenPlus, */ { 14, 0, 12, "+" }, /* TokenMinus, */ { 14, 0, 12, "-" },
      expression    57        /* TokenAsterisk, */ { 14, 0, 13, "*" }, /* TokenSlash, */ { 0, 0, 13, "/" }, /* TokenModulus, */ { 0,
                         + 0, 13, "%" },
      expression    58        /* TokenIncrement, */ { 14, 15, 0, "++" }, /* TokenDecrement, */ { 14, 15, 0, "--" }, /* TokenUnaryNot
                         +, */ { 14, 0, 0, "!" }, /* TokenUnaryExor, */ { 14, 0, 0, "~" }, /* TokenSizeof, */ { 14, 0, 0, "sizeof" }
                         +, /* TokenCast, */ { 14, 0, 0, "cast" },
      expression    59        /* TokenLeftSquareBracket, */ { 0, 0, 15, "[" }, /* TokenRightSquareBracket, */ { 0, 15, 0, "]" }, /* 
                         +TokenDot, */ { 0, 0, 15, "." }, /* TokenArrow, */ { 0, 0, 15, "->" },
      expression    60        /* TokenOpenBracket, */ { 15, 0, 0, "(" }, /* TokenCloseBracket, */ { 0, 15, 0, ")" }
      expression    61    };
      expression    62    
      expression    63    void ExpressionParseFunctionCall(struct ParseState *Parser, struct ExpressionStack **StackTop, const char 
                         +*FuncName, int RunIt);
      expression    64    
      expression    65    #ifdef DEBUG_EXPRESSIONS
      expression    66    /* show the contents of the expression stack */
      expression    67    void ExpressionStackShow(struct ExpressionStack *StackTop)
      expression    68    {
      expression    69        printf("Expression stack [0x%lx,0x%lx]: ", (long)HeapStackTop, (long)StackTop);
      expression    70        
      expression    71        while (StackTop != NULL)
      expression    72        {
      expression    73            if (StackTop->Order == OrderNone)
      expression    74            { 
      expression    75                /* it's a value */
      expression    76                if (StackTop->Val->IsLValue)
      expression    77                    printf("lvalue=");
      expression    78                else
      expression    79                    printf("value=");
      expression    80                    
      expression    81                switch (StackTop->Val->Typ->Base)
      expression    82                {
      expression    83                    case TypeVoid:      printf("void"); break;
      expression    84                    case TypeInt:       printf("%d:int", StackTop->Val->Val->Integer); break;
      expression    85                    case TypeShort:     printf("%d:short", StackTop->Val->Val->ShortInteger); break;
      expression    86                    case TypeChar:      printf("%d:char", StackTop->Val->Val->Character); break;
      expression    87                    case TypeLong:      printf("%d:long", StackTop->Val->Val->LongInteger); break;
      expression    88                    case TypeUnsignedShort: printf("%d:unsigned short", StackTop->Val->Val->UnsignedShortInteg
                         +er); break;
      expression    89                    case TypeUnsignedInt: printf("%d:unsigned int", StackTop->Val->Val->UnsignedInteger); brea
                         +k;
      expression    90                    case TypeUnsignedLong: printf("%d:unsigned long", StackTop->Val->Val->UnsignedLongInteger)
                         +; break;
      expression    91                    case TypeFP:        printf("%f:fp", StackTop->Val->Val->FP); break;
      expression    92                    case TypeFunction:  printf("%s:function", StackTop->Val->Val->Identifier); break;
      expression    93                    case TypeMacro:     printf("%s:macro", StackTop->Val->Val->Identifier); break;
      expression    94                    case TypePointer:
      expression    95                        if (StackTop->Val->Val->Pointer == NULL)
      expression    96                            printf("ptr(NULL)");
      expression    97                        else if (StackTop->Val->Typ->FromType->Base == TypeChar)
      expression    98                            printf("\"%s\":string", (char *)StackTop->Val->Val->Pointer);
      expression    99                        else




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   100                            printf("ptr(0x%lx)", (long)StackTop->Val->Val->Pointer); 
      expression   101                        break;
      expression   102                    case TypeArray:     printf("array"); break;
      expression   103                    case TypeStruct:    printf("%s:struct", StackTop->Val->Val->Identifier); break;
      expression   104                    case TypeUnion:     printf("%s:union", StackTop->Val->Val->Identifier); break;
      expression   105                    case TypeEnum:      printf("%s:enum", StackTop->Val->Val->Identifier); break;
      expression   106                    case Type_Type:     PrintType(StackTop->Val->Val->Typ, CStdOut); printf(":type"); break;
      expression   107                    default:            printf("unknown"); break;
      expression   108                }
      expression   109                printf("[0x%lx,0x%lx]", (long)StackTop, (long)StackTop->Val);
      expression   110            }
      expression   111            else
      expression   112            { 
      expression   113                /* it's an operator */
      expression   114                printf("op='%s' %s %d", OperatorPrecedence[(int)StackTop->Op].Name, 
      expression   115                    (StackTop->Order == OrderPrefix) ? "prefix" : ((StackTop->Order == OrderPostfix) ? "postfi
                         +x" : "infix"), 
      expression   116                    StackTop->Precedence);
      expression   117                printf("[0x%lx]", (long)StackTop);
      expression   118            }
      expression   119            
      expression   120            StackTop = StackTop->Next;
      expression   121            if (StackTop != NULL)
      expression   122                printf(", ");
      expression   123        }
      expression   124        
      expression   125        printf("\n");
      expression   126    }
      expression   127    #endif
      expression   128    
      expression   129    long ExpressionCoerceInteger(struct Value *Val)
P   00000000              _ExpressionCoerceInteger:        ; function: ExpressionCoerceInteger
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __dtoi
    00000000 4F22                   STS.L       PR,@-R15
      expression   130    {
      expression   131        switch (Val->Typ->Base)
    00000002 6042                   MOV.L       @R4,R0
    00000004 6002                   MOV.L       @R0,R0
    00000006 8801                   CMP/EQ      #1,R0
    00000008 891F                   BT          L1515
    0000000A 8803                   CMP/EQ      #3,R0
    0000000C 890F                   BT          L997
    0000000E 8802                   CMP/EQ      #2,R0
    00000010 8912                   BT          L998
    00000012 8804                   CMP/EQ      #4,R0
    00000014 8919                   BT          L1515
    00000016 8805                   CMP/EQ      #5,R0
    00000018 8917                   BT          L1515
    0000001A 8806                   CMP/EQ      #6,R0
    0000001C 8910                   BT          L1001
    0000001E 8807                   CMP/EQ      #7,R0
    00000020 8913                   BT          L1515
    00000022 880B                   CMP/EQ      #11,R0
    00000024 8911                   BT          L1003
    00000026 8808                   CMP/EQ      #8,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000028 8913                   BT          L1004
    0000002A A01C                   BRA         L1005
    0000002C 0009                   NOP
    0000002E              L997:                            ; case label 
      expression   132        {
      expression   133            case TypeInt:             return (long)Val->Val->Integer;
      expression   134            case TypeChar:            return (long)Val->Val->Character;
    0000002E 5041                   MOV.L       @(4,R4),R0
    00000030 4F26                   LDS.L       @R15+,PR
    00000032 6000                   MOV.B       @R0,R0
    00000034 000B                   RTS
    00000036 600C                   EXTU.B      R0,R0
    00000038              L998:                            ; case label 
      expression   135            case TypeShort:           return (long)Val->Val->ShortInteger;
    00000038 5041                   MOV.L       @(4,R4),R0
    0000003A 4F26                   LDS.L       @R15+,PR
    0000003C 000B                   RTS
    0000003E 6001                   MOV.W       @R0,R0
    00000040              L1001:                           ; case label 
      expression   136            case TypeLong:            return (long)Val->Val->LongInteger;
      expression   137            case TypeUnsignedInt:     return (long)Val->Val->UnsignedInteger;
      expression   138            case TypeUnsignedShort:   return (long)Val->Val->UnsignedShortInteger;
    00000040 5041                   MOV.L       @(4,R4),R0
    00000042 6001                   MOV.W       @R0,R0
    00000044 4F26                   LDS.L       @R15+,PR
    00000046 000B                   RTS
    00000048 600D                   EXTU.W      R0,R0
    0000004A              L1003:                           ; case label 
      expression   139            case TypeUnsignedLong:    return (long)Val->Val->UnsignedLongInteger;
      expression   140            case TypePointer:         return (long)Val->Val->Pointer;
    0000004A              L1515:                            
    0000004A 5041                   MOV.L       @(4,R4),R0
    0000004C 4F26                   LDS.L       @R15+,PR
    0000004E 000B                   RTS
    00000050 6002                   MOV.L       @R0,R0
    00000052              L1004:                           ; case label 
      expression   141    #ifndef NO_FP
      expression   142            case TypeFP:              return (long)Val->Val->FP;
    00000052 5041                   MOV.L       @(4,R4),R0
    00000054 D261                   MOV.L       L1564,R2   ; __dtoi
    00000056 5301                   MOV.L       @(4,R0),R3
    00000058 2F36                   MOV.L       R3,@-R15
    0000005A 6302                   MOV.L       @R0,R3
    0000005C 420B                   JSR         @R2
    0000005E 2F36                   MOV.L       R3,@-R15
    00000060 4F26                   LDS.L       @R15+,PR
    00000062 000B                   RTS
    00000064 0009                   NOP
    00000066              L1005:                           ; default label 
      expression   143    #endif
      expression   144            default:                  return 0;
    00000066 E000                   MOV         #0,R0
      expression   145        }
      expression   146    }
    00000068              L1212:                            
    00000068 4F26                   LDS.L       @R15+,PR
    0000006A 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000006C 0009                   NOP
      expression   147    
      expression   148    unsigned long ExpressionCoerceUnsignedInteger(struct Value *Val)
    0000006E              _ExpressionCoerceUnsignedInteger:
                                                           ; function: ExpressionCoerceUnsignedInteger
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __dtou
    0000006E 4F22                   STS.L       PR,@-R15
      expression   149    {
      expression   150        switch (Val->Typ->Base)
    00000070 6042                   MOV.L       @R4,R0
    00000072 6002                   MOV.L       @R0,R0
    00000074 8801                   CMP/EQ      #1,R0
    00000076 891F                   BT          L1518
    00000078 8803                   CMP/EQ      #3,R0
    0000007A 890F                   BT          L1007
    0000007C 8802                   CMP/EQ      #2,R0
    0000007E 8912                   BT          L1008
    00000080 8804                   CMP/EQ      #4,R0
    00000082 8919                   BT          L1518
    00000084 8805                   CMP/EQ      #5,R0
    00000086 8917                   BT          L1518
    00000088 8806                   CMP/EQ      #6,R0
    0000008A 8910                   BT          L1011
    0000008C 8807                   CMP/EQ      #7,R0
    0000008E 8913                   BT          L1518
    00000090 880B                   CMP/EQ      #11,R0
    00000092 8911                   BT          L1013
    00000094 8808                   CMP/EQ      #8,R0
    00000096 8913                   BT          L1014
    00000098 A01C                   BRA         L1015
    0000009A 0009                   NOP
    0000009C              L1007:                           ; case label 
      expression   151        {
      expression   152            case TypeInt:             return (unsigned long)Val->Val->Integer;
      expression   153            case TypeChar:            return (unsigned long)Val->Val->Character;
    0000009C 5041                   MOV.L       @(4,R4),R0
    0000009E 6000                   MOV.B       @R0,R0
    000000A0 4F26                   LDS.L       @R15+,PR
    000000A2 000B                   RTS
    000000A4 600C                   EXTU.B      R0,R0
    000000A6              L1008:                           ; case label 
      expression   154            case TypeShort:           return (unsigned long)Val->Val->ShortInteger;
    000000A6 5041                   MOV.L       @(4,R4),R0
    000000A8 4F26                   LDS.L       @R15+,PR
    000000AA 000B                   RTS
    000000AC 6001                   MOV.W       @R0,R0
    000000AE              L1011:                           ; case label 
      expression   155            case TypeLong:            return (unsigned long)Val->Val->LongInteger;
      expression   156            case TypeUnsignedInt:     return (unsigned long)Val->Val->UnsignedInteger;
      expression   157            case TypeUnsignedShort:   return (unsigned long)Val->Val->UnsignedShortInteger;
    000000AE 5041                   MOV.L       @(4,R4),R0
    000000B0 4F26                   LDS.L       @R15+,PR
    000000B2 6001                   MOV.W       @R0,R0
    000000B4 000B                   RTS
    000000B6 600D                   EXTU.W      R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000B8              L1013:                           ; case label 
      expression   158            case TypeUnsignedLong:    return (unsigned long)Val->Val->UnsignedLongInteger;
      expression   159            case TypePointer:         return (unsigned long)Val->Val->Pointer;
    000000B8              L1518:                            
    000000B8 5041                   MOV.L       @(4,R4),R0
    000000BA 4F26                   LDS.L       @R15+,PR
    000000BC 000B                   RTS
    000000BE 6002                   MOV.L       @R0,R0
    000000C0              L1014:                           ; case label 
      expression   160    #ifndef NO_FP
      expression   161            case TypeFP:              return (unsigned long)Val->Val->FP;
    000000C0 5041                   MOV.L       @(4,R4),R0
    000000C2 5301                   MOV.L       @(4,R0),R3
    000000C4 D246                   MOV.L       L1564+4,R2 ; __dtou
    000000C6 2F36                   MOV.L       R3,@-R15
    000000C8 6302                   MOV.L       @R0,R3
    000000CA 420B                   JSR         @R2
    000000CC 2F36                   MOV.L       R3,@-R15
    000000CE 4F26                   LDS.L       @R15+,PR
    000000D0 000B                   RTS
    000000D2 0009                   NOP
    000000D4              L1015:                           ; default label 
      expression   162    #endif
      expression   163            default:                  return 0;
    000000D4 E000                   MOV         #0,R0
      expression   164        }
      expression   165    }
    000000D6              L1214:                            
    000000D6 4F26                   LDS.L       @R15+,PR
    000000D8 000B                   RTS
    000000DA 0009                   NOP
      expression   166    
      expression   167    #ifndef NO_FP
      expression   168    double ExpressionCoerceFP(struct Value *Val)
    000000DC              _ExpressionCoerceFP:             ; function: ExpressionCoerceFP
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __itod, __utod
    000000DC 4F22                   STS.L       PR,@-R15
      expression   169    {
      expression   170    #ifndef BROKEN_FLOAT_CASTS
      expression   171        int IntVal;
      expression   172        unsigned UnsignedVal;
      expression   173        
      expression   174        switch (Val->Typ->Base)
    000000DE 6042                   MOV.L       @R4,R0
    000000E0 6002                   MOV.L       @R0,R0
    000000E2 8801                   CMP/EQ      #1,R0
    000000E4 890F                   BT          L1016
    000000E6 8803                   CMP/EQ      #3,R0
    000000E8 8910                   BT          L1017
    000000EA 8802                   CMP/EQ      #2,R0
    000000EC 8912                   BT          L1018
    000000EE 8804                   CMP/EQ      #4,R0
    000000F0 8913                   BT          L1019
    000000F2 8805                   CMP/EQ      #5,R0
    000000F4 891B                   BT          L1020




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000F6 8806                   CMP/EQ      #6,R0
    000000F8 891C                   BT          L1021
    000000FA 8807                   CMP/EQ      #7,R0
    000000FC 891E                   BT          L1022
    000000FE 8808                   CMP/EQ      #8,R0
    00000100 8926                   BT          L1023
    00000102 A02D                   BRA         L1024
    00000104 0009                   NOP
    00000106              L1016:                           ; case label 
      expression   175        {
      expression   176            case TypeInt:             IntVal = Val->Val->Integer; return (double)IntVal;
    00000106 5541                   MOV.L       @(4,R4),R5
    00000108 A009                   BRA         L920
    0000010A 6552                   MOV.L       @R5,R5
    0000010C              L1017:                           ; case label 
      expression   177            case TypeChar:            IntVal = Val->Val->Character; return (double)IntVal;
    0000010C 5541                   MOV.L       @(4,R4),R5
    0000010E 6550                   MOV.B       @R5,R5
    00000110 A005                   BRA         L920
    00000112 655C                   EXTU.B      R5,R5
    00000114              L1018:                           ; case label 
      expression   178            case TypeShort:           IntVal = Val->Val->ShortInteger; return (double)IntVal;
    00000114 5541                   MOV.L       @(4,R4),R5
    00000116 A002                   BRA         L920
    00000118 6551                   MOV.W       @R5,R5
    0000011A              L1019:                           ; case label 
      expression   179            case TypeLong:            IntVal = Val->Val->LongInteger; return (double)IntVal;
    0000011A 5541                   MOV.L       @(4,R4),R5
    0000011C 6552                   MOV.L       @R5,R5
    0000011E              L920:
    0000011E 52F1                   MOV.L       @(4,R15),R2
    00000120 D330                   MOV.L       L1564+8,R3 ; __itod
    00000122 2F26                   MOV.L       R2,@-R15
    00000124 430B                   JSR         @R3
    00000126 6053                   MOV         R5,R0
    00000128 4F26                   LDS.L       @R15+,PR
    0000012A 000B                   RTS
    0000012C 0009                   NOP
    0000012E              L1020:                           ; case label 
      expression   180            case TypeUnsignedInt:     UnsignedVal = Val->Val->UnsignedInteger; return (double)UnsignedVal;
    0000012E 5541                   MOV.L       @(4,R4),R5
    00000130 A006                   BRA         L923
    00000132 6552                   MOV.L       @R5,R5
    00000134              L1021:                           ; case label 
      expression   181            case TypeUnsignedShort:   UnsignedVal = Val->Val->UnsignedShortInteger; return (double)UnsignedVal
                         +;
    00000134 5541                   MOV.L       @(4,R4),R5
    00000136 6551                   MOV.W       @R5,R5
    00000138 A002                   BRA         L923
    0000013A 655D                   EXTU.W      R5,R5
    0000013C              L1022:                           ; case label 
      expression   182            case TypeUnsignedLong:    UnsignedVal = Val->Val->UnsignedLongInteger; return (double)UnsignedVal;
    0000013C 5541                   MOV.L       @(4,R4),R5
    0000013E 6552                   MOV.L       @R5,R5
    00000140              L923:
    00000140 52F1                   MOV.L       @(4,R15),R2
    00000142 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000144 D328                   MOV.L       L1564+12,R3; __utod
    00000146 430B                   JSR         @R3
    00000148 6053                   MOV         R5,R0
    0000014A 4F26                   LDS.L       @R15+,PR
    0000014C 000B                   RTS
    0000014E 0009                   NOP
    00000150              L1023:                           ; case label 
      expression   183            case TypeFP:              return Val->Val->FP;
    00000150 5241                   MOV.L       @(4,R4),R2
    00000152 50F1                   MOV.L       @(4,R15),R0
    00000154 6122                   MOV.L       @R2,R1
    00000156 2012                   MOV.L       R1,@R0
    00000158 5121                   MOV.L       @(4,R2),R1
    0000015A 4F26                   LDS.L       @R15+,PR
    0000015C 000B                   RTS
    0000015E 1011                   MOV.L       R1,@(4,R0)
    00000160              L1024:                           ; default label 
      expression   184            default:                  return 0.0;
    00000160 50F1                   MOV.L       @(4,R15),R0
    00000162 E300                   MOV         #0,R3
    00000164 2032                   MOV.L       R3,@R0
    00000166 1031                   MOV.L       R3,@(4,R0)
      expression   185        }
      expression   186    #else
      expression   187        switch (Val->Typ->Base)
      expression   188        {
      expression   189            case TypeInt:             return (double)Val->Val->Integer;
      expression   190            case TypeChar:            return (double)Val->Val->Character;
      expression   191            case TypeShort:           return (double)Val->Val->ShortInteger;
      expression   192            case TypeLong:            return (double)Val->Val->LongInteger;
      expression   193            case TypeUnsignedInt:     return (double)Val->Val->UnsignedInteger;
      expression   194            case TypeUnsignedShort:   return (double)Val->Val->UnsignedShortInteger;
      expression   195            case TypeUnsignedLong:    return (double)Val->Val->UnsignedLongInteger;
      expression   196            case TypeFP:              return (double)Val->Val->FP;
      expression   197            default:                  return 0.0;
      expression   198        }
      expression   199    #endif
      expression   200    }
    00000168              L1216:                            
    00000168 4F26                   LDS.L       @R15+,PR
    0000016A 000B                   RTS
    0000016C 0009                   NOP
      expression   201    #endif
      expression   202    
      expression   203    /* assign an integer value */
      expression   204    long ExpressionAssignInt(struct ParseState *Parser, struct Value *DestValue, long FromInt, int After)
    0000016E              _ExpressionAssignInt:            ; function: ExpressionAssignInt
                                                           ; frame size=20
    0000016E 2FE6                   MOV.L       R14,@-R15
    00000170 2FD6                   MOV.L       R13,@-R15
    00000172 6E53                   MOV         R5,R14
    00000174 4F22                   STS.L       PR,@-R15
    00000176 7FFC                   ADD         #-4,R15
    00000178 2F72                   MOV.L       R7,@R15
      expression   205    {
      expression   206        long Result;
      expression   207        




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   208        if (!DestValue->IsLValue) 
    0000017A 84EE                   MOV.B       @(14,R14),R0
    0000017C 2008                   TST         R0,R0
    0000017E 8F05                   BF/S        L1217
    00000180 6D63                   MOV         R6,R13
      expression   209            ProgramFail(Parser, "can't assign to this"); 
    00000182 D31A                   MOV.L       L1564+16,R3; L558
    00000184 D21A                   MOV.L       L1564+20,R2; _ProgramFail
    00000186 420B                   JSR         @R2
    00000188 2F36                   MOV.L       R3,@-R15
    0000018A 7F04                   ADD         #4,R15
    0000018C              L1217:                            
      expression   210        
      expression   211        if (After)
    0000018C 63F2                   MOV.L       @R15,R3
    0000018E 2338                   TST         R3,R3
    00000190 8903                   BT          L1218
      expression   212            Result = ExpressionCoerceInteger(DestValue);
    00000192 BF35                   BSR         _ExpressionCoerceInteger
    00000194 64E3                   MOV         R14,R4
    00000196 A001                   BRA         L1219
    00000198 6403                   MOV         R0,R4
    0000019A              L1218:                            
      expression   213        else
      expression   214            Result = FromInt;
    0000019A 64D3                   MOV         R13,R4
    0000019C              L1219:                            
      expression   215    
      expression   216        switch (DestValue->Typ->Base)
    0000019C 60E2                   MOV.L       @R14,R0
    0000019E 6002                   MOV.L       @R0,R0
    000001A0 8801                   CMP/EQ      #1,R0
    000001A2 8913                   BT          L1522
    000001A4 8802                   CMP/EQ      #2,R0
    000001A6 890E                   BT          L1521
    000001A8 8803                   CMP/EQ      #3,R0
    000001AA 8909                   BT          L1028
    000001AC 8804                   CMP/EQ      #4,R0
    000001AE 890D                   BT          L1522
    000001B0 8805                   CMP/EQ      #5,R0
    000001B2 890B                   BT          L1522
    000001B4 8806                   CMP/EQ      #6,R0
    000001B6 8906                   BT          L1031
    000001B8 8807                   CMP/EQ      #7,R0
    000001BA 8907                   BT          L1032
    000001BC A008                   BRA         L1220
    000001BE 0009                   NOP
    000001C0              L1028:                           ; case label 
      expression   217        {
      expression   218            case TypeInt:           DestValue->Val->Integer = FromInt; break;
      expression   219            case TypeShort:         DestValue->Val->ShortInteger = (short)FromInt; break;
      expression   220            case TypeChar:          DestValue->Val->Character = (unsigned char)FromInt; break;
    000001C0 53E1                   MOV.L       @(4,R14),R3
    000001C2 A005                   BRA         L1220
    000001C4 23D0                   MOV.B       R13,@R3
    000001C6              L1031:                           ; case label 
      expression   221            case TypeLong:          DestValue->Val->LongInteger = (long)FromInt; break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   222            case TypeUnsignedInt:   DestValue->Val->UnsignedInteger = (unsigned int)FromInt; break;
      expression   223            case TypeUnsignedShort: DestValue->Val->UnsignedShortInteger = (unsigned short)FromInt; break;
    000001C6              L1521:                            
    000001C6 53E1                   MOV.L       @(4,R14),R3
    000001C8 A002                   BRA         L1220
    000001CA 23D1                   MOV.W       R13,@R3
    000001CC              L1032:                           ; case label 
      expression   224            case TypeUnsignedLong:  DestValue->Val->UnsignedLongInteger = (unsigned long)FromInt; break;
    000001CC              L1522:                            
    000001CC 53E1                   MOV.L       @(4,R14),R3
    000001CE 23D2                   MOV.L       R13,@R3
      expression   225            default: break;
    000001D0              L1220:                            
      expression   226        }
      expression   227        return Result;
    000001D0 6043                   MOV         R4,R0
      expression   228    }
    000001D2 7F04                   ADD         #4,R15
    000001D4 4F26                   LDS.L       @R15+,PR
    000001D6 6DF6                   MOV.L       @R15+,R13
    000001D8 000B                   RTS
    000001DA 6EF6                   MOV.L       @R15+,R14
    000001DC              L1564:                            
    000001DC <00000000>             .DATA.L     __dtoi
    000001E0 <00000000>             .DATA.L     __dtou
    000001E4 <00000000>             .DATA.L     __itod
    000001E8 <00000000>             .DATA.L     __utod
    000001EC <00000000>             .DATA.L     L558
    000001F0 <00000000>             .DATA.L     _ProgramFail
      expression   229    
      expression   230    #ifndef NO_FP
      expression   231    /* assign a floating point value */
      expression   232    double ExpressionAssignFP(struct ParseState *Parser, struct Value *DestValue, double FromFP)
    000001F4              _ExpressionAssignFP:             ; function: ExpressionAssignFP
                                                           ; frame size=12
    000001F4 4F22                   STS.L       PR,@-R15
      expression   233    {
      expression   234        if (!DestValue->IsLValue) 
    000001F6 6353                   MOV         R5,R3
    000001F8 7FFC                   ADD         #-4,R15
    000001FA 2F52                   MOV.L       R5,@R15
    000001FC 843E                   MOV.B       @(14,R3),R0
    000001FE 2008                   TST         R0,R0
    00000200 8B04                   BF          L1222
      expression   235            ProgramFail(Parser, "can't assign to this"); 
    00000202 D293                   MOV.L       L1565+2,R2 ; L558
    00000204 D393                   MOV.L       L1565+6,R3 ; _ProgramFail
    00000206 430B                   JSR         @R3
    00000208 2F26                   MOV.L       R2,@-R15
    0000020A 7F04                   ADD         #4,R15
    0000020C              L1222:                            
      expression   236        
      expression   237        DestValue->Val->FP = FromFP;
    0000020C 62F2                   MOV.L       @R15,R2
    0000020E 61F3                   MOV         R15,R1
    00000210 5021                   MOV.L       @(4,R2),R0
    00000212 710C                   ADD         #12,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000214 6212                   MOV.L       @R1,R2
    00000216 2022                   MOV.L       R2,@R0
    00000218 5211                   MOV.L       @(4,R1),R2
    0000021A 1021                   MOV.L       R2,@(4,R0)
      expression   238        return FromFP;
    0000021C 53F2                   MOV.L       @(8,R15),R3
    0000021E 60F3                   MOV         R15,R0
    00000220 700C                   ADD         #12,R0
    00000222 6202                   MOV.L       @R0,R2
    00000224 2322                   MOV.L       R2,@R3
    00000226 5201                   MOV.L       @(4,R0),R2
    00000228 1321                   MOV.L       R2,@(4,R3)
      expression   239    }
    0000022A 7F04                   ADD         #4,R15
    0000022C 4F26                   LDS.L       @R15+,PR
    0000022E 000B                   RTS
    00000230 0009                   NOP
      expression   240    #endif
      expression   241    
      expression   242    /* push a node on to the expression stack */
      expression   243    void ExpressionStackPushValueNode(struct ParseState *Parser, struct ExpressionStack **StackTop, struct Val
                         +ue *ValueLoc)
    00000232              _ExpressionStackPushValueNode:   ; function: ExpressionStackPushValueNode
                                                           ; frame size=12
    00000232 4F22                   STS.L       PR,@-R15
      expression   244    {
      expression   245        struct ExpressionStack *StackNode = VariableAlloc(Parser, sizeof(struct ExpressionStack), FALSE);
    00000234 D388                   MOV.L       L1565+10,R3; _VariableAlloc
    00000236 7FF8                   ADD         #-8,R15
    00000238 2F52                   MOV.L       R5,@R15
    0000023A 1F61                   MOV.L       R6,@(4,R15)
    0000023C E600                   MOV         #0,R6
    0000023E 430B                   JSR         @R3
    00000240 E510                   MOV         #16,R5
    00000242 6403                   MOV         R0,R4
      expression   246        StackNode->Next = *StackTop;
    00000244 62F2                   MOV.L       @R15,R2
    00000246 6322                   MOV.L       @R2,R3
    00000248 2432                   MOV.L       R3,@R4
      expression   247        StackNode->Val = ValueLoc;
    0000024A 52F1                   MOV.L       @(4,R15),R2
    0000024C 1421                   MOV.L       R2,@(4,R4)
      expression   248        *StackTop = StackNode;
    0000024E 63F2                   MOV.L       @R15,R3
    00000250 2342                   MOV.L       R4,@R3
      expression   249    #ifdef FANCY_ERROR_MESSAGES
      expression   250        StackNode->Line = Parser->Line;
      expression   251        StackNode->CharacterPos = Parser->CharacterPos;
      expression   252    #endif
      expression   253    #ifdef DEBUG_EXPRESSIONS
      expression   254        ExpressionStackShow(*StackTop);
      expression   255    #endif
      expression   256    }
    00000252 7F08                   ADD         #8,R15
    00000254 4F26                   LDS.L       @R15+,PR
    00000256 000B                   RTS
    00000258 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   257    
      expression   258    /* push a blank value on to the expression stack by type */
      expression   259    struct Value *ExpressionStackPushValueByType(struct ParseState *Parser, struct ExpressionStack **StackTop,
                         + struct ValueType *PushType)
    0000025A              _ExpressionStackPushValueByType: ; function: ExpressionStackPushValueByType
                                                           ; frame size=24
      expression   260    {
      expression   261        struct Value *ValueLoc = VariableAllocValueFromType(Parser, PushType, FALSE, NULL, FALSE);
    0000025A E300                   MOV         #0,R3
    0000025C D27F                   MOV.L       L1565+14,R2; _VariableAllocValueFromType
    0000025E 6733                   MOV         R3,R7
    00000260 2FE6                   MOV.L       R14,@-R15
    00000262 4F22                   STS.L       PR,@-R15
    00000264 7FF4                   ADD         #-12,R15
    00000266 2F42                   MOV.L       R4,@R15
    00000268 1F51                   MOV.L       R5,@(4,R15)
    0000026A 1F62                   MOV.L       R6,@(8,R15)
    0000026C 2F36                   MOV.L       R3,@-R15
    0000026E 6633                   MOV         R3,R6
    00000270 55F3                   MOV.L       @(12,R15),R5
    00000272 420B                   JSR         @R2
    00000274 54F1                   MOV.L       @(4,R15),R4
    00000276 6E03                   MOV         R0,R14
      expression   262        ExpressionStackPushValueNode(Parser, StackTop, ValueLoc);
    00000278 55F2                   MOV.L       @(8,R15),R5
    0000027A 6603                   MOV         R0,R6
    0000027C BFD9                   BSR         _ExpressionStackPushValueNode
    0000027E 54F1                   MOV.L       @(4,R15),R4
      expression   263        
      expression   264        return ValueLoc;
    00000280 60E3                   MOV         R14,R0
      expression   265    }
    00000282 7F10                   ADD         #16,R15
    00000284 4F26                   LDS.L       @R15+,PR
    00000286 000B                   RTS
    00000288 6EF6                   MOV.L       @R15+,R14
      expression   266    
      expression   267    /* push a value on to the expression stack */
      expression   268    void ExpressionStackPushValue(struct ParseState *Parser, struct ExpressionStack **StackTop, struct Value *
                         +PushValue)
    0000028A              _ExpressionStackPushValue:       ; function: ExpressionStackPushValue
                                                           ; frame size=16
    0000028A 4F22                   STS.L       PR,@-R15
      expression   269    {
      expression   270        struct Value *ValueLoc = VariableAllocValueAndCopy(Parser, PushValue, FALSE);
    0000028C D374                   MOV.L       L1565+18,R3; _VariableAllocValueAndCopy
    0000028E 7FF4                   ADD         #-12,R15
    00000290 2F42                   MOV.L       R4,@R15
    00000292 1F51                   MOV.L       R5,@(4,R15)
    00000294 1F62                   MOV.L       R6,@(8,R15)
    00000296 E600                   MOV         #0,R6
    00000298 55F2                   MOV.L       @(8,R15),R5
    0000029A 430B                   JSR         @R3
    0000029C 64F2                   MOV.L       @R15,R4
    0000029E 6603                   MOV         R0,R6
      expression   271        ExpressionStackPushValueNode(Parser, StackTop, ValueLoc);
    000002A0 55F1                   MOV.L       @(4,R15),R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002A2 64F2                   MOV.L       @R15,R4
    000002A4 7F0C                   ADD         #12,R15
    000002A6 AFC4                   BRA         _ExpressionStackPushValueNode
    000002A8 4F26                   LDS.L       @R15+,PR
      expression   272    }
      expression   273    
      expression   274    void ExpressionStackPushLValue(struct ParseState *Parser, struct ExpressionStack **StackTop, struct Value 
                         +*PushValue, int Offset)
    000002AA              _ExpressionStackPushLValue:      ; function: ExpressionStackPushLValue
                                                           ; frame size=20
    000002AA 4F22                   STS.L       PR,@-R15
      expression   275    {
      expression   276        struct Value *ValueLoc = VariableAllocValueShared(Parser, PushValue);
    000002AC D36D                   MOV.L       L1565+22,R3; _VariableAllocValueShared
    000002AE 7FF0                   ADD         #-16,R15
    000002B0 2F42                   MOV.L       R4,@R15
    000002B2 1F51                   MOV.L       R5,@(4,R15)
    000002B4 1F63                   MOV.L       R6,@(12,R15)
    000002B6 1F72                   MOV.L       R7,@(8,R15)
    000002B8 55F3                   MOV.L       @(12,R15),R5
    000002BA 430B                   JSR         @R3
    000002BC 64F2                   MOV.L       @R15,R4
    000002BE 6603                   MOV         R0,R6
      expression   277        ValueLoc->Val = (void *)((char *)ValueLoc->Val + Offset);
    000002C0 53F2                   MOV.L       @(8,R15),R3
    000002C2 5261                   MOV.L       @(4,R6),R2
    000002C4 323C                   ADD         R3,R2
    000002C6 1621                   MOV.L       R2,@(4,R6)
      expression   278        ExpressionStackPushValueNode(Parser, StackTop, ValueLoc);
    000002C8 55F1                   MOV.L       @(4,R15),R5
    000002CA 64F2                   MOV.L       @R15,R4
    000002CC 7F10                   ADD         #16,R15
    000002CE AFB0                   BRA         _ExpressionStackPushValueNode
    000002D0 4F26                   LDS.L       @R15+,PR
      expression   279    }
      expression   280    
      expression   281    void ExpressionStackPushDereference(struct ParseState *Parser, struct ExpressionStack **StackTop, struct V
                         +alue *DereferenceValue)
    000002D2              _ExpressionStackPushDereference: ; function: ExpressionStackPushDereference
                                                           ; frame size=44
    000002D2 2FE6                   MOV.L       R14,@-R15
    000002D4 2FD6                   MOV.L       R13,@-R15
    000002D6 6E43                   MOV         R4,R14
    000002D8 4F22                   STS.L       PR,@-R15
    000002DA 7FE8                   ADD         #-24,R15
    000002DC 1F54                   MOV.L       R5,@(16,R15)
      expression   282    {
      expression   283        struct Value *DerefVal;
      expression   284        struct Value *ValueLoc;
      expression   285        int Offset;
      expression   286        struct ValueType *DerefType;
      expression   287        int DerefIsLValue;
      expression   288        void *DerefDataLoc = VariableDereferencePointer(Parser, DereferenceValue, &DerefVal, &Offset, &DerefTy
                         +pe, &DerefIsLValue);
    000002DE 63F3                   MOV         R15,R3
    000002E0 1F65                   MOV.L       R6,@(20,R15)
    000002E2 7308                   ADD         #8,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002E4 2F36                   MOV.L       R3,@-R15
    000002E6 62F3                   MOV         R15,R2
    000002E8 D35F                   MOV.L       L1565+26,R3; _VariableDereferencePointer
    000002EA 7208                   ADD         #8,R2
    000002EC 2F26                   MOV.L       R2,@-R15
    000002EE 67F3                   MOV         R15,R7
    000002F0 55F7                   MOV.L       @(28,R15),R5
    000002F2 66F3                   MOV         R15,R6
    000002F4 7714                   ADD         #20,R7
    000002F6 7608                   ADD         #8,R6
    000002F8 430B                   JSR         @R3
    000002FA 64E3                   MOV         R14,R4
    000002FC 6D03                   MOV         R0,R13
      expression   289        if (DerefDataLoc == NULL)
    000002FE 2DD8                   TST         R13,R13
    00000300 8F06                   BF/S        L1225
    00000302 7F08                   ADD         #8,R15
      expression   290            ProgramFail(Parser, "NULL pointer dereference");
    00000304 D359                   MOV.L       L1565+30,R3; L601
    00000306 2F36                   MOV.L       R3,@-R15
    00000308 D252                   MOV.L       L1565+6,R2 ; _ProgramFail
    0000030A 420B                   JSR         @R2
    0000030C 64E3                   MOV         R14,R4
    0000030E 7F04                   ADD         #4,R15
    00000310              L1225:                            
      expression   291    
      expression   292        ValueLoc = VariableAllocValueFromExistingData(Parser, DerefType, (union AnyValue *)DerefDataLoc, Deref
                         +IsLValue, DerefVal);
    00000310 63F2                   MOV.L       @R15,R3
    00000312 66D3                   MOV         R13,R6
    00000314 2F36                   MOV.L       R3,@-R15
    00000316 57F3                   MOV.L       @(12,R15),R7
    00000318 55F2                   MOV.L       @(8,R15),R5
    0000031A D355                   MOV.L       L1565+34,R3; _VariableAllocValueFromExistingData
    0000031C 430B                   JSR         @R3
    0000031E 64E3                   MOV         R14,R4
      expression   293        ExpressionStackPushValueNode(Parser, StackTop, ValueLoc);
    00000320 55F5                   MOV.L       @(20,R15),R5
    00000322 6603                   MOV         R0,R6
    00000324 BF85                   BSR         _ExpressionStackPushValueNode
    00000326 64E3                   MOV         R14,R4
      expression   294    }
    00000328 7F1C                   ADD         #28,R15
    0000032A 4F26                   LDS.L       @R15+,PR
    0000032C 6DF6                   MOV.L       @R15+,R13
    0000032E 000B                   RTS
    00000330 6EF6                   MOV.L       @R15+,R14
      expression   295    
      expression   296    void ExpressionPushInt(struct ParseState *Parser, struct ExpressionStack **StackTop, long IntValue)
    00000332              _ExpressionPushInt:              ; function: ExpressionPushInt
                                                           ; frame size=20
      expression   297    {
      expression   298        struct Value *ValueLoc = VariableAllocValueFromType(Parser, &IntType, FALSE, NULL, FALSE);
    00000332 E300                   MOV         #0,R3
    00000334 D249                   MOV.L       L1565+14,R2; _VariableAllocValueFromType
    00000336 6733                   MOV         R3,R7
    00000338 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000033A 7FF4                   ADD         #-12,R15
    0000033C 2F42                   MOV.L       R4,@R15
    0000033E 1F51                   MOV.L       R5,@(4,R15)
    00000340 1F62                   MOV.L       R6,@(8,R15)
    00000342 6633                   MOV         R3,R6
    00000344 D54B                   MOV.L       L1565+38,R5; _IntType
    00000346 2F36                   MOV.L       R3,@-R15
    00000348 420B                   JSR         @R2
    0000034A 54F1                   MOV.L       @(4,R15),R4
      expression   299        ValueLoc->Val->Integer = IntValue;
    0000034C 52F3                   MOV.L       @(12,R15),R2
    0000034E 6603                   MOV         R0,R6
    00000350 5361                   MOV.L       @(4,R6),R3
    00000352 2322                   MOV.L       R2,@R3
      expression   300        ExpressionStackPushValueNode(Parser, StackTop, ValueLoc);
    00000354 55F2                   MOV.L       @(8,R15),R5
    00000356 54F1                   MOV.L       @(4,R15),R4
    00000358 7F10                   ADD         #16,R15
    0000035A AF6A                   BRA         _ExpressionStackPushValueNode
    0000035C 4F26                   LDS.L       @R15+,PR
      expression   301    }
      expression   302    
      expression   303    #ifndef NO_FP
      expression   304    void ExpressionPushFP(struct ParseState *Parser, struct ExpressionStack **StackTop, double FPValue)
    0000035E              _ExpressionPushFP:               ; function: ExpressionPushFP
                                                           ; frame size=16
      expression   305    {
      expression   306        struct Value *ValueLoc = VariableAllocValueFromType(Parser, &FPType, FALSE, NULL, FALSE);
    0000035E E300                   MOV         #0,R3
    00000360 D23E                   MOV.L       L1565+14,R2; _VariableAllocValueFromType
    00000362 6733                   MOV         R3,R7
    00000364 4F22                   STS.L       PR,@-R15
    00000366 6633                   MOV         R3,R6
    00000368 7FF8                   ADD         #-8,R15
    0000036A 2F42                   MOV.L       R4,@R15
    0000036C 1F51                   MOV.L       R5,@(4,R15)
    0000036E 2F36                   MOV.L       R3,@-R15
    00000370 D541                   MOV.L       L1565+42,R5; _FPType
    00000372 420B                   JSR         @R2
    00000374 54F1                   MOV.L       @(4,R15),R4
    00000376 6603                   MOV         R0,R6
      expression   307        ValueLoc->Val->FP = FPValue;
    00000378 5161                   MOV.L       @(4,R6),R1
    0000037A 62F3                   MOV         R15,R2
    0000037C 7210                   ADD         #16,R2
    0000037E 6022                   MOV.L       @R2,R0
    00000380 2102                   MOV.L       R0,@R1
    00000382 5021                   MOV.L       @(4,R2),R0
    00000384 1101                   MOV.L       R0,@(4,R1)
      expression   308        ExpressionStackPushValueNode(Parser, StackTop, ValueLoc);
    00000386 55F2                   MOV.L       @(8,R15),R5
    00000388 54F1                   MOV.L       @(4,R15),R4
    0000038A 7F0C                   ADD         #12,R15
    0000038C AF51                   BRA         _ExpressionStackPushValueNode
    0000038E 4F26                   LDS.L       @R15+,PR
      expression   309    }
      expression   310    #endif




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   311    
      expression   312    /* assign to a pointer */
      expression   313    void ExpressionAssignToPointer(struct ParseState *Parser, struct Value *ToValue, struct Value *FromValue, 
                         +const char *FuncName, int ParamNo, int AllowPointerCoercion)
    00000390              _ExpressionAssignToPointer:      ; function: ExpressionAssignToPointer
                                                           ; frame size=52
    00000390 2FE6                   MOV.L       R14,@-R15
    00000392 6E63                   MOV         R6,R14
    00000394 2FD6                   MOV.L       R13,@-R15
    00000396 6D53                   MOV         R5,R13
    00000398 2FC6                   MOV.L       R12,@-R15
    0000039A 2FB6                   MOV.L       R11,@-R15
    0000039C 2F86                   MOV.L       R8,@-R15
    0000039E 4F22                   STS.L       PR,@-R15
    000003A0 7FF4                   ADD         #-12,R15
    000003A2 2F42                   MOV.L       R4,@R15
    000003A4 1F72                   MOV.L       R7,@(8,R15)
      expression   314    {
      expression   315        struct ValueType *PointedToType = ToValue->Typ->FromType;
    000003A6 65D2                   MOV.L       @R13,R5
      expression   316        
      expression   317        if (FromValue->Typ == ToValue->Typ || FromValue->Typ == VoidPtrType || (ToValue->Typ == VoidPtrType &&
                         + FromValue->Typ->Base == TypePointer))
    000003A8 66E2                   MOV.L       @R14,R6
    000003AA 3650                   CMP/EQ      R5,R6
    000003AC 8F02                   BF/S        L1566
    000003AE 5455                   MOV.L       @(20,R5),R4
    000003B0 A083                   BRA         L924
    000003B2 0009                   NOP
    000003B4              L1566:                            
    000003B4 D331                   MOV.L       L1565+46,R3; _VoidPtrType
    000003B6 6232                   MOV.L       @R3,R2
    000003B8 3620                   CMP/EQ      R2,R6
    000003BA 8B01                   BF          L1567
    000003BC A07D                   BRA         L924
    000003BE 0009                   NOP
    000003C0              L1567:                            
    000003C0 6032                   MOV.L       @R3,R0
    000003C2 3500                   CMP/EQ      R0,R5
    000003C4 8B02                   BF          L1226
    000003C6 6062                   MOV.L       @R6,R0
    000003C8 880B                   CMP/EQ      #11,R0
    000003CA 8976                   BT          L924
    000003CC              L1226:                            
      expression   318            ToValue->Val->Pointer = FromValue->Val->Pointer;      /* plain old pointer assignment */
      expression   319            
      expression   320        else if (FromValue->Typ->Base == TypeArray && (PointedToType == FromValue->Typ->FromType || ToValue->T
                         +yp == VoidPtrType))
    000003CC 65E2                   MOV.L       @R14,R5
    000003CE 6052                   MOV.L       @R5,R0
    000003D0 880C                   CMP/EQ      #12,R0
    000003D2 8B0C                   BF          L1229
    000003D4 5255                   MOV.L       @(20,R5),R2
    000003D6 3420                   CMP/EQ      R2,R4
    000003D8 8904                   BT          L1230
    000003DA D028                   MOV.L       L1565+46,R0; _VoidPtrType
    000003DC 63D2                   MOV.L       @R13,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003DE 6102                   MOV.L       @R0,R1
    000003E0 3310                   CMP/EQ      R1,R3
    000003E2 8B04                   BF          L1229
    000003E4              L1230:                            
      expression   321        {
      expression   322            /* the form is: blah *x = array of blah */
      expression   323            ToValue->Val->Pointer = (void *)&FromValue->Val->ArrayMem[0];
    000003E4 53D1                   MOV.L       @(4,R13),R3
    000003E6 52E1                   MOV.L       @(4,R14),R2
    000003E8 2322                   MOV.L       R2,@R3
    000003EA A079                   BRA         L1228
    000003EC 6123                   MOV         R2,R1
    000003EE              L1229:                            
      expression   324        }
      expression   325        else if (FromValue->Typ->Base == TypePointer && FromValue->Typ->FromType->Base == TypeArray && 
      expression   326                   (PointedToType == FromValue->Typ->FromType->FromType || ToValue->Typ == VoidPtrType) )
    000003EE 65E2                   MOV.L       @R14,R5
    000003F0 6052                   MOV.L       @R5,R0
    000003F2 880B                   CMP/EQ      #11,R0
    000003F4 8F18                   BF/S        L1232
    000003F6 EC00                   MOV         #0,R12
    000003F8 5055                   MOV.L       @(20,R5),R0
    000003FA 6002                   MOV.L       @R0,R0
    000003FC 880C                   CMP/EQ      #12,R0
    000003FE 8B13                   BF          L1232
    00000400 5255                   MOV.L       @(20,R5),R2
    00000402 5325                   MOV.L       @(20,R2),R3
    00000404 3430                   CMP/EQ      R3,R4
    00000406 8904                   BT          L1233
    00000408 D01C                   MOV.L       L1565+46,R0; _VoidPtrType
    0000040A 6102                   MOV.L       @R0,R1
    0000040C 62D2                   MOV.L       @R13,R2
    0000040E 3210                   CMP/EQ      R1,R2
    00000410 8B0A                   BF          L1232
    00000412              L1233:                            
      expression   327        {
      expression   328            /* the form is: blah *x = pointer to array of blah */
      expression   329            ToValue->Val->Pointer = VariableDereferencePointer(Parser, FromValue, NULL, NULL, NULL, NULL);
    00000412 E700                   MOV         #0,R7
    00000414 D314                   MOV.L       L1565+26,R3; _VariableDereferencePointer
    00000416 65E3                   MOV         R14,R5
    00000418 58D1                   MOV.L       @(4,R13),R8
    0000041A 6673                   MOV         R7,R6
    0000041C 2FC6                   MOV.L       R12,@-R15
    0000041E 2FC6                   MOV.L       R12,@-R15
    00000420 430B                   JSR         @R3
    00000422 54F2                   MOV.L       @(8,R15),R4
    00000424 A040                   BRA         L1523
    00000426 7F08                   ADD         #8,R15
    00000428              L1232:                            
      expression   330        }
      expression   331        else if (IS_NUMERIC_COERCIBLE(FromValue) && ExpressionCoerceInteger(FromValue) == 0)
    00000428 6BE2                   MOV.L       @R14,R11
    0000042A E301                   MOV         #1,R3
    0000042C 1FB1                   MOV.L       R11,@(4,R15)
    0000042E 6BB2                   MOV.L       @R11,R11
    00000430 3B33                   CMP/GE      R3,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000432 8B02                   BF          L1237
    00000434 E107                   MOV         #7,R1
    00000436 3B17                   CMP/GT      R1,R11
    00000438 8B02                   BF          L1236
    0000043A              L1237:                            
    0000043A 60B3                   MOV         R11,R0
    0000043C 8808                   CMP/EQ      #8,R0
    0000043E 8B1F                   BF          L1235
    00000440              L1236:                            
    00000440 BDDE                   BSR         _ExpressionCoerceInteger
    00000442 64E3                   MOV         R14,R4
    00000444 2008                   TST         R0,R0
    00000446 8B1B                   BF          L1235
      expression   332        {
      expression   333            /* null pointer assignment */
      expression   334            ToValue->Val->Pointer = NULL;
    00000448 52D1                   MOV.L       @(4,R13),R2
    0000044A A049                   BRA         L1228
    0000044C 22C2                   MOV.L       R12,@R2
    0000044E              L1565:                            
    0000044E 0000                   .DATA.W     0
    00000450 <00000000>             .DATA.L     L558
    00000454 <00000000>             .DATA.L     _ProgramFail
    00000458 <00000000>             .DATA.L     _VariableAlloc
    0000045C <00000000>             .DATA.L     _VariableAllocValueFromType
    00000460 <00000000>             .DATA.L     _VariableAllocValueAndCopy
    00000464 <00000000>             .DATA.L     _VariableAllocValueShared
    00000468 <00000000>             .DATA.L     _VariableDereferencePointer
    0000046C <00000000>             .DATA.L     L601
    00000470 <00000000>             .DATA.L     _VariableAllocValueFromExistingData
    00000474 <00000000>             .DATA.L     _IntType
    00000478 <00000000>             .DATA.L     _FPType
    0000047C <00000000>             .DATA.L     _VoidPtrType
    00000480              L1235:                            
      expression   335        }
      expression   336        else if (AllowPointerCoercion && IS_NUMERIC_COERCIBLE(FromValue))
    00000480 52FA                   MOV.L       @(40,R15),R2
    00000482 2228                   TST         R2,R2
    00000484 891E                   BT          L1243
    00000486 E201                   MOV         #1,R2
    00000488 63E2                   MOV.L       @R14,R3
    0000048A 6132                   MOV.L       @R3,R1
    0000048C 3123                   CMP/GE      R2,R1
    0000048E 8B04                   BF          L1241
    00000490 60E2                   MOV.L       @R14,R0
    00000492 E307                   MOV         #7,R3
    00000494 6102                   MOV.L       @R0,R1
    00000496 3137                   CMP/GT      R3,R1
    00000498 8B03                   BF          L1240
    0000049A              L1241:                            
    0000049A 60E2                   MOV.L       @R14,R0
    0000049C 6002                   MOV.L       @R0,R0
    0000049E 8808                   CMP/EQ      #8,R0
    000004A0 8B04                   BF          L1239
    000004A2              L1240:                            
      expression   337        {
      expression   338            /* assign integer to native pointer */




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   339            ToValue->Val->Pointer = (void *)(unsigned long)ExpressionCoerceUnsignedInteger(FromValue);
    000004A2 58D1                   MOV.L       @(4,R13),R8
    000004A4 BDE3                   BSR         _ExpressionCoerceUnsignedInteger
    000004A6 64E3                   MOV         R14,R4
    000004A8              L1523:                            
    000004A8 A01A                   BRA         L1228
    000004AA 2802                   MOV.L       R0,@R8
    000004AC              L1239:                            
      expression   340        }
      expression   341        else if (AllowPointerCoercion && FromValue->Typ->Base == TypePointer)
    000004AC 52FA                   MOV.L       @(40,R15),R2
    000004AE 2228                   TST         R2,R2
    000004B0 8908                   BT          L1243
    000004B2 60E2                   MOV.L       @R14,R0
    000004B4 6002                   MOV.L       @R0,R0
    000004B6 880B                   CMP/EQ      #11,R0
    000004B8 8B04                   BF          L1243
    000004BA              L924:
      expression   342        {
      expression   343            /* assign a pointer to a pointer to a different type */
      expression   344            ToValue->Val->Pointer = FromValue->Val->Pointer;
    000004BA 52D1                   MOV.L       @(4,R13),R2
    000004BC 53E1                   MOV.L       @(4,R14),R3
    000004BE 6132                   MOV.L       @R3,R1
    000004C0 A00E                   BRA         L1228
    000004C2 2212                   MOV.L       R1,@R2
    000004C4              L1243:                            
      expression   345        }
      expression   346        else
      expression   347            AssignFail(Parser, "%t from %t", ToValue->Typ, FromValue->Typ, 0, 0, FuncName, ParamNo); 
    000004C4 52F9                   MOV.L       @(36,R15),R2
    000004C6 2F26                   MOV.L       R2,@-R15
    000004C8 53F3                   MOV.L       @(12,R15),R3
    000004CA 2F36                   MOV.L       R3,@-R15
    000004CC 2FC6                   MOV.L       R12,@-R15
    000004CE E300                   MOV         #0,R3
    000004D0 D554                   MOV.L       L1568+2,R5 ; L628
    000004D2 2F36                   MOV.L       R3,@-R15
    000004D4 67E2                   MOV.L       @R14,R7
    000004D6 66D2                   MOV.L       @R13,R6
    000004D8 D253                   MOV.L       L1568+6,R2 ; _AssignFail
    000004DA 420B                   JSR         @R2
    000004DC 54F4                   MOV.L       @(16,R15),R4
    000004DE 7F10                   ADD         #16,R15
    000004E0              L1228:                            
      expression   348    }
    000004E0 7F0C                   ADD         #12,R15
    000004E2 4F26                   LDS.L       @R15+,PR
    000004E4 68F6                   MOV.L       @R15+,R8
    000004E6 6BF6                   MOV.L       @R15+,R11
    000004E8 6CF6                   MOV.L       @R15+,R12
    000004EA 6DF6                   MOV.L       @R15+,R13
    000004EC 000B                   RTS
    000004EE 6EF6                   MOV.L       @R15+,R14
      expression   349    
      expression   350    /* assign any kind of value */
      expression   351    void ExpressionAssign(struct ParseState *Parser, struct Value *DestValue, struct Value *SourceValue, int F




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +orce, const char *FuncName, int ParamNo, int AllowPointerCoercion)
    000004F0              _ExpressionAssign:               ; function: ExpressionAssign
                                                           ; frame size=56
    000004F0 2FE6                   MOV.L       R14,@-R15
    000004F2 6E63                   MOV         R6,R14
    000004F4 2FD6                   MOV.L       R13,@-R15
    000004F6 6D53                   MOV         R5,R13
    000004F8 2FC6                   MOV.L       R12,@-R15
    000004FA 2FB6                   MOV.L       R11,@-R15
    000004FC 2FA6                   MOV.L       R10,@-R15
    000004FE 6A43                   MOV         R4,R10
    00000500 2F96                   MOV.L       R9,@-R15
    00000502 2F86                   MOV.L       R8,@-R15
    00000504 4F22                   STS.L       PR,@-R15
    00000506 7FF8                   ADD         #-8,R15
      expression   352    {
      expression   353        if (!DestValue->IsLValue && !Force) 
    00000508 D947                   MOV.L       L1568+6,R9 ; _AssignFail
    0000050A 5BFA                   MOV.L       @(40,R15),R11
    0000050C 5CFB                   MOV.L       @(44,R15),R12
    0000050E 84DE                   MOV.B       @(14,R13),R0
    00000510 2008                   TST         R0,R0
    00000512 8F0D                   BF/S        L1245
    00000514 E800                   MOV         #0,R8
    00000516 2778                   TST         R7,R7
    00000518 8B0A                   BF          L1245
      expression   354            AssignFail(Parser, "not an lvalue", NULL, NULL, 0, 0, FuncName, ParamNo); 
    0000051A E200                   MOV         #0,R2
    0000051C D543                   MOV.L       L1568+10,R5; L637
    0000051E 6723                   MOV         R2,R7
    00000520 2FC6                   MOV.L       R12,@-R15
    00000522 6623                   MOV         R2,R6
    00000524 2FB6                   MOV.L       R11,@-R15
    00000526 2F86                   MOV.L       R8,@-R15
    00000528 2F26                   MOV.L       R2,@-R15
    0000052A 490B                   JSR         @R9
    0000052C 64A3                   MOV         R10,R4
    0000052E 7F10                   ADD         #16,R15
    00000530              L1245:                            
      expression   355    
      expression   356        if (IS_NUMERIC_COERCIBLE(DestValue) && !IS_NUMERIC_COERCIBLE_PLUS_POINTERS(SourceValue, AllowPointerCo
                         +ercion))
    00000530 64D2                   MOV.L       @R13,R4
    00000532 E301                   MOV         #1,R3
    00000534 1F41                   MOV.L       R4,@(4,R15)
    00000536 6442                   MOV.L       @R4,R4
    00000538 3433                   CMP/GE      R3,R4
    0000053A 8B02                   BF          L1248
    0000053C E107                   MOV         #7,R1
    0000053E 3417                   CMP/GT      R1,R4
    00000540 8B02                   BF          L1247
    00000542              L1248:                            
    00000542 6043                   MOV         R4,R0
    00000544 8808                   CMP/EQ      #8,R0
    00000546 8B1F                   BF          L1246
    00000548              L1247:                            
    00000548 62E2                   MOV.L       @R14,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000054A E301                   MOV         #1,R3
    0000054C 6122                   MOV.L       @R2,R1
    0000054E 3133                   CMP/GE      R3,R1
    00000550 8B04                   BF          L1249
    00000552 E207                   MOV         #7,R2
    00000554 60E2                   MOV.L       @R14,R0
    00000556 6102                   MOV.L       @R0,R1
    00000558 3127                   CMP/GT      R2,R1
    0000055A 8B15                   BF          L1246
    0000055C              L1249:                            
    0000055C 60E2                   MOV.L       @R14,R0
    0000055E 6002                   MOV.L       @R0,R0
    00000560 8808                   CMP/EQ      #8,R0
    00000562 8911                   BT          L1246
    00000564 52FC                   MOV.L       @(48,R15),R2
    00000566 2228                   TST         R2,R2
    00000568 8903                   BT          L1251
    0000056A 60E2                   MOV.L       @R14,R0
    0000056C 6002                   MOV.L       @R0,R0
    0000056E 880B                   CMP/EQ      #11,R0
    00000570 890A                   BT          L1246
    00000572              L1251:                            
      expression   357            AssignFail(Parser, "%t from %t", DestValue->Typ, SourceValue->Typ, 0, 0, FuncName, ParamNo); 
    00000572 E300                   MOV         #0,R3
    00000574 D52B                   MOV.L       L1568+2,R5 ; L628
    00000576 2FC6                   MOV.L       R12,@-R15
    00000578 2FB6                   MOV.L       R11,@-R15
    0000057A 2F86                   MOV.L       R8,@-R15
    0000057C 2F36                   MOV.L       R3,@-R15
    0000057E 67E2                   MOV.L       @R14,R7
    00000580 66D2                   MOV.L       @R13,R6
    00000582 490B                   JSR         @R9
    00000584 64A3                   MOV         R10,R4
    00000586 7F10                   ADD         #16,R15
    00000588              L1246:                            
      expression   358    
      expression   359        switch (DestValue->Typ->Base)
    00000588 60D2                   MOV.L       @R13,R0
    0000058A 6002                   MOV.L       @R0,R0
    0000058C 8801                   CMP/EQ      #1,R0
    0000058E 891B                   BT          L1037
    00000590 8802                   CMP/EQ      #2,R0
    00000592 891F                   BT          L1038
    00000594 8803                   CMP/EQ      #3,R0
    00000596 8923                   BT          L1039
    00000598 8804                   CMP/EQ      #4,R0
    0000059A 8928                   BT          L1040
    0000059C 8805                   CMP/EQ      #5,R0
    0000059E 892C                   BT          L1041
    000005A0 8806                   CMP/EQ      #6,R0
    000005A2 8930                   BT          L1042
    000005A4 8807                   CMP/EQ      #7,R0
    000005A6 8935                   BT          L1043
    000005A8 8808                   CMP/EQ      #8,R0
    000005AA 8941                   BT          L1044
    000005AC 880B                   CMP/EQ      #11,R0
    000005AE 8962                   BT          L1045




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005B0 880C                   CMP/EQ      #12,R0
    000005B2 896A                   BT          L1046
    000005B4 880D                   CMP/EQ      #13,R0
    000005B6 8B01                   BF          L1569
    000005B8 A090                   BRA         L1048
    000005BA 0009                   NOP
    000005BC              L1569:                            
    000005BC 880E                   CMP/EQ      #14,R0
    000005BE 8B01                   BF          L1570
    000005C0 A08C                   BRA         L1049
    000005C2 0009                   NOP
    000005C4              L1570:                            
    000005C4 A0AB                   BRA         L1050
    000005C6 0009                   NOP
    000005C8              L1037:                           ; case label 
      expression   360        {
      expression   361            case TypeInt:           DestValue->Val->Integer = ExpressionCoerceInteger(SourceValue); break;
    000005C8 53D1                   MOV.L       @(4,R13),R3
    000005CA 2F36                   MOV.L       R3,@-R15
    000005CC BD18                   BSR         _ExpressionCoerceInteger
    000005CE 64E3                   MOV         R14,R4
    000005D0 A024                   BRA         L1527
    000005D2 0009                   NOP
    000005D4              L1038:                           ; case label 
      expression   362            case TypeShort:         DestValue->Val->ShortInteger = ExpressionCoerceInteger(SourceValue); break
                         +;
    000005D4 52D1                   MOV.L       @(4,R13),R2
    000005D6 2F26                   MOV.L       R2,@-R15
    000005D8 BD12                   BSR         _ExpressionCoerceInteger
    000005DA 64E3                   MOV         R14,R4
    000005DC A017                   BRA         L1526
    000005DE 0009                   NOP
    000005E0              L1039:                           ; case label 
      expression   363            case TypeChar:          DestValue->Val->Character = ExpressionCoerceUnsignedInteger(SourceValue); 
                         +break;
    000005E0 52D1                   MOV.L       @(4,R13),R2
    000005E2 2F26                   MOV.L       R2,@-R15
    000005E4 BD43                   BSR         _ExpressionCoerceUnsignedInteger
    000005E6 64E3                   MOV         R14,R4
    000005E8 61F6                   MOV.L       @R15+,R1
    000005EA A0A3                   BRA         L1252
    000005EC 2100                   MOV.B       R0,@R1
    000005EE              L1040:                           ; case label 
      expression   364            case TypeLong:          DestValue->Val->LongInteger = ExpressionCoerceInteger(SourceValue); break;
    000005EE 52D1                   MOV.L       @(4,R13),R2
    000005F0 2F26                   MOV.L       R2,@-R15
    000005F2 BD05                   BSR         _ExpressionCoerceInteger
    000005F4 64E3                   MOV         R14,R4
    000005F6 A011                   BRA         L1527
    000005F8 0009                   NOP
    000005FA              L1041:                           ; case label 
      expression   365            case TypeUnsignedInt:   DestValue->Val->UnsignedInteger = ExpressionCoerceUnsignedInteger(SourceVa
                         +lue); break;
    000005FA 52D1                   MOV.L       @(4,R13),R2
    000005FC 2F26                   MOV.L       R2,@-R15
    000005FE BD36                   BSR         _ExpressionCoerceUnsignedInteger
    00000600 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000602 A00B                   BRA         L1527
    00000604 0009                   NOP
    00000606              L1042:                           ; case label 
      expression   366            case TypeUnsignedShort: DestValue->Val->UnsignedShortInteger = ExpressionCoerceUnsignedInteger(Sou
                         +rceValue); break;
    00000606 52D1                   MOV.L       @(4,R13),R2
    00000608 2F26                   MOV.L       R2,@-R15
    0000060A BD30                   BSR         _ExpressionCoerceUnsignedInteger
    0000060C 64E3                   MOV         R14,R4
    0000060E              L1526:                            
    0000060E 61F6                   MOV.L       @R15+,R1
    00000610 A090                   BRA         L1252
    00000612 2101                   MOV.W       R0,@R1
    00000614              L1043:                           ; case label 
      expression   367            case TypeUnsignedLong:  DestValue->Val->UnsignedLongInteger = ExpressionCoerceUnsignedInteger(Sour
                         +ceValue); break;
    00000614 52D1                   MOV.L       @(4,R13),R2
    00000616 2F26                   MOV.L       R2,@-R15
    00000618 BD29                   BSR         _ExpressionCoerceUnsignedInteger
    0000061A 64E3                   MOV         R14,R4
    0000061C              L1527:                            
    0000061C 61F6                   MOV.L       @R15+,R1
    0000061E A089                   BRA         L1252
    00000620 2102                   MOV.L       R0,@R1
    00000622              L1568:                            
    00000622 0000                   .DATA.W     0
    00000624 <00000000>             .DATA.L     L628
    00000628 <00000000>             .DATA.L     _AssignFail
    0000062C <00000000>             .DATA.L     L637
    00000630              L1044:                           ; case label 
      expression   368    
      expression   369    #ifndef NO_FP
      expression   370            case TypeFP:
      expression   371                if (!IS_NUMERIC_COERCIBLE_PLUS_POINTERS(SourceValue, AllowPointerCoercion)) 
    00000630 64E2                   MOV.L       @R14,R4
    00000632 E301                   MOV         #1,R3
    00000634 2F42                   MOV.L       R4,@R15
    00000636 6442                   MOV.L       @R4,R4
    00000638 3433                   CMP/GE      R3,R4
    0000063A 8B02                   BF          L1254
    0000063C E107                   MOV         #7,R1
    0000063E 3417                   CMP/GT      R1,R4
    00000640 8B13                   BF          L1253
    00000642              L1254:                            
    00000642 6043                   MOV         R4,R0
    00000644 8808                   CMP/EQ      #8,R0
    00000646 8910                   BT          L1253
    00000648 52FC                   MOV.L       @(48,R15),R2
    0000064A 2228                   TST         R2,R2
    0000064C 8902                   BT          L1256
    0000064E 6043                   MOV         R4,R0
    00000650 880B                   CMP/EQ      #11,R0
    00000652 890A                   BT          L1253
    00000654              L1256:                            
      expression   372                    AssignFail(Parser, "%t from %t", DestValue->Typ, SourceValue->Typ, 0, 0, FuncName, ParamNo
                         +); 
    00000654 2FC6                   MOV.L       R12,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000656 E300                   MOV         #0,R3
    00000658 D58F                   MOV.L       L1571+2,R5 ; L628
    0000065A 2FB6                   MOV.L       R11,@-R15
    0000065C 2F86                   MOV.L       R8,@-R15
    0000065E 2F36                   MOV.L       R3,@-R15
    00000660 67E2                   MOV.L       @R14,R7
    00000662 66D2                   MOV.L       @R13,R6
    00000664 490B                   JSR         @R9
    00000666 64A3                   MOV         R10,R4
    00000668 7F10                   ADD         #16,R15
    0000066A              L1253:                            
      expression   373                
      expression   374                DestValue->Val->FP = ExpressionCoerceFP(SourceValue);
    0000066A 52D1                   MOV.L       @(4,R13),R2
    0000066C 2F26                   MOV.L       R2,@-R15
    0000066E BD35                   BSR         _ExpressionCoerceFP
    00000670 64E3                   MOV         R14,R4
      expression   375                break;
    00000672 A05F                   BRA         L1252
    00000674 7F04                   ADD         #4,R15
    00000676              L1045:                           ; case label 
      expression   376    #endif
      expression   377            case TypePointer:
      expression   378                ExpressionAssignToPointer(Parser, DestValue, SourceValue, FuncName, ParamNo, AllowPointerCoerc
                         +ion);
    00000676 67B3                   MOV         R11,R7
    00000678 52FC                   MOV.L       @(48,R15),R2
    0000067A 66E3                   MOV         R14,R6
    0000067C 2F26                   MOV.L       R2,@-R15
    0000067E 65D3                   MOV         R13,R5
    00000680 2FC6                   MOV.L       R12,@-R15
    00000682 BE85                   BSR         _ExpressionAssignToPointer
    00000684 64A3                   MOV         R10,R4
      expression   379                break;
    00000686 A055                   BRA         L1252
    00000688 7F08                   ADD         #8,R15
    0000068A              L1046:                           ; case label 
      expression   380            
      expression   381            case TypeArray:
      expression   382                if (DestValue->Typ != SourceValue->Typ)
    0000068A 63E2                   MOV.L       @R14,R3
    0000068C 62D2                   MOV.L       @R13,R2
    0000068E 3230                   CMP/EQ      R3,R2
    00000690 890A                   BT          L1257
      expression   383                    AssignFail(Parser, "%t from %t", DestValue->Typ, SourceValue->Typ, 0, 0, FuncName, ParamNo
                         +); 
    00000692 E300                   MOV         #0,R3
    00000694 D580                   MOV.L       L1571+2,R5 ; L628
    00000696 2FC6                   MOV.L       R12,@-R15
    00000698 2FB6                   MOV.L       R11,@-R15
    0000069A 2F86                   MOV.L       R8,@-R15
    0000069C 2F36                   MOV.L       R3,@-R15
    0000069E 67E2                   MOV.L       @R14,R7
    000006A0 66D2                   MOV.L       @R13,R6
    000006A2 490B                   JSR         @R9
    000006A4 64A3                   MOV         R10,R4
    000006A6 7F10                   ADD         #16,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006A8              L1257:                            
      expression   384                
      expression   385                if (DestValue->Typ->ArraySize != SourceValue->Typ->ArraySize)
    000006A8 62D2                   MOV.L       @R13,R2
    000006AA 63E2                   MOV.L       @R14,R3
    000006AC 5221                   MOV.L       @(4,R2),R2
    000006AE 5131                   MOV.L       @(4,R3),R1
    000006B0 3210                   CMP/EQ      R1,R2
    000006B2 890D                   BT          L1258
      expression   386                    AssignFail(Parser, "from an array of size %d to one of size %d", NULL, NULL, DestValue->Ty
                         +p->ArraySize, SourceValue->Typ->ArraySize, FuncName, ParamNo);
    000006B4 2FC6                   MOV.L       R12,@-R15
    000006B6 E700                   MOV         #0,R7
    000006B8 D578                   MOV.L       L1571+6,R5 ; L639
    000006BA 6673                   MOV         R7,R6
    000006BC 2FB6                   MOV.L       R11,@-R15
    000006BE 62E2                   MOV.L       @R14,R2
    000006C0 5321                   MOV.L       @(4,R2),R3
    000006C2 2F36                   MOV.L       R3,@-R15
    000006C4 61D2                   MOV.L       @R13,R1
    000006C6 5311                   MOV.L       @(4,R1),R3
    000006C8 2F36                   MOV.L       R3,@-R15
    000006CA 490B                   JSR         @R9
    000006CC 64A3                   MOV         R10,R4
    000006CE 7F10                   ADD         #16,R15
    000006D0              L1258:                            
      expression   387                
      expression   388                memcpy((void *)DestValue->Val, (void *)SourceValue->Val, TypeSizeValue(DestValue, FALSE));
    000006D0 D273                   MOV.L       L1571+10,R2; _TypeSizeValue
    000006D2 E500                   MOV         #0,R5
    000006D4 420B                   JSR         @R2
    000006D6 64D3                   MOV         R13,R4
      expression   389                break;
    000006D8 A013                   BRA         L1528
    000006DA 0009                   NOP
    000006DC              L1048:                           ; case label 
      expression   390            
      expression   391            case TypeStruct:
      expression   392            case TypeUnion:
    000006DC              L1049:                           ; case label 
      expression   393                if (DestValue->Typ != SourceValue->Typ)
    000006DC 63E2                   MOV.L       @R14,R3
    000006DE 62D2                   MOV.L       @R13,R2
    000006E0 3230                   CMP/EQ      R3,R2
    000006E2 890A                   BT          L1259
      expression   394                    AssignFail(Parser, "%t from %t", DestValue->Typ, SourceValue->Typ, 0, 0, FuncName, ParamNo
                         +); 
    000006E4 2FC6                   MOV.L       R12,@-R15
    000006E6 E300                   MOV         #0,R3
    000006E8 D56B                   MOV.L       L1571+2,R5 ; L628
    000006EA 2FB6                   MOV.L       R11,@-R15
    000006EC 2F86                   MOV.L       R8,@-R15
    000006EE 2F36                   MOV.L       R3,@-R15
    000006F0 67E2                   MOV.L       @R14,R7
    000006F2 66D2                   MOV.L       @R13,R6
    000006F4 490B                   JSR         @R9
    000006F6 64A3                   MOV         R10,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006F8 7F10                   ADD         #16,R15
    000006FA              L1259:                            
      expression   395                
      expression   396                memcpy((void *)DestValue->Val, (void *)SourceValue->Val, TypeSizeValue(SourceValue, FALSE));
    000006FA E500                   MOV         #0,R5
    000006FC D268                   MOV.L       L1571+10,R2; _TypeSizeValue
    000006FE 420B                   JSR         @R2
    00000700 64E3                   MOV         R14,R4
      expression   397                break;
    00000702              L1528:                            
    00000702 6603                   MOV         R0,R6
    00000704 55E1                   MOV.L       @(4,R14),R5
    00000706 54D1                   MOV.L       @(4,R13),R4
    00000708 D366                   MOV.L       L1571+14,R3; _memcpy
    0000070A 7F08                   ADD         #8,R15
    0000070C 4F26                   LDS.L       @R15+,PR
    0000070E 68F6                   MOV.L       @R15+,R8
    00000710 69F6                   MOV.L       @R15+,R9
    00000712 6AF6                   MOV.L       @R15+,R10
    00000714 6BF6                   MOV.L       @R15+,R11
    00000716 6CF6                   MOV.L       @R15+,R12
    00000718 6DF6                   MOV.L       @R15+,R13
    0000071A 432B                   JMP         @R3
    0000071C 6EF6                   MOV.L       @R15+,R14
    0000071E              L1050:                           ; default label 
      expression   398            
      expression   399            default:
      expression   400                AssignFail(Parser, "%t", DestValue->Typ, NULL, 0, 0, FuncName, ParamNo); 
    0000071E E300                   MOV         #0,R3
    00000720 D561                   MOV.L       L1571+18,R5; L640
    00000722 6733                   MOV         R3,R7
    00000724 2FC6                   MOV.L       R12,@-R15
    00000726 2FB6                   MOV.L       R11,@-R15
    00000728 2F86                   MOV.L       R8,@-R15
    0000072A 2F36                   MOV.L       R3,@-R15
    0000072C 66D2                   MOV.L       @R13,R6
    0000072E 490B                   JSR         @R9
    00000730 64A3                   MOV         R10,R4
    00000732 7F10                   ADD         #16,R15
      expression   401                break;
    00000734              L1252:                            
      expression   402        }
      expression   403    }
    00000734 7F08                   ADD         #8,R15
    00000736 4F26                   LDS.L       @R15+,PR
    00000738 68F6                   MOV.L       @R15+,R8
    0000073A 69F6                   MOV.L       @R15+,R9
    0000073C 6AF6                   MOV.L       @R15+,R10
    0000073E 6BF6                   MOV.L       @R15+,R11
    00000740 6CF6                   MOV.L       @R15+,R12
    00000742 6DF6                   MOV.L       @R15+,R13
    00000744 000B                   RTS
    00000746 6EF6                   MOV.L       @R15+,R14
      expression   404    
      expression   405    /* evaluate the first half of a ternary operator x ? y : z */
      expression   406    void ExpressionQuestionMarkOperator(struct ParseState *Parser, struct ExpressionStack **StackTop, struct V
                         +alue *BottomValue, struct Value *TopValue)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000748              _ExpressionQuestionMarkOperator: ; function: ExpressionQuestionMarkOperator
                                                           ; frame size=28
    00000748 2FE6                   MOV.L       R14,@-R15
      expression   407    {
      expression   408        if (!IS_NUMERIC_COERCIBLE(TopValue))
    0000074A E301                   MOV         #1,R3
    0000074C 4F22                   STS.L       PR,@-R15
    0000074E 6E43                   MOV         R4,R14
    00000750 7FF0                   ADD         #-16,R15
    00000752 6473                   MOV         R7,R4
    00000754 2F52                   MOV.L       R5,@R15
    00000756 1F63                   MOV.L       R6,@(12,R15)
    00000758 1F71                   MOV.L       R7,@(4,R15)
    0000075A 6442                   MOV.L       @R4,R4
    0000075C 1F42                   MOV.L       R4,@(8,R15)
    0000075E 6442                   MOV.L       @R4,R4
    00000760 3433                   CMP/GE      R3,R4
    00000762 8B02                   BF          L1261
    00000764 E107                   MOV         #7,R1
    00000766 3417                   CMP/GT      R1,R4
    00000768 8B08                   BF          L1260
    0000076A              L1261:                            
    0000076A 6043                   MOV         R4,R0
    0000076C 8808                   CMP/EQ      #8,R0
    0000076E 8905                   BT          L1260
      expression   409            ProgramFail(Parser, "first argument to '?' should be a number");
    00000770 D24E                   MOV.L       L1571+22,R2; L647
    00000772 2F26                   MOV.L       R2,@-R15
    00000774 D34E                   MOV.L       L1571+26,R3; _ProgramFail
    00000776 430B                   JSR         @R3
    00000778 64E3                   MOV         R14,R4
    0000077A 7F04                   ADD         #4,R15
    0000077C              L1260:                            
      expression   410    
      expression   411        if (ExpressionCoerceInteger(TopValue))
    0000077C BC40                   BSR         _ExpressionCoerceInteger
    0000077E 54F1                   MOV.L       @(4,R15),R4
    00000780 2008                   TST         R0,R0
    00000782 8906                   BT          L1262
      expression   412        {
      expression   413            /* the condition's true, return the BottomValue */
      expression   414            ExpressionStackPushValue(Parser, StackTop, BottomValue);
    00000784 56F3                   MOV.L       @(12,R15),R6
    00000786 64E3                   MOV         R14,R4
    00000788 65F2                   MOV.L       @R15,R5
    0000078A 7F10                   ADD         #16,R15
    0000078C 4F26                   LDS.L       @R15+,PR
    0000078E AD7C                   BRA         _ExpressionStackPushValue
    00000790 6EF6                   MOV.L       @R15+,R14
    00000792              L1262:                            
      expression   415        }
      expression   416        else
      expression   417        {
      expression   418            /* the condition's false, return void */
      expression   419            ExpressionStackPushValueByType(Parser, StackTop, &VoidType);
    00000792 64E3                   MOV         R14,R4
    00000794 D647                   MOV.L       L1571+30,R6; _VoidType




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000796 65F2                   MOV.L       @R15,R5
    00000798 7F10                   ADD         #16,R15
    0000079A 4F26                   LDS.L       @R15+,PR
    0000079C AD5D                   BRA         _ExpressionStackPushValueByType
    0000079E 6EF6                   MOV.L       @R15+,R14
      expression   420        }
      expression   421    }
      expression   422    
      expression   423    /* evaluate the second half of a ternary operator x ? y : z */
      expression   424    void ExpressionColonOperator(struct ParseState *Parser, struct ExpressionStack **StackTop, struct Value *B
                         +ottomValue, struct Value *TopValue)
    000007A0              _ExpressionColonOperator:        ; function: ExpressionColonOperator
                                                           ; frame size=4
    000007A0 7FFC                   ADD         #-4,R15
      expression   425    {
      expression   426        if (TopValue->Typ->Base == TypeVoid)
    000007A2 6373                   MOV         R7,R3
    000007A4 2F72                   MOV.L       R7,@R15
    000007A6 6232                   MOV.L       @R3,R2
    000007A8 6122                   MOV.L       @R2,R1
    000007AA 2118                   TST         R1,R1
    000007AC 8900                   BT          L1529
      expression   427        {
      expression   428            /* invoke the "else" part - return the BottomValue */
      expression   429            ExpressionStackPushValue(Parser, StackTop, BottomValue);
      expression   430        }
      expression   431        else
      expression   432        {
      expression   433            /* it was a "then" - return the TopValue */
      expression   434            ExpressionStackPushValue(Parser, StackTop, TopValue);
    000007AE 66F2                   MOV.L       @R15,R6
    000007B0              L1529:                            
    000007B0 AD6B                   BRA         _ExpressionStackPushValue
    000007B2 7F04                   ADD         #4,R15
      expression   435        }
      expression   436    }
      expression   437    
      expression   438    /* evaluate a prefix operator */
      expression   439    void ExpressionPrefixOperator(struct ParseState *Parser, struct ExpressionStack **StackTop, enum LexToken 
                         +Op, struct Value *TopValue)
    000007B4              _ExpressionPrefixOperator:       ; function: ExpressionPrefixOperator
                                                           ; frame size=72
                                                           ; used runtime library name:
                                                           ; __negd
    000007B4 2FE6                   MOV.L       R14,@-R15
      expression   440    {
      expression   441        struct Value *Result;
      expression   442        union AnyValue *ValPtr;
      expression   443    
      expression   444        switch (Op)
    000007B6 6063                   MOV         R6,R0
    000007B8 2FD6                   MOV.L       R13,@-R15
    000007BA 8813                   CMP/EQ      #19,R0
    000007BC 2FC6                   MOV.L       R12,@-R15
    000007BE 6D43                   MOV         R4,R13
    000007C0 2FB6                   MOV.L       R11,@-R15
    000007C2 6C53                   MOV         R5,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007C4 2FA6                   MOV.L       R10,@-R15
    000007C6 2F96                   MOV.L       R9,@-R15
    000007C8 2F86                   MOV.L       R8,@-R15
    000007CA 6963                   MOV         R6,R9
    000007CC DA3A                   MOV.L       L1571+34,R10; _TypeSize
    000007CE 4F22                   STS.L       PR,@-R15
    000007D0 DB37                   MOV.L       L1571+26,R11; _ProgramFail
    000007D2 7FEC                   ADD         #-20,R15
    000007D4 8D06                   BT/S        L1053
    000007D6 6E73                   MOV         R7,R14
    000007D8 881E                   CMP/EQ      #30,R0
    000007DA 8933                   BT          L1055
    000007DC 8825                   CMP/EQ      #37,R0
    000007DE 893E                   BT          L1056
    000007E0 A076                   BRA         L1057
    000007E2 0009                   NOP
    000007E4              L1053:                           ; case label 
      expression   445        {
      expression   446            case TokenAmpersand:
      expression   447                if (!TopValue->IsLValue)
    000007E4 84EE                   MOV.B       @(14,R14),R0
    000007E6 2008                   TST         R0,R0
    000007E8 8B04                   BF          L1267
      expression   448                    ProgramFail(Parser, "can't get the address of this");
    000007EA D334                   MOV.L       L1571+38,R3; L667
    000007EC 2F36                   MOV.L       R3,@-R15
    000007EE 4B0B                   JSR         @R11
    000007F0 64D3                   MOV         R13,R4
    000007F2 7F04                   ADD         #4,R15
    000007F4              L1267:                            
      expression   449    
      expression   450                ValPtr = TopValue->Val;
    000007F4 52E1                   MOV.L       @(4,R14),R2
      expression   451                Result = VariableAllocValueFromType(Parser, TypeGetMatching(Parser, TopValue->Typ, TypePointer
                         +, 0, StrEmpty, TRUE), FALSE, NULL, FALSE);
    000007F6 E300                   MOV         #0,R3
    000007F8 D031                   MOV.L       L1571+42,R0; _StrEmpty
    000007FA E60B                   MOV         #11,R6
    000007FC 2F22                   MOV.L       R2,@R15
    000007FE 6733                   MOV         R3,R7
    00000800 2F36                   MOV.L       R3,@-R15
    00000802 E201                   MOV         #1,R2
    00000804 2F36                   MOV.L       R3,@-R15
    00000806 2F36                   MOV.L       R3,@-R15
    00000808 2F26                   MOV.L       R2,@-R15
    0000080A 6102                   MOV.L       @R0,R1
    0000080C D22D                   MOV.L       L1571+46,R2; _TypeGetMatching
    0000080E 2F16                   MOV.L       R1,@-R15
    00000810 65E2                   MOV.L       @R14,R5
    00000812 420B                   JSR         @R2
    00000814 64D3                   MOV         R13,R4
    00000816 7F08                   ADD         #8,R15
    00000818 D12B                   MOV.L       L1571+50,R1; _VariableAllocValueFromType
    0000081A 6503                   MOV         R0,R5
    0000081C 66F6                   MOV.L       @R15+,R6
    0000081E 64D3                   MOV         R13,R4
    00000820 410B                   JSR         @R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000822 67F6                   MOV.L       @R15+,R7
      expression   452                Result->Val->Pointer = (void *)ValPtr;
    00000824 52F1                   MOV.L       @(4,R15),R2
      expression   453                ExpressionStackPushValueNode(Parser, StackTop, Result);
    00000826 65C3                   MOV         R12,R5
    00000828 6603                   MOV         R0,R6
    0000082A 64D3                   MOV         R13,R4
    0000082C 5361                   MOV.L       @(4,R6),R3
    0000082E 2322                   MOV.L       R2,@R3
    00000830 7F18                   ADD         #24,R15
    00000832 4F26                   LDS.L       @R15+,PR
    00000834 68F6                   MOV.L       @R15+,R8
    00000836 69F6                   MOV.L       @R15+,R9
    00000838 6AF6                   MOV.L       @R15+,R10
    0000083A 6BF6                   MOV.L       @R15+,R11
    0000083C 6CF6                   MOV.L       @R15+,R12
    0000083E 6DF6                   MOV.L       @R15+,R13
    00000840 ACF7                   BRA         _ExpressionStackPushValueNode
    00000842 6EF6                   MOV.L       @R15+,R14
    00000844              L1055:                           ; case label 
      expression   454                break;
      expression   455    
      expression   456            case TokenAsterisk:
      expression   457                ExpressionStackPushDereference(Parser, StackTop, TopValue);
    00000844 66E3                   MOV         R14,R6
    00000846 65C3                   MOV         R12,R5
    00000848 64D3                   MOV         R13,R4
    0000084A 7F14                   ADD         #20,R15
    0000084C 4F26                   LDS.L       @R15+,PR
    0000084E 68F6                   MOV.L       @R15+,R8
    00000850 69F6                   MOV.L       @R15+,R9
    00000852 6AF6                   MOV.L       @R15+,R10
    00000854 6BF6                   MOV.L       @R15+,R11
    00000856 6CF6                   MOV.L       @R15+,R12
    00000858 6DF6                   MOV.L       @R15+,R13
    0000085A AD3A                   BRA         _ExpressionStackPushDereference
    0000085C 6EF6                   MOV.L       @R15+,R14
    0000085E              L1056:                           ; case label 
      expression   458                break;
      expression   459            
      expression   460            case TokenSizeof:
      expression   461                /* return the size of the argument */
      expression   462                if (TopValue->Typ == &TypeType)
    0000085E D31B                   MOV.L       L1571+54,R3; _TypeType
    00000860 62E2                   MOV.L       @R14,R2
    00000862 3230                   CMP/EQ      R3,R2
    00000864 8B04                   BF          L1268
      expression   463                    ExpressionPushInt(Parser, StackTop, TypeSize(TopValue->Val->Typ, TopValue->Val->Typ->Array
                         +Size, TRUE));
    00000866 E601                   MOV         #1,R6
    00000868 55E1                   MOV.L       @(4,R14),R5
    0000086A 1F52                   MOV.L       R5,@(8,R15)
    0000086C A002                   BRA         L1530
    0000086E 6552                   MOV.L       @R5,R5
    00000870              L1268:                            
      expression   464                else
      expression   465                    ExpressionPushInt(Parser, StackTop, TypeSize(TopValue->Typ, TopValue->Typ->ArraySize, TRUE




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +));
    00000870 65E2                   MOV.L       @R14,R5
    00000872 E601                   MOV         #1,R6
    00000874              L1530:                            
    00000874 2F52                   MOV.L       R5,@R15
    00000876 5551                   MOV.L       @(4,R5),R5
    00000878 4A0B                   JSR         @R10
    0000087A 64F2                   MOV.L       @R15,R4
    0000087C 6603                   MOV         R0,R6
    0000087E 65C3                   MOV         R12,R5
    00000880 64D3                   MOV         R13,R4
    00000882 7F14                   ADD         #20,R15
    00000884 4F26                   LDS.L       @R15+,PR
    00000886 68F6                   MOV.L       @R15+,R8
    00000888 69F6                   MOV.L       @R15+,R9
    0000088A 6AF6                   MOV.L       @R15+,R10
    0000088C 6BF6                   MOV.L       @R15+,R11
    0000088E 6CF6                   MOV.L       @R15+,R12
    00000890 6DF6                   MOV.L       @R15+,R13
    00000892 AD4E                   BRA         _ExpressionPushInt
    00000894 6EF6                   MOV.L       @R15+,R14
    00000896              L1571:                            
    00000896 0000                   .DATA.W     0
    00000898 <00000000>             .DATA.L     L628
    0000089C <00000000>             .DATA.L     L639
    000008A0 <00000000>             .DATA.L     _TypeSizeValue
    000008A4 <00000000>             .DATA.L     _memcpy
    000008A8 <00000000>             .DATA.L     L640
    000008AC <00000000>             .DATA.L     L647
    000008B0 <00000000>             .DATA.L     _ProgramFail
    000008B4 <00000000>             .DATA.L     _VoidType
    000008B8 <00000000>             .DATA.L     _TypeSize
    000008BC <00000000>             .DATA.L     L667
    000008C0 <00000000>             .DATA.L     _StrEmpty
    000008C4 <00000000>             .DATA.L     _TypeGetMatching
    000008C8 <00000000>             .DATA.L     _VariableAllocValueFromType
    000008CC <00000000>             .DATA.L     _TypeType
    000008D0              L1057:                           ; default label 
      expression   466                break;
      expression   467            
      expression   468            default:
      expression   469                /* an arithmetic operator */
      expression   470    #ifndef NO_FP
      expression   471                if (TopValue->Typ == &FPType)
    000008D0 D87D                   MOV.L       L1572+2,R8 ; L671
    000008D2 D37E                   MOV.L       L1572+6,R3 ; _FPType
    000008D4 62E2                   MOV.L       @R14,R2
    000008D6 3230                   CMP/EQ      R3,R2
    000008D8 8B2D                   BF          L1270
      expression   472                {
      expression   473                    /* floating point prefix arithmetic */
      expression   474                    double ResultFP = 0.0;
    000008DA 60F3                   MOV         R15,R0
    000008DC 700C                   ADD         #12,R0
    000008DE E100                   MOV         #0,R1
    000008E0 2012                   MOV.L       R1,@R0
    000008E2 1011                   MOV.L       R1,@(4,R0)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   475                    
      expression   476                    switch (Op)
    000008E4 6093                   MOV         R9,R0
    000008E6 881C                   CMP/EQ      #28,R0
    000008E8 8903                   BT          L1058
    000008EA 881D                   CMP/EQ      #29,R0
    000008EC 890A                   BT          L1059
    000008EE A015                   BRA         L1060
    000008F0 0009                   NOP
    000008F2              L1058:                           ; case label 
      expression   477                    {
      expression   478                        case TokenPlus:         ResultFP = TopValue->Val->FP; break;
    000008F2 60F3                   MOV         R15,R0
    000008F4 52E1                   MOV.L       @(4,R14),R2
    000008F6 700C                   ADD         #12,R0
    000008F8 6123                   MOV         R2,R1
    000008FA 6312                   MOV.L       @R1,R3
    000008FC 2032                   MOV.L       R3,@R0
    000008FE 5311                   MOV.L       @(4,R1),R3
    00000900 A010                   BRA         L1271
    00000902 1031                   MOV.L       R3,@(4,R0)
    00000904              L1059:                           ; case label 
      expression   479                        case TokenMinus:        ResultFP = -TopValue->Val->FP; break;
    00000904 50E1                   MOV.L       @(4,R14),R0
    00000906 5201                   MOV.L       @(4,R0),R2
    00000908 D171                   MOV.L       L1572+10,R1; __negd
    0000090A 2F26                   MOV.L       R2,@-R15
    0000090C 6202                   MOV.L       @R0,R2
    0000090E 2F26                   MOV.L       R2,@-R15
    00000910 62F3                   MOV         R15,R2
    00000912 7214                   ADD         #20,R2
    00000914 410B                   JSR         @R1
    00000916 2F26                   MOV.L       R2,@-R15
    00000918 A004                   BRA         L1271
    0000091A 0009                   NOP
    0000091C              L1060:                           ; default label 
      expression   480                        default:                ProgramFail(Parser, "invalid operation"); break;
    0000091C 2F86                   MOV.L       R8,@-R15
    0000091E 4B0B                   JSR         @R11
    00000920 64D3                   MOV         R13,R4
    00000922 7F04                   ADD         #4,R15
    00000924              L1271:                            
      expression   481                    }
      expression   482                    
      expression   483                    ExpressionPushFP(Parser, StackTop, ResultFP);
    00000924 52F4                   MOV.L       @(16,R15),R2
    00000926 65C3                   MOV         R12,R5
    00000928 2F26                   MOV.L       R2,@-R15
    0000092A 52F4                   MOV.L       @(16,R15),R2
    0000092C 2F26                   MOV.L       R2,@-R15
    0000092E BD16                   BSR         _ExpressionPushFP
    00000930 64D3                   MOV         R13,R4
    00000932 A089                   BRA         L1266
    00000934 7F08                   ADD         #8,R15
    00000936              L1270:                            
      expression   484                }
      expression   485                else 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   486    #endif
      expression   487                if (IS_NUMERIC_COERCIBLE(TopValue))
    00000936 E201                   MOV         #1,R2
    00000938 64E2                   MOV.L       @R14,R4
    0000093A 1F41                   MOV.L       R4,@(4,R15)
    0000093C 6442                   MOV.L       @R4,R4
    0000093E 3423                   CMP/GE      R2,R4
    00000940 8B02                   BF          L1275
    00000942 E007                   MOV         #7,R0
    00000944 3407                   CMP/GT      R0,R4
    00000946 8B02                   BF          L1274
    00000948              L1275:                            
    00000948 6043                   MOV         R4,R0
    0000094A 8808                   CMP/EQ      #8,R0
    0000094C 8B3B                   BF          L1273
    0000094E              L1274:                            
      expression   488                {
      expression   489                    /* integer prefix arithmetic */
      expression   490                    long ResultInt = 0;
    0000094E EA00                   MOV         #0,R10
      expression   491                    long TopInt = ExpressionCoerceInteger(TopValue);
    00000950 BB56                   BSR         _ExpressionCoerceInteger
    00000952 64E3                   MOV         R14,R4
    00000954 2F02                   MOV.L       R0,@R15
      expression   492                    switch (Op)
    00000956 6093                   MOV         R9,R0
    00000958 881C                   CMP/EQ      #28,R0
    0000095A 890B                   BT          L1062
    0000095C 881D                   CMP/EQ      #29,R0
    0000095E 890B                   BT          L1063
    00000960 8821                   CMP/EQ      #33,R0
    00000962 890C                   BT          L1064
    00000964 8822                   CMP/EQ      #34,R0
    00000966 890E                   BT          L1065
    00000968 8823                   CMP/EQ      #35,R0
    0000096A 8914                   BT          L1066
    0000096C 8824                   CMP/EQ      #36,R0
    0000096E 8916                   BT          L1067
    00000970 A018                   BRA         L1068
    00000972 0009                   NOP
    00000974              L1062:                           ; case label 
      expression   493                    {
      expression   494                        case TokenPlus:         ResultInt = TopInt; break;
    00000974 A01A                   BRA         L1276
    00000976 6AF2                   MOV.L       @R15,R10
    00000978              L1063:                           ; case label 
      expression   495                        case TokenMinus:        ResultInt = -TopInt; break;
    00000978 6AF2                   MOV.L       @R15,R10
    0000097A A017                   BRA         L1276
    0000097C 6AAB                   NEG         R10,R10
    0000097E              L1064:                           ; case label 
      expression   496                        case TokenIncrement:    ResultInt = ExpressionAssignInt(Parser, TopValue, TopInt+1, FA
                         +LSE); break;
    0000097E E700                   MOV         #0,R7
    00000980 66F2                   MOV.L       @R15,R6
    00000982 A003                   BRA         L1531
    00000984 7601                   ADD         #1,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000986              L1065:                           ; case label 
      expression   497                        case TokenDecrement:    ResultInt = ExpressionAssignInt(Parser, TopValue, TopInt-1, FA
                         +LSE); break;
    00000986 E700                   MOV         #0,R7
    00000988 66F2                   MOV.L       @R15,R6
    0000098A 76FF                   ADD         #-1,R6
    0000098C              L1531:                            
    0000098C 65E3                   MOV         R14,R5
    0000098E BBEE                   BSR         _ExpressionAssignInt
    00000990 64D3                   MOV         R13,R4
    00000992 A00B                   BRA         L1276
    00000994 6A03                   MOV         R0,R10
    00000996              L1066:                           ; case label 
      expression   498                        case TokenUnaryNot:     ResultInt = !TopInt; break;
    00000996 6AF2                   MOV.L       @R15,R10
    00000998 2AA8                   TST         R10,R10
    0000099A A007                   BRA         L1276
    0000099C 0A29                   MOVT        R10
    0000099E              L1067:                           ; case label 
      expression   499                        case TokenUnaryExor:    ResultInt = ~TopInt; break;
    0000099E 6AF2                   MOV.L       @R15,R10
    000009A0 A004                   BRA         L1276
    000009A2 6AA7                   NOT         R10,R10
    000009A4              L1068:                           ; default label 
      expression   500                        default:                ProgramFail(Parser, "invalid operation"); break;
    000009A4 2F86                   MOV.L       R8,@-R15
    000009A6 4B0B                   JSR         @R11
    000009A8 64D3                   MOV         R13,R4
    000009AA 7F04                   ADD         #4,R15
    000009AC              L1276:                            
      expression   501                    }
      expression   502    
      expression   503                    ExpressionPushInt(Parser, StackTop, ResultInt);
    000009AC 66A3                   MOV         R10,R6
    000009AE 65C3                   MOV         R12,R5
    000009B0 64D3                   MOV         R13,R4
    000009B2 7F14                   ADD         #20,R15
    000009B4 4F26                   LDS.L       @R15+,PR
    000009B6 68F6                   MOV.L       @R15+,R8
    000009B8 69F6                   MOV.L       @R15+,R9
    000009BA 6AF6                   MOV.L       @R15+,R10
    000009BC 6BF6                   MOV.L       @R15+,R11
    000009BE 6CF6                   MOV.L       @R15+,R12
    000009C0 6DF6                   MOV.L       @R15+,R13
    000009C2 ACB6                   BRA         _ExpressionPushInt
    000009C4 6EF6                   MOV.L       @R15+,R14
    000009C6              L1273:                            
      expression   504                }
      expression   505                else if (TopValue->Typ->Base == TypePointer)
    000009C6 60E2                   MOV.L       @R14,R0
    000009C8 6002                   MOV.L       @R0,R0
    000009CA 880B                   CMP/EQ      #11,R0
    000009CC 8B38                   BF          L1279
      expression   506                {
      expression   507                    /* pointer prefix arithmetic */
      expression   508                    int Size = TypeSize(TopValue->Typ->FromType, 0, TRUE);
    000009CE E601                   MOV         #1,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009D0 64E2                   MOV.L       @R14,R4
    000009D2 E500                   MOV         #0,R5
    000009D4 4A0B                   JSR         @R10
    000009D6 5445                   MOV.L       @(20,R4),R4
      expression   509                    struct Value *StackValue;
      expression   510                    void *ResultPtr;
      expression   511    
      expression   512                    if (TopValue->Val->Pointer == NULL)
    000009D8 53E1                   MOV.L       @(4,R14),R3
    000009DA 6232                   MOV.L       @R3,R2
    000009DC 2228                   TST         R2,R2
    000009DE 8F05                   BF/S        L1280
    000009E0 6A03                   MOV         R0,R10
      expression   513                        ProgramFail(Parser, "invalid use of a NULL pointer");
    000009E2 D23C                   MOV.L       L1572+14,R2; L680
    000009E4 2F26                   MOV.L       R2,@-R15
    000009E6 4B0B                   JSR         @R11
    000009E8 64D3                   MOV         R13,R4
    000009EA 7F04                   ADD         #4,R15
    000009EC              L1280:                            
      expression   514                    
      expression   515                    if (!TopValue->IsLValue) 
    000009EC 84EE                   MOV.B       @(14,R14),R0
    000009EE 2008                   TST         R0,R0
    000009F0 8B04                   BF          L1281
      expression   516                        ProgramFail(Parser, "can't assign to this"); 
    000009F2 D339                   MOV.L       L1572+18,R3; L558
    000009F4 2F36                   MOV.L       R3,@-R15
    000009F6 4B0B                   JSR         @R11
    000009F8 64D3                   MOV         R13,R4
    000009FA 7F04                   ADD         #4,R15
    000009FC              L1281:                            
      expression   517                        
      expression   518                    switch (Op)
    000009FC 6093                   MOV         R9,R0
    000009FE 8821                   CMP/EQ      #33,R0
    00000A00 8903                   BT          L1070
    00000A02 8822                   CMP/EQ      #34,R0
    00000A04 8906                   BT          L1071
    00000A06 A00A                   BRA         L1072
    00000A08 0009                   NOP
    00000A0A              L1070:                           ; case label 
      expression   519                    {
      expression   520                        case TokenIncrement:    TopValue->Val->Pointer = (void *)((char *)TopValue->Val->Point
                         +er + Size); break;
    00000A0A 54E1                   MOV.L       @(4,R14),R4
    00000A0C 6242                   MOV.L       @R4,R2
    00000A0E 3A2C                   ADD         R2,R10
    00000A10 A009                   BRA         L1282
    00000A12 24A2                   MOV.L       R10,@R4
    00000A14              L1071:                           ; case label 
      expression   521                        case TokenDecrement:    TopValue->Val->Pointer = (void *)((char *)TopValue->Val->Point
                         +er - Size); break;
    00000A14 54E1                   MOV.L       @(4,R14),R4
    00000A16 6242                   MOV.L       @R4,R2
    00000A18 32A8                   SUB         R10,R2
    00000A1A A004                   BRA         L1282




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A1C 2422                   MOV.L       R2,@R4
    00000A1E              L1072:                           ; default label 
      expression   522                        default:                ProgramFail(Parser, "invalid operation"); break;
    00000A1E 2F86                   MOV.L       R8,@-R15
    00000A20 4B0B                   JSR         @R11
    00000A22 64D3                   MOV         R13,R4
    00000A24 7F04                   ADD         #4,R15
    00000A26              L1282:                            
      expression   523                    }
      expression   524    
      expression   525                    ResultPtr = TopValue->Val->Pointer;
      expression   526                    StackValue = ExpressionStackPushValueByType(Parser, StackTop, TopValue->Typ);
    00000A26 65C3                   MOV         R12,R5
    00000A28 53E1                   MOV.L       @(4,R14),R3
    00000A2A 6232                   MOV.L       @R3,R2
    00000A2C 2F22                   MOV.L       R2,@R15
    00000A2E 66E2                   MOV.L       @R14,R6
    00000A30 BC13                   BSR         _ExpressionStackPushValueByType
    00000A32 64D3                   MOV         R13,R4
      expression   527                    StackValue->Val->Pointer = ResultPtr;
    00000A34 63F2                   MOV.L       @R15,R3
    00000A36 6403                   MOV         R0,R4
    00000A38 5241                   MOV.L       @(4,R4),R2
    00000A3A 2232                   MOV.L       R3,@R2
    00000A3C A004                   BRA         L1266
    00000A3E 0009                   NOP
    00000A40              L1279:                            
      expression   528                }
      expression   529                else
      expression   530                    ProgramFail(Parser, "invalid operation");
    00000A40 2F86                   MOV.L       R8,@-R15
    00000A42 4B0B                   JSR         @R11
    00000A44 64D3                   MOV         R13,R4
    00000A46 7F04                   ADD         #4,R15
      expression   531                break;
    00000A48              L1266:                            
      expression   532        }
      expression   533    }
    00000A48 7F14                   ADD         #20,R15
    00000A4A 4F26                   LDS.L       @R15+,PR
    00000A4C 68F6                   MOV.L       @R15+,R8
    00000A4E 69F6                   MOV.L       @R15+,R9
    00000A50 6AF6                   MOV.L       @R15+,R10
    00000A52 6BF6                   MOV.L       @R15+,R11
    00000A54 6CF6                   MOV.L       @R15+,R12
    00000A56 6DF6                   MOV.L       @R15+,R13
    00000A58 000B                   RTS
    00000A5A 6EF6                   MOV.L       @R15+,R14
      expression   534    
      expression   535    /* evaluate a postfix operator */
      expression   536    void ExpressionPostfixOperator(struct ParseState *Parser, struct ExpressionStack **StackTop, enum LexToken
                         + Op, struct Value *TopValue)
    00000A5C              _ExpressionPostfixOperator:      ; function: ExpressionPostfixOperator
                                                           ; frame size=52
    00000A5C 2FE6                   MOV.L       R14,@-R15
      expression   537    {
      expression   538        if (IS_NUMERIC_COERCIBLE(TopValue))




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A5E E301                   MOV         #1,R3
    00000A60 2FD6                   MOV.L       R13,@-R15
    00000A62 6E73                   MOV         R7,R14
    00000A64 2FC6                   MOV.L       R12,@-R15
    00000A66 6D43                   MOV         R4,R13
    00000A68 2FB6                   MOV.L       R11,@-R15
    00000A6A 2FA6                   MOV.L       R10,@-R15
    00000A6C 2F96                   MOV.L       R9,@-R15
    00000A6E 4F22                   STS.L       PR,@-R15
    00000A70 DB15                   MOV.L       L1572+2,R11; L671
    00000A72 7FEC                   ADD         #-20,R15
    00000A74 DC19                   MOV.L       L1572+22,R12; _ProgramFail
    00000A76 2F52                   MOV.L       R5,@R15
    00000A78 1F61                   MOV.L       R6,@(4,R15)
    00000A7A 64E2                   MOV.L       @R14,R4
    00000A7C 1F44                   MOV.L       R4,@(16,R15)
    00000A7E 6442                   MOV.L       @R4,R4
    00000A80 3433                   CMP/GE      R3,R4
    00000A82 8B02                   BF          L1286
    00000A84 E107                   MOV         #7,R1
    00000A86 3417                   CMP/GT      R1,R4
    00000A88 8B02                   BF          L1285
    00000A8A              L1286:                            
    00000A8A 6043                   MOV         R4,R0
    00000A8C 8808                   CMP/EQ      #8,R0
    00000A8E 8B3A                   BF          L1284
    00000A90              L1285:                            
      expression   539        {
      expression   540            long ResultInt = 0;
    00000A90 EA00                   MOV         #0,R10
      expression   541            long TopInt = ExpressionCoerceInteger(TopValue);
    00000A92 BAB5                   BSR         _ExpressionCoerceInteger
    00000A94 64E3                   MOV         R14,R4
    00000A96 6903                   MOV         R0,R9
      expression   542            switch (Op)
    00000A98 50F1                   MOV.L       @(4,R15),R0
    00000A9A 8821                   CMP/EQ      #33,R0
    00000A9C 8907                   BT          L1073
    00000A9E 8822                   CMP/EQ      #34,R0
    00000AA0 8909                   BT          L1074
    00000AA2 8828                   CMP/EQ      #40,R0
    00000AA4 891C                   BT          L1533
    00000AA6 882C                   CMP/EQ      #44,R0
    00000AA8 891A                   BT          L1077
    00000AAA A01C                   BRA         L1078
    00000AAC 0009                   NOP
    00000AAE              L1073:                           ; case label 
      expression   543            {
      expression   544                case TokenIncrement:            ResultInt = ExpressionAssignInt(Parser, TopValue, TopInt+1, TR
                         +UE); break;
    00000AAE E701                   MOV         #1,R7
    00000AB0 6693                   MOV         R9,R6
    00000AB2 A003                   BRA         L1532
    00000AB4 7601                   ADD         #1,R6
    00000AB6              L1074:                           ; case label 
      expression   545                case TokenDecrement:            ResultInt = ExpressionAssignInt(Parser, TopValue, TopInt-1, TR
                         +UE); break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AB6 E701                   MOV         #1,R7
    00000AB8 6693                   MOV         R9,R6
    00000ABA 76FF                   ADD         #-1,R6
    00000ABC              L1532:                            
    00000ABC 65E3                   MOV         R14,R5
    00000ABE BB56                   BSR         _ExpressionAssignInt
    00000AC0 64D3                   MOV         R13,R4
    00000AC2 A014                   BRA         L1287
    00000AC4 6A03                   MOV         R0,R10
    00000AC6              L1572:                            
    00000AC6 0000                   .DATA.W     0
    00000AC8 <00000000>             .DATA.L     L671
    00000ACC <00000000>             .DATA.L     _FPType
    00000AD0 <00000000>             .DATA.L     __negd
    00000AD4 <00000000>             .DATA.L     L680
    00000AD8 <00000000>             .DATA.L     L558
    00000ADC <00000000>             .DATA.L     _ProgramFail
    00000AE0              L1077:                           ; case label 
      expression   546                case TokenRightSquareBracket:   ProgramFail(Parser, "not supported"); break;  /* XXX */
      expression   547                case TokenCloseBracket:         ProgramFail(Parser, "not supported"); break;  /* XXX */
    00000AE0              L1533:                            
    00000AE0 D376                   MOV.L       L1573+2,R3 ; L692
    00000AE2 A001                   BRA         L1534
    00000AE4 2F36                   MOV.L       R3,@-R15
    00000AE6              L1078:                           ; default label 
      expression   548                default:                        ProgramFail(Parser, "invalid operation"); break;
    00000AE6 2FB6                   MOV.L       R11,@-R15
    00000AE8              L1534:                            
    00000AE8 4C0B                   JSR         @R12
    00000AEA 64D3                   MOV         R13,R4
    00000AEC 7F04                   ADD         #4,R15
    00000AEE              L1287:                            
      expression   549            }
      expression   550        
      expression   551            ExpressionPushInt(Parser, StackTop, ResultInt);
    00000AEE 66A3                   MOV         R10,R6
    00000AF0 65F2                   MOV.L       @R15,R5
    00000AF2 64D3                   MOV         R13,R4
    00000AF4 7F14                   ADD         #20,R15
    00000AF6 4F26                   LDS.L       @R15+,PR
    00000AF8 69F6                   MOV.L       @R15+,R9
    00000AFA 6AF6                   MOV.L       @R15+,R10
    00000AFC 6BF6                   MOV.L       @R15+,R11
    00000AFE 6CF6                   MOV.L       @R15+,R12
    00000B00 6DF6                   MOV.L       @R15+,R13
    00000B02 AC16                   BRA         _ExpressionPushInt
    00000B04 6EF6                   MOV.L       @R15+,R14
    00000B06              L1284:                            
      expression   552        }
      expression   553        else if (TopValue->Typ->Base == TypePointer)
    00000B06 60E2                   MOV.L       @R14,R0
    00000B08 6002                   MOV.L       @R0,R0
    00000B0A 880B                   CMP/EQ      #11,R0
    00000B0C 8B39                   BF          L1289
      expression   554        {
      expression   555            /* pointer postfix arithmetic */
      expression   556            int Size = TypeSize(TopValue->Typ->FromType, 0, TRUE);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B0E E601                   MOV         #1,R6
    00000B10 64E2                   MOV.L       @R14,R4
    00000B12 E500                   MOV         #0,R5
    00000B14 D36A                   MOV.L       L1573+6,R3 ; _TypeSize
    00000B16 430B                   JSR         @R3
    00000B18 5445                   MOV.L       @(20,R4),R4
    00000B1A 6A03                   MOV         R0,R10
      expression   557            struct Value *StackValue;
      expression   558            void *OrigPointer = TopValue->Val->Pointer;
    00000B1C 52E1                   MOV.L       @(4,R14),R2
    00000B1E 1F23                   MOV.L       R2,@(12,R15)
    00000B20 6322                   MOV.L       @R2,R3
      expression   559            
      expression   560            if (TopValue->Val->Pointer == NULL)
    00000B22 6233                   MOV         R3,R2
    00000B24 2228                   TST         R2,R2
    00000B26 8F05                   BF/S        L1290
    00000B28 1F32                   MOV.L       R3,@(8,R15)
      expression   561                ProgramFail(Parser, "invalid use of a NULL pointer");
    00000B2A D266                   MOV.L       L1573+10,R2; L680
    00000B2C 2F26                   MOV.L       R2,@-R15
    00000B2E 4C0B                   JSR         @R12
    00000B30 64D3                   MOV         R13,R4
    00000B32 7F04                   ADD         #4,R15
    00000B34              L1290:                            
      expression   562                
      expression   563            if (!TopValue->IsLValue) 
    00000B34 84EE                   MOV.B       @(14,R14),R0
    00000B36 2008                   TST         R0,R0
    00000B38 8B04                   BF          L1291
      expression   564                ProgramFail(Parser, "can't assign to this"); 
    00000B3A D363                   MOV.L       L1573+14,R3; L558
    00000B3C 2F36                   MOV.L       R3,@-R15
    00000B3E 4C0B                   JSR         @R12
    00000B40 64D3                   MOV         R13,R4
    00000B42 7F04                   ADD         #4,R15
    00000B44              L1291:                            
      expression   565            
      expression   566            switch (Op)
    00000B44 50F1                   MOV.L       @(4,R15),R0
    00000B46 8821                   CMP/EQ      #33,R0
    00000B48 8903                   BT          L1079
    00000B4A 8822                   CMP/EQ      #34,R0
    00000B4C 8906                   BT          L1080
    00000B4E A00A                   BRA         L1081
    00000B50 0009                   NOP
    00000B52              L1079:                           ; case label 
      expression   567            {
      expression   568                case TokenIncrement:    TopValue->Val->Pointer = (void *)((char *)TopValue->Val->Pointer + Siz
                         +e); break;
    00000B52 54E1                   MOV.L       @(4,R14),R4
    00000B54 6342                   MOV.L       @R4,R3
    00000B56 3A3C                   ADD         R3,R10
    00000B58 A009                   BRA         L1292
    00000B5A 24A2                   MOV.L       R10,@R4
    00000B5C              L1080:                           ; case label 
      expression   569                case TokenDecrement:    TopValue->Val->Pointer = (void *)((char *)TopValue->Val->Pointer - Siz




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +e); break;
    00000B5C 54E1                   MOV.L       @(4,R14),R4
    00000B5E 6342                   MOV.L       @R4,R3
    00000B60 33A8                   SUB         R10,R3
    00000B62 A004                   BRA         L1292
    00000B64 2432                   MOV.L       R3,@R4
    00000B66              L1081:                           ; default label 
      expression   570                default:                ProgramFail(Parser, "invalid operation"); break;
    00000B66 2FB6                   MOV.L       R11,@-R15
    00000B68 4C0B                   JSR         @R12
    00000B6A 64D3                   MOV         R13,R4
    00000B6C 7F04                   ADD         #4,R15
    00000B6E              L1292:                            
      expression   571            }
      expression   572            
      expression   573            StackValue = ExpressionStackPushValueByType(Parser, StackTop, TopValue->Typ);
    00000B6E 66E2                   MOV.L       @R14,R6
    00000B70 65F2                   MOV.L       @R15,R5
    00000B72 BB72                   BSR         _ExpressionStackPushValueByType
    00000B74 64D3                   MOV         R13,R4
    00000B76 6403                   MOV         R0,R4
      expression   574            StackValue->Val->Pointer = OrigPointer;
    00000B78 53F2                   MOV.L       @(8,R15),R3
    00000B7A 5241                   MOV.L       @(4,R4),R2
    00000B7C 2232                   MOV.L       R3,@R2
    00000B7E A004                   BRA         L1288
    00000B80 0009                   NOP
    00000B82              L1289:                            
      expression   575        }
      expression   576        else
      expression   577            ProgramFail(Parser, "invalid operation");
    00000B82 2FB6                   MOV.L       R11,@-R15
    00000B84 4C0B                   JSR         @R12
    00000B86 64D3                   MOV         R13,R4
    00000B88 7F04                   ADD         #4,R15
    00000B8A              L1288:                            
      expression   578    }
    00000B8A 7F14                   ADD         #20,R15
    00000B8C 4F26                   LDS.L       @R15+,PR
    00000B8E 69F6                   MOV.L       @R15+,R9
    00000B90 6AF6                   MOV.L       @R15+,R10
    00000B92 6BF6                   MOV.L       @R15+,R11
    00000B94 6CF6                   MOV.L       @R15+,R12
    00000B96 6DF6                   MOV.L       @R15+,R13
    00000B98 000B                   RTS
    00000B9A 6EF6                   MOV.L       @R15+,R14
      expression   579    
      expression   580    /* evaluate an infix operator */
      expression   581    void ExpressionInfixOperator(struct ParseState *Parser, struct ExpressionStack **StackTop, enum LexToken O
                         +p, struct Value *BottomValue, struct Value *TopValue)
    00000B9C              _ExpressionInfixOperator:        ; function: ExpressionInfixOperator
                                                           ; frame size=132
                                                           ; used runtime library name:
                                                           ; __divls, __modls, __addd, __subdr, __muld, __divdr, __itod, __eqd, __ne
                        +                                  d, __gtd, __ltd, __ged, __led
    00000B9C 2FE6                   MOV.L       R14,@-R15
    00000B9E E068                   MOV         #104,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BA0 2FD6                   MOV.L       R13,@-R15
    00000BA2 6E73                   MOV         R7,R14
    00000BA4 2FC6                   MOV.L       R12,@-R15
    00000BA6 6D43                   MOV         R4,R13
    00000BA8 2FB6                   MOV.L       R11,@-R15
      expression   582    {
      expression   583        long ResultInt = 0;
      expression   584        struct Value *StackValue;
      expression   585        void *Pointer;
      expression   586        
      expression   587        if (BottomValue == NULL || TopValue == NULL)
    00000BAA 2EE8                   TST         R14,R14
    00000BAC 2FA6                   MOV.L       R10,@-R15
    00000BAE 6B63                   MOV         R6,R11
    00000BB0 2F96                   MOV.L       R9,@-R15
    00000BB2 6953                   MOV         R5,R9
    00000BB4 2F86                   MOV.L       R8,@-R15
    00000BB6 4F22                   STS.L       PR,@-R15
    00000BB8 4F12                   STS.L       MACL,@-R15
    00000BBA 7FBC                   ADD         #-68,R15
    00000BBC D843                   MOV.L       L1573+18,R8; _ProgramFail
    00000BBE 0AFE                   MOV.L       @(R0,R15),R10
    00000BC0 8D02                   BT/S        L1295
    00000BC2 EC00                   MOV         #0,R12
    00000BC4 2AA8                   TST         R10,R10
    00000BC6 8B04                   BF          L1294
    00000BC8              L1295:                            
      expression   588            ProgramFail(Parser, "invalid expression");
    00000BC8 D341                   MOV.L       L1573+22,R3; L708
    00000BCA 2F36                   MOV.L       R3,@-R15
    00000BCC 480B                   JSR         @R8
    00000BCE 64D3                   MOV         R13,R4
    00000BD0 7F04                   ADD         #4,R15
    00000BD2              L1294:                            
      expression   589            
      expression   590        if (Op == TokenLeftSquareBracket)
    00000BD2 60B3                   MOV         R11,R0
    00000BD4 8827                   CMP/EQ      #39,R0
    00000BD6 8B4D                   BF          L1296
      expression   591        { 
      expression   592            /* array index */
      expression   593            int ArrayIndex;
      expression   594            struct Value *Result = NULL;
      expression   595            
      expression   596            if (!IS_NUMERIC_COERCIBLE(TopValue))
    00000BD8 64A2                   MOV.L       @R10,R4
    00000BDA E301                   MOV         #1,R3
    00000BDC 1F4A                   MOV.L       R4,@(40,R15)
    00000BDE 6442                   MOV.L       @R4,R4
    00000BE0 3433                   CMP/GE      R3,R4
    00000BE2 8F03                   BF/S        L1298
    00000BE4 EC00                   MOV         #0,R12
    00000BE6 E107                   MOV         #7,R1
    00000BE8 3417                   CMP/GT      R1,R4
    00000BEA 8B07                   BF          L1297
    00000BEC              L1298:                            
    00000BEC 6043                   MOV         R4,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BEE 8808                   CMP/EQ      #8,R0
    00000BF0 8904                   BT          L1297
      expression   597                ProgramFail(Parser, "array index must be an integer");
    00000BF2 D238                   MOV.L       L1573+26,R2; L712
    00000BF4 2F26                   MOV.L       R2,@-R15
    00000BF6 480B                   JSR         @R8
    00000BF8 64D3                   MOV         R13,R4
    00000BFA 7F04                   ADD         #4,R15
    00000BFC              L1297:                            
      expression   598            
      expression   599            ArrayIndex = ExpressionCoerceInteger(TopValue);
    00000BFC BA00                   BSR         _ExpressionCoerceInteger
    00000BFE 64A3                   MOV         R10,R4
    00000C00 6B03                   MOV         R0,R11
      expression   600    
      expression   601            /* make the array element result */
      expression   602            switch (BottomValue->Typ->Base)
    00000C02 60E2                   MOV.L       @R14,R0
    00000C04 6002                   MOV.L       @R0,R0
    00000C06 880C                   CMP/EQ      #12,R0
    00000C08 8903                   BT          L1084
    00000C0A 880B                   CMP/EQ      #11,R0
    00000C0C 890F                   BT          L1085
    00000C0E A028                   BRA         L1086
    00000C10 0009                   NOP
    00000C12              L1084:                           ; case label 
      expression   603            {
      expression   604                case TypeArray:   Result = VariableAllocValueFromExistingData(Parser, BottomValue->Typ->FromTy
                         +pe, (union AnyValue *)(&BottomValue->Val->ArrayMem[0] + TypeSize(BottomValue->Typ, ArrayIndex, TRUE)), Bot
                         +tomValue->IsLValue, BottomValue->LValueFrom); break;
    00000C12 E601                   MOV         #1,R6
    00000C14 D22A                   MOV.L       L1573+6,R2 ; _TypeSize
    00000C16 65B3                   MOV         R11,R5
    00000C18 53E2                   MOV.L       @(8,R14),R3
    00000C1A 2F36                   MOV.L       R3,@-R15
    00000C1C 84EE                   MOV.B       @(14,R14),R0
    00000C1E 6703                   MOV         R0,R7
    00000C20 2F06                   MOV.L       R0,@-R15
    00000C22 5CE1                   MOV.L       @(4,R14),R12
    00000C24 420B                   JSR         @R2
    00000C26 64E2                   MOV.L       @R14,R4
    00000C28 3C0C                   ADD         R0,R12
    00000C2A A011                   BRA         L1535
    00000C2C 66C3                   MOV         R12,R6
    00000C2E              L1085:                           ; case label 
      expression   605                case TypePointer: Result = VariableAllocValueFromExistingData(Parser, BottomValue->Typ->FromTy
                         +pe, (union AnyValue *)((char *)BottomValue->Val->Pointer + TypeSize(BottomValue->Typ->FromType, 0, TRUE) *
                         + ArrayIndex), BottomValue->IsLValue, BottomValue->LValueFrom); break;
    00000C2E E601                   MOV         #1,R6
    00000C30 53E2                   MOV.L       @(8,R14),R3
    00000C32 E500                   MOV         #0,R5
    00000C34 2F36                   MOV.L       R3,@-R15
    00000C36 84EE                   MOV.B       @(14,R14),R0
    00000C38 6703                   MOV         R0,R7
    00000C3A 2F06                   MOV.L       R0,@-R15
    00000C3C 53E1                   MOV.L       @(4,R14),R3
    00000C3E 6C32                   MOV.L       @R3,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C40 64E2                   MOV.L       @R14,R4
    00000C42 D31F                   MOV.L       L1573+6,R3 ; _TypeSize
    00000C44 430B                   JSR         @R3
    00000C46 5445                   MOV.L       @(20,R4),R4
    00000C48 00B7                   MUL.L       R11,R0
    00000C4A 66C3                   MOV         R12,R6
    00000C4C 001A                   STS         MACL,R0
    00000C4E 360C                   ADD         R0,R6
    00000C50              L1535:                            
    00000C50 65E2                   MOV.L       @R14,R5
    00000C52 64D3                   MOV         R13,R4
    00000C54 D320                   MOV.L       L1573+30,R3; _VariableAllocValueFromExistingData
    00000C56 5555                   MOV.L       @(20,R5),R5
    00000C58 430B                   JSR         @R3
    00000C5A 67F6                   MOV.L       @R15+,R7
    00000C5C 7F04                   ADD         #4,R15
    00000C5E A007                   BRA         L1299
    00000C60 6C03                   MOV         R0,R12
    00000C62              L1086:                           ; default label 
      expression   606                default:          ProgramFail(Parser, "this %t is not an array", BottomValue->Typ);
    00000C62 63E2                   MOV.L       @R14,R3
    00000C64 D21D                   MOV.L       L1573+34,R2; L714
    00000C66 2F36                   MOV.L       R3,@-R15
    00000C68 2F26                   MOV.L       R2,@-R15
    00000C6A 480B                   JSR         @R8
    00000C6C 64D3                   MOV         R13,R4
    00000C6E 7F08                   ADD         #8,R15
    00000C70              L1299:                            
      expression   607            }
      expression   608            
      expression   609            ExpressionStackPushValueNode(Parser, StackTop, Result);
    00000C70 A3CA                   BRA         L1559
    00000C72 66C3                   MOV         R12,R6
    00000C74              L1296:                            
      expression   610        }
      expression   611        else if (Op == TokenQuestionMark)
    00000C74 880D                   CMP/EQ      #13,R0
    00000C76 8B0E                   BF          L1301
      expression   612            ExpressionQuestionMarkOperator(Parser, StackTop, TopValue, BottomValue);
    00000C78 67E3                   MOV         R14,R7
    00000C7A 66A3                   MOV         R10,R6
    00000C7C 6593                   MOV         R9,R5
    00000C7E 64D3                   MOV         R13,R4
    00000C80 7F44                   ADD         #68,R15
    00000C82 4F16                   LDS.L       @R15+,MACL
    00000C84 4F26                   LDS.L       @R15+,PR
    00000C86 68F6                   MOV.L       @R15+,R8
    00000C88 69F6                   MOV.L       @R15+,R9
    00000C8A 6AF6                   MOV.L       @R15+,R10
    00000C8C 6BF6                   MOV.L       @R15+,R11
    00000C8E 6CF6                   MOV.L       @R15+,R12
    00000C90 6DF6                   MOV.L       @R15+,R13
    00000C92 AD59                   BRA         _ExpressionQuestionMarkOperator
    00000C94 6EF6                   MOV.L       @R15+,R14
    00000C96              L1301:                            
      expression   613        
      expression   614        else if (Op == TokenColon)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C96 60B3                   MOV         R11,R0
    00000C98 880E                   CMP/EQ      #14,R0
    00000C9A 8B21                   BF          L1303
      expression   615            ExpressionColonOperator(Parser, StackTop, TopValue, BottomValue);
    00000C9C 67E3                   MOV         R14,R7
    00000C9E 66A3                   MOV         R10,R6
    00000CA0 6593                   MOV         R9,R5
    00000CA2 64D3                   MOV         R13,R4
    00000CA4 7F44                   ADD         #68,R15
    00000CA6 4F16                   LDS.L       @R15+,MACL
    00000CA8 4F26                   LDS.L       @R15+,PR
    00000CAA 68F6                   MOV.L       @R15+,R8
    00000CAC 69F6                   MOV.L       @R15+,R9
    00000CAE 6AF6                   MOV.L       @R15+,R10
    00000CB0 6BF6                   MOV.L       @R15+,R11
    00000CB2 6CF6                   MOV.L       @R15+,R12
    00000CB4 6DF6                   MOV.L       @R15+,R13
    00000CB6 AD73                   BRA         _ExpressionColonOperator
    00000CB8 6EF6                   MOV.L       @R15+,R14
    00000CBA              L1573:                            
    00000CBA 0000                   .DATA.W     0
    00000CBC <00000000>             .DATA.L     L692
    00000CC0 <00000000>             .DATA.L     _TypeSize
    00000CC4 <00000000>             .DATA.L     L680
    00000CC8 <00000000>             .DATA.L     L558
    00000CCC <00000000>             .DATA.L     _ProgramFail
    00000CD0 <00000000>             .DATA.L     L708
    00000CD4 <00000000>             .DATA.L     L712
    00000CD8 <00000000>             .DATA.L     _VariableAllocValueFromExistingData
    00000CDC <00000000>             .DATA.L     L714
    00000CE0              L1303:                            
      expression   616            
      expression   617    #ifndef NO_FP
      expression   618        else if ( (TopValue->Typ == &FPType && BottomValue->Typ == &FPType) ||
      expression   619                  (TopValue->Typ == &FPType && IS_NUMERIC_COERCIBLE(BottomValue)) ||
      expression   620                  (IS_NUMERIC_COERCIBLE(TopValue) && BottomValue->Typ == &FPType) )
    00000CE0 64A2                   MOV.L       @R10,R4
    00000CE2 D38B                   MOV.L       L1574+2,R3 ; _FPType
    00000CE4 3430                   CMP/EQ      R3,R4
    00000CE6 8B14                   BF          L1308
    00000CE8 D189                   MOV.L       L1574+2,R1 ; _FPType
    00000CEA 62E2                   MOV.L       @R14,R2
    00000CEC 3210                   CMP/EQ      R1,R2
    00000CEE 8923                   BT          L1306
    00000CF0 D387                   MOV.L       L1574+2,R3 ; _FPType
    00000CF2 3430                   CMP/EQ      R3,R4
    00000CF4 8B0D                   BF          L1308
    00000CF6 E201                   MOV         #1,R2
    00000CF8 61E2                   MOV.L       @R14,R1
    00000CFA 6012                   MOV.L       @R1,R0
    00000CFC 3023                   CMP/GE      R2,R0
    00000CFE 8B04                   BF          L1309
    00000D00 61E2                   MOV.L       @R14,R1
    00000D02 E007                   MOV         #7,R0
    00000D04 6112                   MOV.L       @R1,R1
    00000D06 3107                   CMP/GT      R0,R1
    00000D08 8B16                   BF          L1306




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D0A              L1309:                            
    00000D0A 60E2                   MOV.L       @R14,R0
    00000D0C 6002                   MOV.L       @R0,R0
    00000D0E 8808                   CMP/EQ      #8,R0
    00000D10 8912                   BT          L1306
    00000D12              L1308:                            
    00000D12 E201                   MOV         #1,R2
    00000D14 6342                   MOV.L       @R4,R3
    00000D16 3323                   CMP/GE      R2,R3
    00000D18 8B03                   BF          L1311
    00000D1A E007                   MOV         #7,R0
    00000D1C 6142                   MOV.L       @R4,R1
    00000D1E 3107                   CMP/GT      R0,R1
    00000D20 8B04                   BF          L1310
    00000D22              L1311:                            
    00000D22 6042                   MOV.L       @R4,R0
    00000D24 8808                   CMP/EQ      #8,R0
    00000D26 8901                   BT          L1575
    00000D28 A1A4                   BRA         L1305
    00000D2A 0009                   NOP
    00000D2C              L1575:                            
    00000D2C              L1310:                            
    00000D2C D378                   MOV.L       L1574+2,R3 ; _FPType
    00000D2E 62E2                   MOV.L       @R14,R2
    00000D30 3230                   CMP/EQ      R3,R2
    00000D32 8901                   BT          L1576
    00000D34 A19E                   BRA         L1305
    00000D36 0009                   NOP
    00000D38              L1576:                            
    00000D38              L1306:                            
      expression   621        {
      expression   622            /* floating point infix arithmetic */
      expression   623            int ResultIsInt = FALSE;
      expression   624            double ResultFP = 0.0;
      expression   625            double TopFP = (TopValue->Typ == &FPType) ? TopValue->Val->FP : (double)ExpressionCoerceInteger(To
                         +pValue);
    00000D38 D175                   MOV.L       L1574+2,R1 ; _FPType
    00000D3A E000                   MOV         #0,R0
    00000D3C 2F02                   MOV.L       R0,@R15
    00000D3E 63F3                   MOV         R15,R3
    00000D40 733C                   ADD         #60,R3
    00000D42 6203                   MOV         R0,R2
    00000D44 2302                   MOV.L       R0,@R3
    00000D46 1321                   MOV.L       R2,@(4,R3)
    00000D48 60A2                   MOV.L       @R10,R0
    00000D4A 3010                   CMP/EQ      R1,R0
    00000D4C 8B09                   BF          L1312
    00000D4E 60F3                   MOV         R15,R0
    00000D50 52A1                   MOV.L       @(4,R10),R2
    00000D52 7034                   ADD         #52,R0
    00000D54 6323                   MOV         R2,R3
    00000D56 6132                   MOV.L       @R3,R1
    00000D58 2012                   MOV.L       R1,@R0
    00000D5A 5131                   MOV.L       @(4,R3),R1
    00000D5C 1011                   MOV.L       R1,@(4,R0)
    00000D5E A007                   BRA         L1313
    00000D60 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D62              L1312:                            
    00000D62 B94D                   BSR         _ExpressionCoerceInteger
    00000D64 64A3                   MOV         R10,R4
    00000D66 63F3                   MOV         R15,R3
    00000D68 D26A                   MOV.L       L1574+6,R2 ; __itod
    00000D6A 7334                   ADD         #52,R3
    00000D6C 420B                   JSR         @R2
    00000D6E 2F36                   MOV.L       R3,@-R15
    00000D70              L1313:                            
      expression   626            double BottomFP = (BottomValue->Typ == &FPType) ? BottomValue->Val->FP : (double)ExpressionCoerceI
                         +nteger(BottomValue);
    00000D70 D067                   MOV.L       L1574+2,R0 ; _FPType
    00000D72 61E2                   MOV.L       @R14,R1
    00000D74 3100                   CMP/EQ      R0,R1
    00000D76 8B09                   BF          L1314
    00000D78 52E1                   MOV.L       @(4,R14),R2
    00000D7A 61F3                   MOV         R15,R1
    00000D7C 6323                   MOV         R2,R3
    00000D7E 712C                   ADD         #44,R1
    00000D80 6032                   MOV.L       @R3,R0
    00000D82 2102                   MOV.L       R0,@R1
    00000D84 5031                   MOV.L       @(4,R3),R0
    00000D86 1101                   MOV.L       R0,@(4,R1)
    00000D88 A007                   BRA         L1315
    00000D8A 0009                   NOP
    00000D8C              L1314:                            
    00000D8C B938                   BSR         _ExpressionCoerceInteger
    00000D8E 64E3                   MOV         R14,R4
    00000D90 D260                   MOV.L       L1574+6,R2 ; __itod
    00000D92 63F3                   MOV         R15,R3
    00000D94 732C                   ADD         #44,R3
    00000D96 420B                   JSR         @R2
    00000D98 2F36                   MOV.L       R3,@-R15
    00000D9A              L1315:                            
      expression   627    
      expression   628            switch (Op)
    00000D9A 60B3                   MOV         R11,R0
    00000D9C 8802                   CMP/EQ      #2,R0
    00000D9E 8931                   BT          L1088
    00000DA0 8803                   CMP/EQ      #3,R0
    00000DA2 8939                   BT          L1089
    00000DA4 8804                   CMP/EQ      #4,R0
    00000DA6 894F                   BT          L1090
    00000DA8 8805                   CMP/EQ      #5,R0
    00000DAA 8963                   BT          L1091
    00000DAC 8806                   CMP/EQ      #6,R0
    00000DAE 8979                   BT          L1092
    00000DB0 8814                   CMP/EQ      #20,R0
    00000DB2 8B01                   BF          L1577
    00000DB4 A08F                   BRA         L1093
    00000DB6 0009                   NOP
    00000DB8              L1577:                            
    00000DB8 8815                   CMP/EQ      #21,R0
    00000DBA 8B01                   BF          L1578
    00000DBC A099                   BRA         L1094
    00000DBE 0009                   NOP
    00000DC0              L1578:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DC0 8816                   CMP/EQ      #22,R0
    00000DC2 8B01                   BF          L1579
    00000DC4 A0B4                   BRA         L1095
    00000DC6 0009                   NOP
    00000DC8              L1579:                            
    00000DC8 8817                   CMP/EQ      #23,R0
    00000DCA 8B01                   BF          L1580
    00000DCC A0BE                   BRA         L1096
    00000DCE 0009                   NOP
    00000DD0              L1580:                            
    00000DD0 8818                   CMP/EQ      #24,R0
    00000DD2 8B01                   BF          L1581
    00000DD4 A0C8                   BRA         L1097
    00000DD6 0009                   NOP
    00000DD8              L1581:                            
    00000DD8 8819                   CMP/EQ      #25,R0
    00000DDA 8B01                   BF          L1582
    00000DDC A0D2                   BRA         L1098
    00000DDE 0009                   NOP
    00000DE0              L1582:                            
    00000DE0 881C                   CMP/EQ      #28,R0
    00000DE2 8B01                   BF          L1583
    00000DE4 A0DE                   BRA         L1099
    00000DE6 0009                   NOP
    00000DE8              L1583:                            
    00000DE8 881D                   CMP/EQ      #29,R0
    00000DEA 8B01                   BF          L1584
    00000DEC A0E9                   BRA         L1100
    00000DEE 0009                   NOP
    00000DF0              L1584:                            
    00000DF0 881E                   CMP/EQ      #30,R0
    00000DF2 8B01                   BF          L1585
    00000DF4 A0F6                   BRA         L1101
    00000DF6 0009                   NOP
    00000DF8              L1585:                            
    00000DF8 881F                   CMP/EQ      #31,R0
    00000DFA 8B01                   BF          L1586
    00000DFC A101                   BRA         L1102
    00000DFE 0009                   NOP
    00000E00              L1586:                            
    00000E00 A110                   BRA         L1103
    00000E02 0009                   NOP
    00000E04              L1088:                           ; case label 
      expression   629            {
      expression   630                case TokenAssign:               ResultFP = ExpressionAssignFP(Parser, BottomValue, TopFP); bre
                         +ak;
    00000E04 53FE                   MOV.L       @(56,R15),R3
    00000E06 65E3                   MOV         R14,R5
    00000E08 2F36                   MOV.L       R3,@-R15
    00000E0A 53FE                   MOV.L       @(56,R15),R3
    00000E0C 2F36                   MOV.L       R3,@-R15
    00000E0E 63F3                   MOV         R15,R3
    00000E10 7344                   ADD         #68,R3
    00000E12 2F36                   MOV.L       R3,@-R15
    00000E14 A05B                   BRA         L1539
    00000E16 64D3                   MOV         R13,R4
    00000E18              L1089:                           ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   631                case TokenAddAssign:            ResultFP = ExpressionAssignFP(Parser, BottomValue, BottomFP + 
                         +TopFP); break;
    00000E18 D13F                   MOV.L       L1574+10,R1; __addd
    00000E1A 7FF8                   ADD         #-8,R15
    00000E1C E040                   MOV         #64,R0
    00000E1E 02FE                   MOV.L       @(R0,R15),R2
    00000E20 2F26                   MOV.L       R2,@-R15
    00000E22 E040                   MOV         #64,R0
    00000E24 02FE                   MOV.L       @(R0,R15),R2
    00000E26 E040                   MOV         #64,R0
    00000E28 2F26                   MOV.L       R2,@-R15
    00000E2A 03FE                   MOV.L       @(R0,R15),R3
    00000E2C 2F36                   MOV.L       R3,@-R15
    00000E2E E040                   MOV         #64,R0
    00000E30 03FE                   MOV.L       @(R0,R15),R3
    00000E32 2F36                   MOV.L       R3,@-R15
    00000E34 62F3                   MOV         R15,R2
    00000E36 7210                   ADD         #16,R2
    00000E38 410B                   JSR         @R1
    00000E3A 2F26                   MOV.L       R2,@-R15
    00000E3C 65E3                   MOV         R14,R5
    00000E3E 63F3                   MOV         R15,R3
    00000E40 7344                   ADD         #68,R3
    00000E42 2F36                   MOV.L       R3,@-R15
    00000E44 A043                   BRA         L1539
    00000E46 64D3                   MOV         R13,R4
    00000E48              L1090:                           ; case label 
      expression   632                case TokenSubtractAssign:       ResultFP = ExpressionAssignFP(Parser, BottomValue, BottomFP - 
                         +TopFP); break;
    00000E48 D134                   MOV.L       L1574+14,R1; __subdr
    00000E4A 7FF8                   ADD         #-8,R15
    00000E4C 52FE                   MOV.L       @(56,R15),R2
    00000E4E E048                   MOV         #72,R0
    00000E50 2F26                   MOV.L       R2,@-R15
    00000E52 52FE                   MOV.L       @(56,R15),R2
    00000E54 2F26                   MOV.L       R2,@-R15
    00000E56 03FE                   MOV.L       @(R0,R15),R3
    00000E58 2F36                   MOV.L       R3,@-R15
    00000E5A E048                   MOV         #72,R0
    00000E5C 03FE                   MOV.L       @(R0,R15),R3
    00000E5E 2F36                   MOV.L       R3,@-R15
    00000E60 62F3                   MOV         R15,R2
    00000E62 7210                   ADD         #16,R2
    00000E64 410B                   JSR         @R1
    00000E66 2F26                   MOV.L       R2,@-R15
    00000E68 65E3                   MOV         R14,R5
    00000E6A 63F3                   MOV         R15,R3
    00000E6C 7344                   ADD         #68,R3
    00000E6E 2F36                   MOV.L       R3,@-R15
    00000E70 A02D                   BRA         L1539
    00000E72 64D3                   MOV         R13,R4
    00000E74              L1091:                           ; case label 
      expression   633                case TokenMultiplyAssign:       ResultFP = ExpressionAssignFP(Parser, BottomValue, BottomFP * 
                         +TopFP); break;
    00000E74 D12A                   MOV.L       L1574+18,R1; __muld
    00000E76 7FF8                   ADD         #-8,R15
    00000E78 E040                   MOV         #64,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E7A 02FE                   MOV.L       @(R0,R15),R2
    00000E7C 2F26                   MOV.L       R2,@-R15
    00000E7E E040                   MOV         #64,R0
    00000E80 02FE                   MOV.L       @(R0,R15),R2
    00000E82 E040                   MOV         #64,R0
    00000E84 2F26                   MOV.L       R2,@-R15
    00000E86 03FE                   MOV.L       @(R0,R15),R3
    00000E88 2F36                   MOV.L       R3,@-R15
    00000E8A E040                   MOV         #64,R0
    00000E8C 03FE                   MOV.L       @(R0,R15),R3
    00000E8E 2F36                   MOV.L       R3,@-R15
    00000E90 62F3                   MOV         R15,R2
    00000E92 7210                   ADD         #16,R2
    00000E94 410B                   JSR         @R1
    00000E96 2F26                   MOV.L       R2,@-R15
    00000E98 65E3                   MOV         R14,R5
    00000E9A 63F3                   MOV         R15,R3
    00000E9C 7344                   ADD         #68,R3
    00000E9E 2F36                   MOV.L       R3,@-R15
    00000EA0 A015                   BRA         L1539
    00000EA2 64D3                   MOV         R13,R4
    00000EA4              L1092:                           ; case label 
      expression   634                case TokenDivideAssign:         ResultFP = ExpressionAssignFP(Parser, BottomValue, BottomFP / 
                         +TopFP); break;
    00000EA4 D11F                   MOV.L       L1574+22,R1; __divdr
    00000EA6 7FF8                   ADD         #-8,R15
    00000EA8 52FE                   MOV.L       @(56,R15),R2
    00000EAA E048                   MOV         #72,R0
    00000EAC 2F26                   MOV.L       R2,@-R15
    00000EAE 52FE                   MOV.L       @(56,R15),R2
    00000EB0 2F26                   MOV.L       R2,@-R15
    00000EB2 03FE                   MOV.L       @(R0,R15),R3
    00000EB4 2F36                   MOV.L       R3,@-R15
    00000EB6 E048                   MOV         #72,R0
    00000EB8 03FE                   MOV.L       @(R0,R15),R3
    00000EBA 2F36                   MOV.L       R3,@-R15
    00000EBC 62F3                   MOV         R15,R2
    00000EBE 7210                   ADD         #16,R2
    00000EC0 410B                   JSR         @R1
    00000EC2 2F26                   MOV.L       R2,@-R15
    00000EC4 65E3                   MOV         R14,R5
    00000EC6 64D3                   MOV         R13,R4
    00000EC8 63F3                   MOV         R15,R3
    00000ECA 7344                   ADD         #68,R3
    00000ECC 2F36                   MOV.L       R3,@-R15
    00000ECE              L1539:                            
    00000ECE B991                   BSR         _ExpressionAssignFP
    00000ED0 0009                   NOP
    00000ED2 A0AC                   BRA         L1316
    00000ED4 7F0C                   ADD         #12,R15
    00000ED6              L1093:                           ; case label 
      expression   635                case TokenEqual:                ResultInt = BottomFP == TopFP; ResultIsInt = TRUE; break;
    00000ED6 E040                   MOV         #64,R0
    00000ED8 52FC                   MOV.L       @(48,R15),R2
    00000EDA 2F26                   MOV.L       R2,@-R15
    00000EDC 52FC                   MOV.L       @(48,R15),R2
    00000EDE 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EE0 03FE                   MOV.L       @(R0,R15),R3
    00000EE2 E040                   MOV         #64,R0
    00000EE4 D210                   MOV.L       L1574+26,R2; __eqd
    00000EE6 2F36                   MOV.L       R3,@-R15
    00000EE8 03FE                   MOV.L       @(R0,R15),R3
    00000EEA 420B                   JSR         @R2
    00000EEC 2F36                   MOV.L       R3,@-R15
    00000EEE A00C                   BRA         L1540
    00000EF0 0009                   NOP
    00000EF2              L1094:                           ; case label 
      expression   636                case TokenNotEqual:             ResultInt = BottomFP != TopFP; ResultIsInt = TRUE; break;
    00000EF2 E040                   MOV         #64,R0
    00000EF4 53FC                   MOV.L       @(48,R15),R3
    00000EF6 2F36                   MOV.L       R3,@-R15
    00000EF8 53FC                   MOV.L       @(48,R15),R3
    00000EFA 2F36                   MOV.L       R3,@-R15
    00000EFC 02FE                   MOV.L       @(R0,R15),R2
    00000EFE E040                   MOV         #64,R0
    00000F00 D30A                   MOV.L       L1574+30,R3; __ned
    00000F02 2F26                   MOV.L       R2,@-R15
    00000F04 02FE                   MOV.L       @(R0,R15),R2
    00000F06 430B                   JSR         @R3
    00000F08 2F26                   MOV.L       R2,@-R15
    00000F0A              L1540:                            
    00000F0A A048                   BRA         L944
    00000F0C 6C03                   MOV         R0,R12
    00000F0E              L1574:                            
    00000F0E 0000                   .DATA.W     0
    00000F10 <00000000>             .DATA.L     _FPType
    00000F14 <00000000>             .DATA.L     __itod
    00000F18 <00000000>             .DATA.L     __addd
    00000F1C <00000000>             .DATA.L     __subdr
    00000F20 <00000000>             .DATA.L     __muld
    00000F24 <00000000>             .DATA.L     __divdr
    00000F28 <00000000>             .DATA.L     __eqd
    00000F2C <00000000>             .DATA.L     __ned
    00000F30              L1095:                           ; case label 
      expression   637                case TokenLessThan:             ResultInt = BottomFP < TopFP; ResultIsInt = TRUE; break;
    00000F30 53FC                   MOV.L       @(48,R15),R3
    00000F32 E040                   MOV         #64,R0
    00000F34 2F36                   MOV.L       R3,@-R15
    00000F36 53FC                   MOV.L       @(48,R15),R3
    00000F38 2F36                   MOV.L       R3,@-R15
    00000F3A 02FE                   MOV.L       @(R0,R15),R2
    00000F3C D344                   MOV.L       L1587+2,R3 ; __ltd
    00000F3E E040                   MOV         #64,R0
    00000F40 2F26                   MOV.L       R2,@-R15
    00000F42 02FE                   MOV.L       @(R0,R15),R2
    00000F44 430B                   JSR         @R3
    00000F46 2F26                   MOV.L       R2,@-R15
    00000F48 A029                   BRA         L944
    00000F4A 6C03                   MOV         R0,R12
    00000F4C              L1096:                           ; case label 
      expression   638                case TokenGreaterThan:          ResultInt = BottomFP > TopFP; ResultIsInt = TRUE; break;
    00000F4C 52FC                   MOV.L       @(48,R15),R2
    00000F4E E040                   MOV         #64,R0
    00000F50 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F52 52FC                   MOV.L       @(48,R15),R2
    00000F54 2F26                   MOV.L       R2,@-R15
    00000F56 03FE                   MOV.L       @(R0,R15),R3
    00000F58 D23E                   MOV.L       L1587+6,R2 ; __gtd
    00000F5A E040                   MOV         #64,R0
    00000F5C 2F36                   MOV.L       R3,@-R15
    00000F5E 03FE                   MOV.L       @(R0,R15),R3
    00000F60 420B                   JSR         @R2
    00000F62 2F36                   MOV.L       R3,@-R15
    00000F64 A01B                   BRA         L944
    00000F66 6C03                   MOV         R0,R12
    00000F68              L1097:                           ; case label 
      expression   639                case TokenLessEqual:            ResultInt = BottomFP <= TopFP; ResultIsInt = TRUE; break;
    00000F68 52FC                   MOV.L       @(48,R15),R2
    00000F6A E040                   MOV         #64,R0
    00000F6C 2F26                   MOV.L       R2,@-R15
    00000F6E 52FC                   MOV.L       @(48,R15),R2
    00000F70 2F26                   MOV.L       R2,@-R15
    00000F72 03FE                   MOV.L       @(R0,R15),R3
    00000F74 D238                   MOV.L       L1587+10,R2; __led
    00000F76 E040                   MOV         #64,R0
    00000F78 2F36                   MOV.L       R3,@-R15
    00000F7A 03FE                   MOV.L       @(R0,R15),R3
    00000F7C 420B                   JSR         @R2
    00000F7E 2F36                   MOV.L       R3,@-R15
    00000F80 A00D                   BRA         L944
    00000F82 6C03                   MOV         R0,R12
    00000F84              L1098:                           ; case label 
      expression   640                case TokenGreaterEqual:         ResultInt = BottomFP >= TopFP; ResultIsInt = TRUE; break;
    00000F84 53FC                   MOV.L       @(48,R15),R3
    00000F86 E040                   MOV         #64,R0
    00000F88 2F36                   MOV.L       R3,@-R15
    00000F8A 53FC                   MOV.L       @(48,R15),R3
    00000F8C 2F36                   MOV.L       R3,@-R15
    00000F8E 02FE                   MOV.L       @(R0,R15),R2
    00000F90 D332                   MOV.L       L1587+14,R3; __ged
    00000F92 E040                   MOV         #64,R0
    00000F94 2F26                   MOV.L       R2,@-R15
    00000F96 02FE                   MOV.L       @(R0,R15),R2
    00000F98 430B                   JSR         @R3
    00000F9A 2F26                   MOV.L       R2,@-R15
    00000F9C 6C03                   MOV         R0,R12
    00000F9E              L944:
    00000F9E E201                   MOV         #1,R2
    00000FA0 A045                   BRA         L1316
    00000FA2 2F22                   MOV.L       R2,@R15
    00000FA4              L1099:                           ; case label 
      expression   641                case TokenPlus:                 ResultFP = BottomFP + TopFP; break;
    00000FA4 51FE                   MOV.L       @(56,R15),R1
    00000FA6 2F16                   MOV.L       R1,@-R15
    00000FA8 51FE                   MOV.L       @(56,R15),R1
    00000FAA 2F16                   MOV.L       R1,@-R15
    00000FAC 53FE                   MOV.L       @(56,R15),R3
    00000FAE 2F36                   MOV.L       R3,@-R15
    00000FB0 53FE                   MOV.L       @(56,R15),R3
    00000FB2 2F36                   MOV.L       R3,@-R15
    00000FB4 D22A                   MOV.L       L1587+18,R2; __addd




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FB6 61F3                   MOV         R15,R1
    00000FB8 714C                   ADD         #76,R1
    00000FBA 420B                   JSR         @R2
    00000FBC 2F16                   MOV.L       R1,@-R15
    00000FBE A036                   BRA         L1316
    00000FC0 0009                   NOP
    00000FC2              L1100:                           ; case label 
      expression   642                case TokenMinus:                ResultFP = BottomFP - TopFP; break;
    00000FC2 50FC                   MOV.L       @(48,R15),R0
    00000FC4 D227                   MOV.L       L1587+22,R2; __subdr
    00000FC6 2F06                   MOV.L       R0,@-R15
    00000FC8 50FC                   MOV.L       @(48,R15),R0
    00000FCA 2F06                   MOV.L       R0,@-R15
    00000FCC E040                   MOV         #64,R0
    00000FCE 03FE                   MOV.L       @(R0,R15),R3
    00000FD0 2F36                   MOV.L       R3,@-R15
    00000FD2 E040                   MOV         #64,R0
    00000FD4 03FE                   MOV.L       @(R0,R15),R3
    00000FD6 2F36                   MOV.L       R3,@-R15
    00000FD8 61F3                   MOV         R15,R1
    00000FDA 714C                   ADD         #76,R1
    00000FDC 420B                   JSR         @R2
    00000FDE 2F16                   MOV.L       R1,@-R15
    00000FE0 A025                   BRA         L1316
    00000FE2 0009                   NOP
    00000FE4              L1101:                           ; case label 
      expression   643                case TokenAsterisk:             ResultFP = BottomFP * TopFP; break;
    00000FE4 50FE                   MOV.L       @(56,R15),R0
    00000FE6 2F06                   MOV.L       R0,@-R15
    00000FE8 50FE                   MOV.L       @(56,R15),R0
    00000FEA 2F06                   MOV.L       R0,@-R15
    00000FEC 53FE                   MOV.L       @(56,R15),R3
    00000FEE 2F36                   MOV.L       R3,@-R15
    00000FF0 53FE                   MOV.L       @(56,R15),R3
    00000FF2 2F36                   MOV.L       R3,@-R15
    00000FF4 D21C                   MOV.L       L1587+26,R2; __muld
    00000FF6 61F3                   MOV         R15,R1
    00000FF8 714C                   ADD         #76,R1
    00000FFA 420B                   JSR         @R2
    00000FFC 2F16                   MOV.L       R1,@-R15
    00000FFE A016                   BRA         L1316
    00001000 0009                   NOP
    00001002              L1102:                           ; case label 
      expression   644                case TokenSlash:                ResultFP = BottomFP / TopFP; break;
    00001002 50FC                   MOV.L       @(48,R15),R0
    00001004 D219                   MOV.L       L1587+30,R2; __divdr
    00001006 2F06                   MOV.L       R0,@-R15
    00001008 50FC                   MOV.L       @(48,R15),R0
    0000100A 2F06                   MOV.L       R0,@-R15
    0000100C E040                   MOV         #64,R0
    0000100E 03FE                   MOV.L       @(R0,R15),R3
    00001010 2F36                   MOV.L       R3,@-R15
    00001012 E040                   MOV         #64,R0
    00001014 03FE                   MOV.L       @(R0,R15),R3
    00001016 2F36                   MOV.L       R3,@-R15
    00001018 61F3                   MOV         R15,R1
    0000101A 714C                   ADD         #76,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000101C 420B                   JSR         @R2
    0000101E 2F16                   MOV.L       R1,@-R15
    00001020 A005                   BRA         L1316
    00001022 0009                   NOP
    00001024              L1103:                           ; default label 
      expression   645                default:                        ProgramFail(Parser, "invalid operation"); break;
    00001024 D012                   MOV.L       L1587+34,R0; L671
    00001026 2F06                   MOV.L       R0,@-R15
    00001028 480B                   JSR         @R8
    0000102A 64D3                   MOV         R13,R4
    0000102C 7F04                   ADD         #4,R15
    0000102E              L1316:                            
      expression   646            }
      expression   647    
      expression   648            if (ResultIsInt)
    0000102E 62F2                   MOV.L       @R15,R2
    00001030 2228                   TST         R2,R2
    00001032 8901                   BT          L1588
    00001034 A0F7                   BRA         L925
    00001036 0009                   NOP
    00001038              L1588:                            
      expression   649                ExpressionPushInt(Parser, StackTop, ResultInt);
      expression   650            else
      expression   651                ExpressionPushFP(Parser, StackTop, ResultFP);
    00001038 E040                   MOV         #64,R0
    0000103A 6593                   MOV         R9,R5
    0000103C 03FE                   MOV.L       @(R0,R15),R3
    0000103E E040                   MOV         #64,R0
    00001040 2F36                   MOV.L       R3,@-R15
    00001042 03FE                   MOV.L       @(R0,R15),R3
    00001044 2F36                   MOV.L       R3,@-R15
    00001046 B98A                   BSR         _ExpressionPushFP
    00001048 64D3                   MOV         R13,R4
    0000104A A204                   BRA         L1300
    0000104C 7F08                   ADD         #8,R15
    0000104E              L1587:                            
    0000104E 0000                   .DATA.W     0
    00001050 <00000000>             .DATA.L     __ltd
    00001054 <00000000>             .DATA.L     __gtd
    00001058 <00000000>             .DATA.L     __led
    0000105C <00000000>             .DATA.L     __ged
    00001060 <00000000>             .DATA.L     __addd
    00001064 <00000000>             .DATA.L     __subdr
    00001068 <00000000>             .DATA.L     __muld
    0000106C <00000000>             .DATA.L     __divdr
    00001070 <00000000>             .DATA.L     L671
    00001074              L1305:                            
      expression   652        }
      expression   653    #endif
      expression   654        else if (IS_NUMERIC_COERCIBLE(TopValue) && IS_NUMERIC_COERCIBLE(BottomValue))
    00001074 64A2                   MOV.L       @R10,R4
    00001076 E301                   MOV         #1,R3
    00001078 1F49                   MOV.L       R4,@(36,R15)
    0000107A 6442                   MOV.L       @R4,R4
    0000107C 3433                   CMP/GE      R3,R4
    0000107E 8B02                   BF          L1322
    00001080 E107                   MOV         #7,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001082 3417                   CMP/GT      R1,R4
    00001084 8B04                   BF          L1321
    00001086              L1322:                            
    00001086 6043                   MOV         R4,R0
    00001088 8808                   CMP/EQ      #8,R0
    0000108A 8901                   BT          L1589
    0000108C A0CD                   BRA         L1320
    0000108E 0009                   NOP
    00001090              L1589:                            
    00001090              L1321:                            
    00001090 62E2                   MOV.L       @R14,R2
    00001092 E301                   MOV         #1,R3
    00001094 6122                   MOV.L       @R2,R1
    00001096 3133                   CMP/GE      R3,R1
    00001098 8B04                   BF          L1324
    0000109A E207                   MOV         #7,R2
    0000109C 60E2                   MOV.L       @R14,R0
    0000109E 6102                   MOV.L       @R0,R1
    000010A0 3127                   CMP/GT      R2,R1
    000010A2 8B05                   BF          L1323
    000010A4              L1324:                            
    000010A4 60E2                   MOV.L       @R14,R0
    000010A6 6002                   MOV.L       @R0,R0
    000010A8 8808                   CMP/EQ      #8,R0
    000010AA 8901                   BT          L1590
    000010AC A0BD                   BRA         L1320
    000010AE 0009                   NOP
    000010B0              L1590:                            
    000010B0              L1323:                            
      expression   655        { 
      expression   656            /* integer operation */
      expression   657            long TopInt = ExpressionCoerceInteger(TopValue);
    000010B0 D21B                   MOV.L       L1591+2,R2 ; _ExpressionCoerceInteger
    000010B2 420B                   JSR         @R2
    000010B4 64A3                   MOV         R10,R4
    000010B6 6A03                   MOV         R0,R10
      expression   658            long BottomInt = ExpressionCoerceInteger(BottomValue);
    000010B8 D319                   MOV.L       L1591+2,R3 ; _ExpressionCoerceInteger
    000010BA 430B                   JSR         @R3
    000010BC 64E3                   MOV         R14,R4
    000010BE 6403                   MOV         R0,R4
    000010C0 D318                   MOV.L       L1591+6,R3 ; __divls
    000010C2 60A3                   MOV         R10,R0
    000010C4 0A47                   MUL.L       R4,R10
    000010C6 6143                   MOV         R4,R1
    000010C8 304C                   ADD         R4,R0
    000010CA 061A                   STS         MACL,R6
    000010CC 1F01                   MOV.L       R0,@(4,R15)
    000010CE 6043                   MOV         R4,R0
    000010D0 30A8                   SUB         R10,R0
    000010D2 1F02                   MOV.L       R0,@(8,R15)
    000010D4 430B                   JSR         @R3
    000010D6 60A3                   MOV         R10,R0
    000010D8 2F02                   MOV.L       R0,@R15
    000010DA 6143                   MOV         R4,R1
    000010DC D312                   MOV.L       L1591+10,R3; __modls
    000010DE 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010E0 60A3                   MOV         R10,R0
    000010E2 63AB                   NEG         R10,R3
    000010E4 1F08                   MOV.L       R0,@(32,R15)
    000010E6 6043                   MOV         R4,R0
    000010E8 40AC                   SHAD        R10,R0
    000010EA 1F07                   MOV.L       R0,@(28,R15)
    000010EC 6043                   MOV         R4,R0
    000010EE 403C                   SHAD        R3,R0
    000010F0 1F06                   MOV.L       R0,@(24,R15)
    000010F2 60A3                   MOV         R10,R0
    000010F4 2049                   AND         R4,R0
    000010F6 1F05                   MOV.L       R0,@(20,R15)
    000010F8 60A3                   MOV         R10,R0
    000010FA 204B                   OR          R4,R0
    000010FC 1F04                   MOV.L       R0,@(16,R15)
    000010FE 60A3                   MOV         R10,R0
    00001100 204A                   XOR         R4,R0
    00001102 1F03                   MOV.L       R0,@(12,R15)
    00001104 60B3                   MOV         R11,R0
    00001106 70FE                   ADD         #-2,R0
    00001108 E11F                   MOV         #31,R1
    0000110A 3012                   CMP/HS      R1,R0
    0000110C 8B01                   BF          L1592
    0000110E A085                   BRA         L1133
    00001110 0009                   NOP
    00001112              L1592:                            
    00001112 4000                   SHLL        R0
    00001114 6103                   MOV         R0,R1
    00001116 C705                   MOVA        L1594,R0
    00001118 001D                   MOV.W       @(R0,R1),R0
    0000111A 0023                   BRAF        R0
    0000111C 0009                   NOP
    0000111E              L1593:                            
    0000111E              L1591:                            
    0000111E 0000                   .DATA.W     0
    00001120 <00000000>             .DATA.L     _ExpressionCoerceInteger
    00001124 <00000000>             .DATA.L     __divls
    00001128 <00000000>             .DATA.L     __modls
    0000112C              L1594:
    0000112C 004C                   .DATA.W     L1104-L1593
    0000112E 0052                   .DATA.W     L1105-L1593
    00001130 0058                   .DATA.W     L1106-L1593
    00001132 005E                   .DATA.W     L1107-L1593
    00001134 0062                   .DATA.W     L1108-L1593
    00001136 0068                   .DATA.W     L1109-L1593
    00001138 006E                   .DATA.W     L1110-L1593
    0000113A 0074                   .DATA.W     L1111-L1593
    0000113C 007A                   .DATA.W     L1112-L1593
    0000113E 0080                   .DATA.W     L1113-L1593
    00001140 0086                   .DATA.W     L1114-L1593
    00001142 00FE                   .DATA.W     L1133-L1593
    00001144 00FE                   .DATA.W     L1133-L1593
    00001146 0096                   .DATA.W     L1115-L1593
    00001148 00A6                   .DATA.W     L1116-L1593
    0000114A 00B6                   .DATA.W     L1117-L1593
    0000114C 00BA                   .DATA.W     L1118-L1593
    0000114E 00BE                   .DATA.W     L1119-L1593




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001150 00C2                   .DATA.W     L1120-L1593
    00001152 00C6                   .DATA.W     L1121-L1593
    00001154 00CA                   .DATA.W     L1122-L1593
    00001156 00CE                   .DATA.W     L1123-L1593
    00001158 00D2                   .DATA.W     L1124-L1593
    0000115A 00DC                   .DATA.W     L1125-L1593
    0000115C 00E2                   .DATA.W     L1126-L1593
    0000115E 00E6                   .DATA.W     L1127-L1593
    00001160 00EA                   .DATA.W     L1128-L1593
    00001162 00EE                   .DATA.W     L1129-L1593
    00001164 00F2                   .DATA.W     L1130-L1593
    00001166 00F6                   .DATA.W     L1131-L1593
    00001168 00FA                   .DATA.W     L1132-L1593
      expression   659            switch (Op)
      expression   660            {
      expression   661                case TokenAssign:               ResultInt = ExpressionAssignInt(Parser, BottomValue, TopInt, F
                         +ALSE); break;
    0000116A              L1104:                           ; case label 
    0000116A E700                   MOV         #0,R7
    0000116C A01C                   BRA         L1550
    0000116E 66A3                   MOV         R10,R6
    00001170              L1105:                           ; case label 
      expression   662                case TokenAddAssign:            ResultInt = ExpressionAssignInt(Parser, BottomValue, BottomInt
                         + + TopInt, FALSE); break;
    00001170 E700                   MOV         #0,R7
    00001172 A019                   BRA         L1550
    00001174 56F1                   MOV.L       @(4,R15),R6
    00001176              L1106:                           ; case label 
      expression   663                case TokenSubtractAssign:       ResultInt = ExpressionAssignInt(Parser, BottomValue, BottomInt
                         + - TopInt, FALSE); break;
    00001176 E700                   MOV         #0,R7
    00001178 A016                   BRA         L1550
    0000117A 56F2                   MOV.L       @(8,R15),R6
    0000117C              L1107:                           ; case label 
      expression   664                case TokenMultiplyAssign:       ResultInt = ExpressionAssignInt(Parser, BottomValue, BottomInt
                         + * TopInt, FALSE); break;
    0000117C A014                   BRA         L1550
    0000117E E700                   MOV         #0,R7
    00001180              L1108:                           ; case label 
      expression   665                case TokenDivideAssign:         ResultInt = ExpressionAssignInt(Parser, BottomValue, BottomInt
                         + / TopInt, FALSE); break;
    00001180 E700                   MOV         #0,R7
    00001182 A011                   BRA         L1550
    00001184 66F2                   MOV.L       @R15,R6
    00001186              L1109:                           ; case label 
      expression   666    #ifndef NO_MODULUS
      expression   667                case TokenModulusAssign:        ResultInt = ExpressionAssignInt(Parser, BottomValue, BottomInt
                         + % TopInt, FALSE); break;
    00001186 E700                   MOV         #0,R7
    00001188 A00E                   BRA         L1550
    0000118A 56F8                   MOV.L       @(32,R15),R6
    0000118C              L1110:                           ; case label 
      expression   668    #endif
      expression   669                case TokenShiftLeftAssign:      ResultInt = ExpressionAssignInt(Parser, BottomValue, BottomInt
                         + << TopInt, FALSE); break;
    0000118C E700                   MOV         #0,R7
    0000118E A00B                   BRA         L1550




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001190 56F7                   MOV.L       @(28,R15),R6
    00001192              L1111:                           ; case label 
      expression   670                case TokenShiftRightAssign:     ResultInt = ExpressionAssignInt(Parser, BottomValue, BottomInt
                         + >> TopInt, FALSE); break;
    00001192 E700                   MOV         #0,R7
    00001194 A008                   BRA         L1550
    00001196 56F6                   MOV.L       @(24,R15),R6
    00001198              L1112:                           ; case label 
      expression   671                case TokenArithmeticAndAssign:  ResultInt = ExpressionAssignInt(Parser, BottomValue, BottomInt
                         + & TopInt, FALSE); break;
    00001198 E700                   MOV         #0,R7
    0000119A A005                   BRA         L1550
    0000119C 56F5                   MOV.L       @(20,R15),R6
    0000119E              L1113:                           ; case label 
      expression   672                case TokenArithmeticOrAssign:   ResultInt = ExpressionAssignInt(Parser, BottomValue, BottomInt
                         + | TopInt, FALSE); break;
    0000119E E700                   MOV         #0,R7
    000011A0 A002                   BRA         L1550
    000011A2 56F4                   MOV.L       @(16,R15),R6
    000011A4              L1114:                           ; case label 
      expression   673                case TokenArithmeticExorAssign: ResultInt = ExpressionAssignInt(Parser, BottomValue, BottomInt
                         + ^ TopInt, FALSE); break;
    000011A4 56F3                   MOV.L       @(12,R15),R6
    000011A6 E700                   MOV         #0,R7
    000011A8              L1550:                            
    000011A8 D356                   MOV.L       L1595+2,R3 ; _ExpressionAssignInt
    000011AA 65E3                   MOV         R14,R5
    000011AC 430B                   JSR         @R3
    000011AE 64D3                   MOV         R13,R4
    000011B0 A039                   BRA         L925
    000011B2 6C03                   MOV         R0,R12
    000011B4              L1115:                           ; case label 
      expression   674                case TokenLogicalOr:            ResultInt = BottomInt || TopInt; break;
    000011B4 2448                   TST         R4,R4
    000011B6 8B03                   BF          L1326
    000011B8 2AA8                   TST         R10,R10
    000011BA 8B01                   BF          L1326
    000011BC A033                   BRA         L925
    000011BE EC00                   MOV         #0,R12
    000011C0              L1326:                            
    000011C0 A031                   BRA         L925
    000011C2 EC01                   MOV         #1,R12
    000011C4              L1116:                           ; case label 
      expression   675                case TokenLogicalAnd:           ResultInt = BottomInt && TopInt; break;
    000011C4 2448                   TST         R4,R4
    000011C6 8903                   BT          L1328
    000011C8 2AA8                   TST         R10,R10
    000011CA 8901                   BT          L1328
    000011CC A02B                   BRA         L925
    000011CE EC01                   MOV         #1,R12
    000011D0              L1328:                            
    000011D0 A029                   BRA         L925
    000011D2 EC00                   MOV         #0,R12
    000011D4              L1117:                           ; case label 
      expression   676                case TokenArithmeticOr:         ResultInt = BottomInt | TopInt; break;
    000011D4 A027                   BRA         L925
    000011D6 5CF4                   MOV.L       @(16,R15),R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011D8              L1118:                           ; case label 
      expression   677                case TokenArithmeticExor:       ResultInt = BottomInt ^ TopInt; break;
    000011D8 A025                   BRA         L925
    000011DA 5CF3                   MOV.L       @(12,R15),R12
    000011DC              L1119:                           ; case label 
      expression   678                case TokenAmpersand:            ResultInt = BottomInt & TopInt; break;
    000011DC A023                   BRA         L925
    000011DE 5CF5                   MOV.L       @(20,R15),R12
    000011E0              L1120:                           ; case label 
      expression   679                case TokenEqual:                ResultInt = BottomInt == TopInt; break;
    000011E0 A00C                   BRA         L1554
    000011E2 34A0                   CMP/EQ      R10,R4
    000011E4              L1121:                           ; case label 
      expression   680                case TokenNotEqual:             ResultInt = BottomInt != TopInt; break;
    000011E4 A005                   BRA         L1553
    000011E6 34A0                   CMP/EQ      R10,R4
    000011E8              L1122:                           ; case label 
      expression   681                case TokenLessThan:             ResultInt = BottomInt < TopInt; break;
    000011E8 A003                   BRA         L1553
    000011EA 34A3                   CMP/GE      R10,R4
    000011EC              L1123:                           ; case label 
      expression   682                case TokenGreaterThan:          ResultInt = BottomInt > TopInt; break;
    000011EC A006                   BRA         L1554
    000011EE 34A7                   CMP/GT      R10,R4
    000011F0              L1124:                           ; case label 
      expression   683                case TokenLessEqual:            ResultInt = BottomInt <= TopInt; break;
    000011F0 34A7                   CMP/GT      R10,R4
    000011F2              L1553:                            
    000011F2 0C29                   MOVT        R12
    000011F4 7CFF                   ADD         #-1,R12
    000011F6 A016                   BRA         L925
    000011F8 6CCB                   NEG         R12,R12
    000011FA              L1125:                           ; case label 
      expression   684                case TokenGreaterEqual:         ResultInt = BottomInt >= TopInt; break;
    000011FA 34A3                   CMP/GE      R10,R4
    000011FC              L1554:                            
    000011FC A013                   BRA         L925
    000011FE 0C29                   MOVT        R12
    00001200              L1126:                           ; case label 
      expression   685                case TokenShiftLeft:            ResultInt = BottomInt << TopInt; break;
    00001200 A011                   BRA         L925
    00001202 5CF7                   MOV.L       @(28,R15),R12
    00001204              L1127:                           ; case label 
      expression   686                case TokenShiftRight:           ResultInt = BottomInt >> TopInt; break;
    00001204 A00F                   BRA         L925
    00001206 5CF6                   MOV.L       @(24,R15),R12
    00001208              L1128:                           ; case label 
      expression   687                case TokenPlus:                 ResultInt = BottomInt + TopInt; break;
    00001208 A00D                   BRA         L925
    0000120A 5CF1                   MOV.L       @(4,R15),R12
    0000120C              L1129:                           ; case label 
      expression   688                case TokenMinus:                ResultInt = BottomInt - TopInt; break;
    0000120C A00B                   BRA         L925
    0000120E 5CF2                   MOV.L       @(8,R15),R12
    00001210              L1130:                           ; case label 
      expression   689                case TokenAsterisk:             ResultInt = BottomInt * TopInt; break;
    00001210 A009                   BRA         L925




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001212 6C63                   MOV         R6,R12
    00001214              L1131:                           ; case label 
      expression   690                case TokenSlash:                ResultInt = BottomInt / TopInt; break;
    00001214 A007                   BRA         L925
    00001216 6CF2                   MOV.L       @R15,R12
    00001218              L1132:                           ; case label 
      expression   691    #ifndef NO_MODULUS
      expression   692                case TokenModulus:              ResultInt = BottomInt % TopInt; break;
    00001218 A005                   BRA         L925
    0000121A 5CF8                   MOV.L       @(32,R15),R12
    0000121C              L1133:                           ; default label 
      expression   693    #endif
      expression   694                default:                        ProgramFail(Parser, "invalid operation"); break;
    0000121C D23A                   MOV.L       L1595+6,R2 ; L671
    0000121E 2F26                   MOV.L       R2,@-R15
    00001220 480B                   JSR         @R8
    00001222 64D3                   MOV         R13,R4
    00001224 7F04                   ADD         #4,R15
    00001226              L925:
      expression   695            }
      expression   696            
      expression   697            ExpressionPushInt(Parser, StackTop, ResultInt);
    00001226 A0CA                   BRA         L1558
    00001228 66C3                   MOV         R12,R6
    0000122A              L1320:                            
      expression   698        }
      expression   699        else if (BottomValue->Typ->Base == TypePointer && IS_NUMERIC_COERCIBLE(TopValue))
    0000122A 60E2                   MOV.L       @R14,R0
    0000122C 6002                   MOV.L       @R0,R0
    0000122E 880B                   CMP/EQ      #11,R0
    00001230 8901                   BT          L1596
    00001232 A0D8                   BRA         L1357
    00001234 0009                   NOP
    00001236              L1596:                            
    00001236 E301                   MOV         #1,R3
    00001238 62A2                   MOV.L       @R10,R2
    0000123A 6122                   MOV.L       @R2,R1
    0000123C 3133                   CMP/GE      R3,R1
    0000123E 8B04                   BF          L1333
    00001240 60A2                   MOV.L       @R10,R0
    00001242 E207                   MOV         #7,R2
    00001244 6102                   MOV.L       @R0,R1
    00001246 3127                   CMP/GT      R2,R1
    00001248 8B05                   BF          L1332
    0000124A              L1333:                            
    0000124A 60A2                   MOV.L       @R10,R0
    0000124C 6002                   MOV.L       @R0,R0
    0000124E 8808                   CMP/EQ      #8,R0
    00001250 8901                   BT          L1597
    00001252 A092                   BRA         L1331
    00001254 0009                   NOP
    00001256              L1597:                            
    00001256              L1332:                            
      expression   700        {
      expression   701            /* pointer/integer infix arithmetic */
      expression   702            long TopInt = ExpressionCoerceInteger(TopValue);
    00001256 D22D                   MOV.L       L1595+10,R2; _ExpressionCoerceInteger




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001258 420B                   JSR         @R2
    0000125A 64A3                   MOV         R10,R4
    0000125C 6C03                   MOV         R0,R12
      expression   703    
      expression   704            if (Op == TokenEqual || Op == TokenNotEqual)
    0000125E 60B3                   MOV         R11,R0
    00001260 8814                   CMP/EQ      #20,R0
    00001262 8902                   BT          L1335
    00001264 60B3                   MOV         R11,R0
    00001266 8815                   CMP/EQ      #21,R0
    00001268 8B21                   BF          L1334
    0000126A              L1335:                            
      expression   705            {
      expression   706                /* comparison to a NULL pointer */
      expression   707                if (TopInt != 0) 
    0000126A 2CC8                   TST         R12,R12
    0000126C 8904                   BT          L1336
      expression   708                    ProgramFail(Parser, "invalid operation");
    0000126E D226                   MOV.L       L1595+6,R2 ; L671
    00001270 2F26                   MOV.L       R2,@-R15
    00001272 480B                   JSR         @R8
    00001274 64D3                   MOV         R13,R4
    00001276 7F04                   ADD         #4,R15
    00001278              L1336:                            
      expression   709                
      expression   710                if (Op == TokenEqual)
    00001278 60B3                   MOV         R11,R0
    0000127A 8814                   CMP/EQ      #20,R0
    0000127C 8F05                   BF/S        L1337
      expression   711                    ExpressionPushInt(Parser, StackTop, BottomValue->Val->Pointer == NULL);
    0000127E 6593                   MOV         R9,R5
    00001280 56E1                   MOV.L       @(4,R14),R6
    00001282 6662                   MOV.L       @R6,R6
    00001284 2668                   TST         R6,R6
    00001286 A006                   BRA         L1555
    00001288 0629                   MOVT        R6
    0000128A              L1337:                            
      expression   712                else
      expression   713                    ExpressionPushInt(Parser, StackTop, BottomValue->Val->Pointer != NULL);
    0000128A 56E1                   MOV.L       @(4,R14),R6
    0000128C 6662                   MOV.L       @R6,R6
    0000128E 2668                   TST         R6,R6
    00001290 0629                   MOVT        R6
    00001292 76FF                   ADD         #-1,R6
    00001294 666B                   NEG         R6,R6
    00001296              L1555:                            
    00001296 64D3                   MOV         R13,R4
    00001298 7F44                   ADD         #68,R15
    0000129A 4F16                   LDS.L       @R15+,MACL
    0000129C 4F26                   LDS.L       @R15+,PR
    0000129E 68F6                   MOV.L       @R15+,R8
    000012A0 69F6                   MOV.L       @R15+,R9
    000012A2 6AF6                   MOV.L       @R15+,R10
    000012A4 6BF6                   MOV.L       @R15+,R11
    000012A6 6CF6                   MOV.L       @R15+,R12
    000012A8 6DF6                   MOV.L       @R15+,R13
    000012AA A842                   BRA         _ExpressionPushInt




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012AC 6EF6                   MOV.L       @R15+,R14
    000012AE              L1334:                            
      expression   714            }
      expression   715            else if (Op == TokenPlus || Op == TokenMinus)
    000012AE 881C                   CMP/EQ      #28,R0
    000012B0 8902                   BT          L1343
    000012B2 60B3                   MOV         R11,R0
    000012B4 881D                   CMP/EQ      #29,R0
    000012B6 8B31                   BF          L1342
    000012B8              L1343:                            
      expression   716            {
      expression   717                /* pointer arithmetic */
      expression   718                int Size = TypeSize(BottomValue->Typ->FromType, 0, TRUE);
    000012B8 64E2                   MOV.L       @R14,R4
    000012BA E601                   MOV         #1,R6
    000012BC D314                   MOV.L       L1595+14,R3; _TypeSize
    000012BE E500                   MOV         #0,R5
    000012C0 430B                   JSR         @R3
    000012C2 5445                   MOV.L       @(20,R4),R4
    000012C4 2F02                   MOV.L       R0,@R15
      expression   719                
      expression   720                Pointer = BottomValue->Val->Pointer;
    000012C6 5AE1                   MOV.L       @(4,R14),R10
    000012C8 6AA2                   MOV.L       @R10,R10
      expression   721                if (Pointer == NULL)
    000012CA 2AA8                   TST         R10,R10
    000012CC 8B04                   BF          L1344
      expression   722                    ProgramFail(Parser, "invalid use of a NULL pointer");
    000012CE D211                   MOV.L       L1595+18,R2; L680
    000012D0 2F26                   MOV.L       R2,@-R15
    000012D2 480B                   JSR         @R8
    000012D4 64D3                   MOV         R13,R4
    000012D6 7F04                   ADD         #4,R15
    000012D8              L1344:                            
      expression   723                
      expression   724                if (Op == TokenPlus)
    000012D8 60B3                   MOV         R11,R0
    000012DA 881C                   CMP/EQ      #28,R0
    000012DC 8F05                   BF/S        L1345
      expression   725                    Pointer = (void *)((char *)Pointer + TopInt * Size);
      expression   726                else
      expression   727                    Pointer = (void *)((char *)Pointer - TopInt * Size);
      expression   728                
      expression   729                StackValue = ExpressionStackPushValueByType(Parser, StackTop, BottomValue->Typ);
    000012DE 66E2                   MOV.L       @R14,R6
    000012E0 62F2                   MOV.L       @R15,R2
    000012E2 0C27                   MUL.L       R2,R12
    000012E4 0C1A                   STS         MACL,R12
    000012E6 A004                   BRA         L1346
    000012E8 3ACC                   ADD         R12,R10
    000012EA              L1345:                            
    000012EA 62F2                   MOV.L       @R15,R2
    000012EC 0C27                   MUL.L       R2,R12
    000012EE 0C1A                   STS         MACL,R12
    000012F0 3AC8                   SUB         R12,R10
    000012F2              L1346:                            
    000012F2 6593                   MOV         R9,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012F4 D308                   MOV.L       L1595+22,R3; _ExpressionStackPushValueByType
    000012F6 430B                   JSR         @R3
    000012F8 64D3                   MOV         R13,R4
    000012FA 6403                   MOV         R0,R4
      expression   730                StackValue->Val->Pointer = Pointer;
    000012FC 5241                   MOV.L       @(4,R4),R2
    000012FE A0AA                   BRA         L1300
    00001300 22A2                   MOV.L       R10,@R2
    00001302              L1595:                            
    00001302 0000                   .DATA.W     0
    00001304 <00000000>             .DATA.L     _ExpressionAssignInt
    00001308 <00000000>             .DATA.L     L671
    0000130C <00000000>             .DATA.L     _ExpressionCoerceInteger
    00001310 <00000000>             .DATA.L     _TypeSize
    00001314 <00000000>             .DATA.L     L680
    00001318 <00000000>             .DATA.L     _ExpressionStackPushValueByType
    0000131C              L1342:                            
      expression   731            }
      expression   732            else if (Op == TokenAssign && TopInt == 0)
    0000131C 8802                   CMP/EQ      #2,R0
    0000131E 8B01                   BF          L1348
    00001320 2CC8                   TST         R12,R12
    00001322 8963                   BT          L926
    00001324              L1348:                            
      expression   733            {
      expression   734                /* assign a NULL pointer */
      expression   735                HeapUnpopStack(sizeof(struct Value));
      expression   736                ExpressionAssign(Parser, BottomValue, TopValue, FALSE, NULL, 0, FALSE);
      expression   737                ExpressionStackPushValueNode(Parser, StackTop, BottomValue);
      expression   738            }
      expression   739            else if (Op == TokenAddAssign || Op == TokenSubtractAssign)
    00001324 60B3                   MOV         R11,R0
    00001326 8803                   CMP/EQ      #3,R0
    00001328 8904                   BT          L1351
    0000132A 60B3                   MOV         R11,R0
    0000132C 8804                   CMP/EQ      #4,R0
    0000132E 8901                   BT          L1598
    00001330 A08C                   BRA         L928
    00001332 0009                   NOP
    00001334              L1598:                            
    00001334              L1351:                            
      expression   740            {
      expression   741                /* pointer arithmetic */
      expression   742                int Size = TypeSize(BottomValue->Typ->FromType, 0, TRUE);
    00001334 64E2                   MOV.L       @R14,R4
    00001336 E601                   MOV         #1,R6
    00001338 D380                   MOV.L       L1599+2,R3 ; _TypeSize
    0000133A E500                   MOV         #0,R5
    0000133C 430B                   JSR         @R3
    0000133E 5445                   MOV.L       @(20,R4),R4
    00001340 2F02                   MOV.L       R0,@R15
      expression   743    
      expression   744                Pointer = BottomValue->Val->Pointer;
    00001342 5AE1                   MOV.L       @(4,R14),R10
    00001344 6AA2                   MOV.L       @R10,R10
      expression   745                if (Pointer == NULL)
    00001346 2AA8                   TST         R10,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001348 8B04                   BF          L1352
      expression   746                    ProgramFail(Parser, "invalid use of a NULL pointer");
    0000134A D27D                   MOV.L       L1599+6,R2 ; L680
    0000134C 2F26                   MOV.L       R2,@-R15
    0000134E 480B                   JSR         @R8
    00001350 64D3                   MOV         R13,R4
    00001352 7F04                   ADD         #4,R15
    00001354              L1352:                            
      expression   747    
      expression   748                if (Op == TokenAddAssign)
    00001354 60B3                   MOV         R11,R0
    00001356 8803                   CMP/EQ      #3,R0
    00001358 8F05                   BF/S        L1353
      expression   749                    Pointer = (void *)((char *)Pointer + TopInt * Size);
      expression   750                else
      expression   751                    Pointer = (void *)((char *)Pointer - TopInt * Size);
      expression   752    
      expression   753                HeapUnpopStack(sizeof(struct Value));
    0000135A E410                   MOV         #16,R4
    0000135C 62F2                   MOV.L       @R15,R2
    0000135E 0C27                   MUL.L       R2,R12
    00001360 0C1A                   STS         MACL,R12
    00001362 A004                   BRA         L1354
    00001364 3ACC                   ADD         R12,R10
    00001366              L1353:                            
    00001366 62F2                   MOV.L       @R15,R2
    00001368 0C27                   MUL.L       R2,R12
    0000136A 0C1A                   STS         MACL,R12
    0000136C 3AC8                   SUB         R12,R10
    0000136E              L1354:                            
    0000136E D375                   MOV.L       L1599+10,R3; _HeapUnpopStack
    00001370 430B                   JSR         @R3
    00001372 0009                   NOP
      expression   754                BottomValue->Val->Pointer = Pointer;
    00001374 52E1                   MOV.L       @(4,R14),R2
    00001376 A046                   BRA         L927
    00001378 22A2                   MOV.L       R10,@R2
    0000137A              L1331:                            
      expression   755                ExpressionStackPushValueNode(Parser, StackTop, BottomValue);
      expression   756            }
      expression   757            else
      expression   758                ProgramFail(Parser, "invalid operation");
      expression   759        }
      expression   760        else if (BottomValue->Typ->Base == TypePointer && TopValue->Typ->Base == TypePointer && Op != TokenAss
                         +ign)
    0000137A 60E2                   MOV.L       @R14,R0
    0000137C 6002                   MOV.L       @R0,R0
    0000137E 880B                   CMP/EQ      #11,R0
    00001380 8B31                   BF          L1357
    00001382 60A2                   MOV.L       @R10,R0
    00001384 6002                   MOV.L       @R0,R0
    00001386 880B                   CMP/EQ      #11,R0
    00001388 8B2D                   BF          L1357
    0000138A 60B3                   MOV         R11,R0
    0000138C 8802                   CMP/EQ      #2,R0
    0000138E 892A                   BT          L1357
      expression   761        {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   762            /* pointer/pointer operations */
      expression   763            char *TopLoc = (char *)TopValue->Val->Pointer;
    00001390 5CA1                   MOV.L       @(4,R10),R12
      expression   764            char *BottomLoc = (char *)BottomValue->Val->Pointer;
      expression   765            
      expression   766            switch (Op)
    00001392 60B3                   MOV         R11,R0
    00001394 53E1                   MOV.L       @(4,R14),R3
    00001396 8814                   CMP/EQ      #20,R0
    00001398 6CC2                   MOV.L       @R12,R12
    0000139A 8D06                   BT/S        L1134
    0000139C 6E32                   MOV.L       @R3,R14
    0000139E 8815                   CMP/EQ      #21,R0
    000013A0 8906                   BT          L1135
    000013A2 881D                   CMP/EQ      #29,R0
    000013A4 8909                   BT          L1136
    000013A6 A018                   BRA         L1137
    000013A8 0009                   NOP
    000013AA              L1134:                           ; case label 
      expression   767            {
      expression   768                case TokenEqual:                ExpressionPushInt(Parser, StackTop, BottomLoc == TopLoc); brea
                         +k;
    000013AA 3EC0                   CMP/EQ      R12,R14
    000013AC A007                   BRA         L1558
    000013AE 0629                   MOVT        R6
    000013B0              L1135:                           ; case label 
      expression   769                case TokenNotEqual:             ExpressionPushInt(Parser, StackTop, BottomLoc != TopLoc); brea
                         +k;
    000013B0 3EC0                   CMP/EQ      R12,R14
    000013B2 0629                   MOVT        R6
    000013B4 76FF                   ADD         #-1,R6
    000013B6 A002                   BRA         L1558
    000013B8 666B                   NEG         R6,R6
    000013BA              L1136:                           ; case label 
      expression   770                case TokenMinus:                ExpressionPushInt(Parser, StackTop, BottomLoc - TopLoc); break
                         +;
    000013BA 66E3                   MOV         R14,R6
    000013BC 36C8                   SUB         R12,R6
    000013BE              L1558:                            
    000013BE 6593                   MOV         R9,R5
    000013C0 D261                   MOV.L       L1599+14,R2; _ExpressionPushInt
    000013C2 64D3                   MOV         R13,R4
    000013C4 7F44                   ADD         #68,R15
    000013C6 4F16                   LDS.L       @R15+,MACL
    000013C8 4F26                   LDS.L       @R15+,PR
    000013CA 68F6                   MOV.L       @R15+,R8
    000013CC 69F6                   MOV.L       @R15+,R9
    000013CE 6AF6                   MOV.L       @R15+,R10
    000013D0 6BF6                   MOV.L       @R15+,R11
    000013D2 6CF6                   MOV.L       @R15+,R12
    000013D4 6DF6                   MOV.L       @R15+,R13
    000013D6 422B                   JMP         @R2
    000013D8 6EF6                   MOV.L       @R15+,R14
    000013DA              L1137:                           ; default label 
      expression   771                default:                        ProgramFail(Parser, "invalid operation"); break;
    000013DA D25C                   MOV.L       L1599+18,R2; L671
    000013DC 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013DE 480B                   JSR         @R8
    000013E0 64D3                   MOV         R13,R4
    000013E2 A038                   BRA         L1300
    000013E4 7F04                   ADD         #4,R15
    000013E6              L1357:                            
      expression   772            }
      expression   773        }
      expression   774        else if (Op == TokenAssign)
    000013E6 60B3                   MOV         R11,R0
    000013E8 8802                   CMP/EQ      #2,R0
    000013EA 8B1B                   BF          L1360
    000013EC              L926:
      expression   775        {
      expression   776            /* assign a non-numeric type */
      expression   777            HeapUnpopStack(sizeof(struct Value));   /* XXX - possible bug if lvalue is a temp value and takes 
                         +more than sizeof(struct Value) */
    000013EC D255                   MOV.L       L1599+10,R2; _HeapUnpopStack
    000013EE 420B                   JSR         @R2
    000013F0 E410                   MOV         #16,R4
      expression   778            ExpressionAssign(Parser, BottomValue, TopValue, FALSE, NULL, 0, FALSE);
    000013F2 E300                   MOV         #0,R3
    000013F4 2F36                   MOV.L       R3,@-R15
    000013F6 6733                   MOV         R3,R7
    000013F8 2F36                   MOV.L       R3,@-R15
    000013FA 66A3                   MOV         R10,R6
    000013FC 2F36                   MOV.L       R3,@-R15
    000013FE 65E3                   MOV         R14,R5
    00001400 B876                   BSR         _ExpressionAssign
    00001402 64D3                   MOV         R13,R4
    00001404 7F0C                   ADD         #12,R15
    00001406              L927:
      expression   779            ExpressionStackPushValueNode(Parser, StackTop, BottomValue);
    00001406 66E3                   MOV         R14,R6
    00001408              L1559:                            
    00001408 D351                   MOV.L       L1599+22,R3; _ExpressionStackPushValueNode
    0000140A 6593                   MOV         R9,R5
    0000140C 64D3                   MOV         R13,R4
    0000140E 7F44                   ADD         #68,R15
    00001410 4F16                   LDS.L       @R15+,MACL
    00001412 4F26                   LDS.L       @R15+,PR
    00001414 68F6                   MOV.L       @R15+,R8
    00001416 69F6                   MOV.L       @R15+,R9
    00001418 6AF6                   MOV.L       @R15+,R10
    0000141A 6BF6                   MOV.L       @R15+,R11
    0000141C 6CF6                   MOV.L       @R15+,R12
    0000141E 6DF6                   MOV.L       @R15+,R13
    00001420 432B                   JMP         @R3
    00001422 6EF6                   MOV.L       @R15+,R14
    00001424              L1360:                            
      expression   780        }
      expression   781        else if (Op == TokenCast)
    00001424 8826                   CMP/EQ      #38,R0
    00001426 8B11                   BF          L928
      expression   782        {
      expression   783            /* cast a value to a different type */   /* XXX - possible bug if the destination type takes more 
                         +than sizeof(struct Value) + sizeof(struct ValueType *) */
      expression   784            struct Value *ValueLoc = ExpressionStackPushValueByType(Parser, StackTop, BottomValue->Val->Typ);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001428 56E1                   MOV.L       @(4,R14),R6
    0000142A 6593                   MOV         R9,R5
    0000142C D349                   MOV.L       L1599+26,R3; _ExpressionStackPushValueByType
    0000142E 6662                   MOV.L       @R6,R6
    00001430 430B                   JSR         @R3
    00001432 64D3                   MOV         R13,R4
    00001434 6503                   MOV         R0,R5
      expression   785            ExpressionAssign(Parser, ValueLoc, TopValue, TRUE, NULL, 0, TRUE);
    00001436 E201                   MOV         #1,R2
    00001438 2F26                   MOV.L       R2,@-R15
    0000143A E300                   MOV         #0,R3
    0000143C 2F36                   MOV.L       R3,@-R15
    0000143E 6723                   MOV         R2,R7
    00001440 2F36                   MOV.L       R3,@-R15
    00001442 66A3                   MOV         R10,R6
    00001444 B854                   BSR         _ExpressionAssign
    00001446 64D3                   MOV         R13,R4
    00001448 A005                   BRA         L1300
    0000144A 7F0C                   ADD         #12,R15
    0000144C              L928:
      expression   786        }
      expression   787        else
      expression   788            ProgramFail(Parser, "invalid operation");
    0000144C D23F                   MOV.L       L1599+18,R2; L671
    0000144E 2F26                   MOV.L       R2,@-R15
    00001450 480B                   JSR         @R8
    00001452 64D3                   MOV         R13,R4
    00001454 7F04                   ADD         #4,R15
    00001456              L1300:                            
      expression   789    }
    00001456 7F44                   ADD         #68,R15
    00001458 4F16                   LDS.L       @R15+,MACL
    0000145A 4F26                   LDS.L       @R15+,PR
    0000145C 68F6                   MOV.L       @R15+,R8
    0000145E 69F6                   MOV.L       @R15+,R9
    00001460 6AF6                   MOV.L       @R15+,R10
    00001462 6BF6                   MOV.L       @R15+,R11
    00001464 6CF6                   MOV.L       @R15+,R12
    00001466 6DF6                   MOV.L       @R15+,R13
    00001468 000B                   RTS
    0000146A 6EF6                   MOV.L       @R15+,R14
      expression   790    
      expression   791    /* take the contents of the expression stack and compute the top until there's nothing greater than the gi
                         +ven precedence */
      expression   792    void ExpressionStackCollapse(struct ParseState *Parser, struct ExpressionStack **StackTop, int Precedence,
                         + int *IgnorePrecedence)
    0000146C              _ExpressionStackCollapse:        ; function: ExpressionStackCollapse
                                                           ; frame size=48
    0000146C 2FE6                   MOV.L       R14,@-R15
    0000146E 2FD6                   MOV.L       R13,@-R15
    00001470 2FC6                   MOV.L       R12,@-R15
    00001472 2FB6                   MOV.L       R11,@-R15
    00001474 2FA6                   MOV.L       R10,@-R15
    00001476 6A53                   MOV         R5,R10
    00001478 2F96                   MOV.L       R9,@-R15
    0000147A 6943                   MOV         R4,R9
    0000147C 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000147E 4F22                   STS.L       PR,@-R15
    00001480 7FF4                   ADD         #-12,R15
    00001482 1F62                   MOV.L       R6,@(8,R15)
    00001484 1F71                   MOV.L       R7,@(4,R15)
      expression   793    {
      expression   794        int FoundPrecedence = Precedence;
      expression   795        struct Value *TopValue;
      expression   796        struct Value *BottomValue;
      expression   797        struct ExpressionStack *TopStackNode = *StackTop;
      expression   798        struct ExpressionStack *TopOperatorNode;
      expression   799        
      expression   800    #ifdef DEBUG_EXPRESSIONS
      expression   801        ExpressionStackShow(*StackTop);
      expression   802    #endif
      expression   803        while (TopStackNode != NULL && TopStackNode->Next != NULL && FoundPrecedence >= Precedence)
    00001486 A0AB                   BRA         L1560
    00001488 5BF2                   MOV.L       @(8,R15),R11
    0000148A              L1365:                            
      expression   804        {
      expression   805            /* find the top operator on the stack */
      expression   806            if (TopStackNode->Order == OrderNone)
    0000148A 84CE                   MOV.B       @(14,R12),R0
    0000148C 2008                   TST         R0,R0
    0000148E 8B01                   BF          L1366
      expression   807                TopOperatorNode = TopStackNode->Next;
    00001490 A001                   BRA         L1367
    00001492 6EC2                   MOV.L       @R12,R14
    00001494              L1366:                            
      expression   808            else
      expression   809                TopOperatorNode = TopStackNode;
    00001494 6EC3                   MOV         R12,R14
    00001496              L1367:                            
      expression   810            
      expression   811            FoundPrecedence = TopOperatorNode->Precedence;
    00001496 85E6                   MOV.W       @(12,R14),R0
      expression   812            
      expression   813            /* does it have a high enough precedence? */
      expression   814            if (FoundPrecedence >= Precedence && TopOperatorNode != NULL)
    00001498 53F2                   MOV.L       @(8,R15),R3
    0000149A 6B0D                   EXTU.W      R0,R11
    0000149C 3B33                   CMP/GE      R3,R11
    0000149E 8901                   BT          L1600
    000014A0 A09E                   BRA         L1560
    000014A2 0009                   NOP
    000014A4              L1600:                            
    000014A4 2EE8                   TST         R14,R14
    000014A6 8B01                   BF          L1601
    000014A8 A09A                   BRA         L1560
    000014AA 0009                   NOP
    000014AC              L1601:                            
      expression   815            {
      expression   816                /* execute this operator */
      expression   817                switch (TopOperatorNode->Order)
    000014AC D82A                   MOV.L       L1599+30,R8; _TypeStackSizeValue
    000014AE DD2B                   MOV.L       L1599+34,R13; _HeapPopStack
    000014B0 84EE                   MOV.B       @(14,R14),R0
    000014B2 600C                   EXTU.B      R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014B4 8801                   CMP/EQ      #1,R0
    000014B6 8909                   BT          L1138
    000014B8 8803                   CMP/EQ      #3,R0
    000014BA 8921                   BT          L1139
    000014BC 8802                   CMP/EQ      #2,R0
    000014BE 894F                   BT          L1140
    000014C0 8800                   CMP/EQ      #0,R0
    000014C2 8B01                   BF          L1602
    000014C4 A07F                   BRA         L1141
    000014C6 0009                   NOP
    000014C8              L1602:                            
    000014C8 A083                   BRA         L1369
    000014CA 0009                   NOP
    000014CC              L1138:                           ; case label 
      expression   818                {
      expression   819                    case OrderPrefix:
      expression   820                        /* prefix evaluation */
      expression   821                        TopValue = TopStackNode->Val;
    000014CC 5CC1                   MOV.L       @(4,R12),R12
      expression   822                        
      expression   823                        /* pop the value and then the prefix operator - assume they'll still be there until we
                         +'re done */
      expression   824                        HeapPopStack(NULL, sizeof(struct ExpressionStack) + sizeof(struct Value) + TypeStackSi
                         +zeValue(TopValue));
    000014CE 480B                   JSR         @R8
    000014D0 64C3                   MOV         R12,R4
    000014D2 6503                   MOV         R0,R5
    000014D4 7520                   ADD         #32,R5
    000014D6 4D0B                   JSR         @R13
    000014D8 E400                   MOV         #0,R4
      expression   825                        HeapPopStack(TopOperatorNode, sizeof(struct ExpressionStack));
    000014DA E510                   MOV         #16,R5
    000014DC 4D0B                   JSR         @R13
    000014DE 64E3                   MOV         R14,R4
      expression   826                        *StackTop = TopOperatorNode->Next;
    000014E0 63E2                   MOV.L       @R14,R3
    000014E2 2A32                   MOV.L       R3,@R10
      expression   827                        
      expression   828                        /* do the prefix operation */
      expression   829                        if (Parser->Mode == RunModeRun && FoundPrecedence < *IgnorePrecedence)
    000014E4 5293                   MOV.L       @(12,R9),R2
    000014E6 2228                   TST         R2,R2
    000014E8 8B63                   BF          L946
    000014EA 52F1                   MOV.L       @(4,R15),R2
    000014EC 6322                   MOV.L       @R2,R3
    000014EE 3B33                   CMP/GE      R3,R11
    000014F0 895F                   BT          L946
      expression   830                        {
      expression   831                            /* run the operator */
      expression   832                            ExpressionPrefixOperator(Parser, StackTop, TopOperatorNode->Op, TopValue);
    000014F2 67C3                   MOV         R12,R7
    000014F4 56E2                   MOV.L       @(8,R14),R6
    000014F6 65A3                   MOV         R10,R5
    000014F8 B95C                   BSR         _ExpressionPrefixOperator
    000014FA 6493                   MOV         R9,R4
    000014FC A069                   BRA         L1369
    000014FE 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001500              L1139:                           ; case label 
      expression   833                        }
      expression   834                        else
      expression   835                        {
      expression   836                            /* we're not running it so just return 0 */
      expression   837                            ExpressionPushInt(Parser, StackTop, 0);
      expression   838                        }
      expression   839                        break;
      expression   840                    
      expression   841                    case OrderPostfix:
      expression   842                        /* postfix evaluation */
      expression   843                        TopValue = TopStackNode->Next->Val;
    00001500 62C2                   MOV.L       @R12,R2
      expression   844                        
      expression   845                        /* pop the postfix operator and then the value - assume they'll still be there until w
                         +e're done */
      expression   846                        HeapPopStack(NULL, sizeof(struct ExpressionStack));
    00001502 E510                   MOV         #16,R5
    00001504 5321                   MOV.L       @(4,R2),R3
    00001506 2F32                   MOV.L       R3,@R15
    00001508 4D0B                   JSR         @R13
    0000150A E400                   MOV         #0,R4
      expression   847                        HeapPopStack(TopValue, sizeof(struct ExpressionStack) + sizeof(struct Value) + TypeSta
                         +ckSizeValue(TopValue));
    0000150C 480B                   JSR         @R8
    0000150E 64F2                   MOV.L       @R15,R4
    00001510 6503                   MOV         R0,R5
    00001512 7520                   ADD         #32,R5
    00001514 4D0B                   JSR         @R13
    00001516 64F2                   MOV.L       @R15,R4
      expression   848                        *StackTop = TopStackNode->Next->Next;
    00001518 63C2                   MOV.L       @R12,R3
    0000151A 6232                   MOV.L       @R3,R2
    0000151C 2A22                   MOV.L       R2,@R10
      expression   849    
      expression   850                        /* do the postfix operation */
      expression   851                        if (Parser->Mode == RunModeRun && FoundPrecedence < *IgnorePrecedence)
    0000151E 5393                   MOV.L       @(12,R9),R3
    00001520 2338                   TST         R3,R3
    00001522 8B46                   BF          L946
    00001524 53F1                   MOV.L       @(4,R15),R3
    00001526 6232                   MOV.L       @R3,R2
    00001528 3B23                   CMP/GE      R2,R11
    0000152A 8942                   BT          L946
      expression   852                        {
      expression   853                            /* run the operator */
      expression   854                            ExpressionPostfixOperator(Parser, StackTop, TopOperatorNode->Op, TopValue);
    0000152C 67F2                   MOV.L       @R15,R7
    0000152E 65A3                   MOV         R10,R5
    00001530 56E2                   MOV.L       @(8,R14),R6
    00001532 BA93                   BSR         _ExpressionPostfixOperator
    00001534 6493                   MOV         R9,R4
    00001536 A04C                   BRA         L1369
    00001538 0009                   NOP
    0000153A              L1599:                            
    0000153A 0000                   .DATA.W     0
    0000153C <00000000>             .DATA.L     _TypeSize




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001540 <00000000>             .DATA.L     L680
    00001544 <00000000>             .DATA.L     _HeapUnpopStack
    00001548 <00000000>             .DATA.L     _ExpressionPushInt
    0000154C <00000000>             .DATA.L     L671
    00001550 <00000000>             .DATA.L     _ExpressionStackPushValueNode
    00001554 <00000000>             .DATA.L     _ExpressionStackPushValueByType
    00001558 <00000000>             .DATA.L     _TypeStackSizeValue
    0000155C <00000000>             .DATA.L     _HeapPopStack
    00001560              L1140:                           ; case label 
      expression   855                        }
      expression   856                        else
      expression   857                        {
      expression   858                            /* we're not running it so just return 0 */
      expression   859                            ExpressionPushInt(Parser, StackTop, 0);
      expression   860                        }
      expression   861                        break;
      expression   862                    
      expression   863                    case OrderInfix:
      expression   864                        /* infix evaluation */
      expression   865                        TopValue = TopStackNode->Val;
    00001560 53C1                   MOV.L       @(4,R12),R3
      expression   866                        if (TopValue != NULL)
    00001562 6233                   MOV         R3,R2
    00001564 2228                   TST         R2,R2
    00001566 8D2B                   BT/S        L1374
    00001568 2F32                   MOV.L       R3,@R15
      expression   867                        {
      expression   868                            BottomValue = TopOperatorNode->Next->Val;
    0000156A 6CE2                   MOV.L       @R14,R12
    0000156C 5CC1                   MOV.L       @(4,R12),R12
      expression   869                            
      expression   870                            /* pop a value, the operator and another value - assume they'll still be there unt
                         +il we're done */
      expression   871                            HeapPopStack(NULL, sizeof(struct ExpressionStack) + sizeof(struct Value) + TypeSta
                         +ckSizeValue(TopValue));
    0000156E 480B                   JSR         @R8
    00001570 64F2                   MOV.L       @R15,R4
    00001572 6503                   MOV         R0,R5
    00001574 7520                   ADD         #32,R5
    00001576 4D0B                   JSR         @R13
    00001578 E400                   MOV         #0,R4
      expression   872                            HeapPopStack(NULL, sizeof(struct ExpressionStack));
    0000157A E510                   MOV         #16,R5
    0000157C 4D0B                   JSR         @R13
    0000157E E400                   MOV         #0,R4
      expression   873                            HeapPopStack(BottomValue, sizeof(struct ExpressionStack) + sizeof(struct Value) + 
                         +TypeStackSizeValue(BottomValue));
    00001580 480B                   JSR         @R8
    00001582 64C3                   MOV         R12,R4
    00001584 6503                   MOV         R0,R5
    00001586 7520                   ADD         #32,R5
    00001588 4D0B                   JSR         @R13
    0000158A 64C3                   MOV         R12,R4
      expression   874                            *StackTop = TopOperatorNode->Next->Next;
    0000158C 63E2                   MOV.L       @R14,R3
    0000158E 6232                   MOV.L       @R3,R2
    00001590 2A22                   MOV.L       R2,@R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   875                            
      expression   876                            /* do the infix operation */
      expression   877                            if (Parser->Mode == RunModeRun && FoundPrecedence <= *IgnorePrecedence)
    00001592 5393                   MOV.L       @(12,R9),R3
    00001594 2338                   TST         R3,R3
    00001596 8B0C                   BF          L946
    00001598 53F1                   MOV.L       @(4,R15),R3
    0000159A 6232                   MOV.L       @R3,R2
    0000159C 3B27                   CMP/GT      R2,R11
    0000159E 8908                   BT          L946
      expression   878                            {
      expression   879                                /* run the operator */
      expression   880                                ExpressionInfixOperator(Parser, StackTop, TopOperatorNode->Op, BottomValue, To
                         +pValue);
    000015A0 61F2                   MOV.L       @R15,R1
    000015A2 67C3                   MOV         R12,R7
    000015A4 2F16                   MOV.L       R1,@-R15
    000015A6 65A3                   MOV         R10,R5
    000015A8 56E2                   MOV.L       @(8,R14),R6
    000015AA BAF7                   BSR         _ExpressionInfixOperator
    000015AC 6493                   MOV         R9,R4
    000015AE A010                   BRA         L1369
    000015B0 7F04                   ADD         #4,R15
    000015B2              L946:
      expression   881                            }
      expression   882                            else
      expression   883                            {
      expression   884                                /* we're not running it so just return 0 */
      expression   885                                ExpressionPushInt(Parser, StackTop, 0);
    000015B2 E600                   MOV         #0,R6
    000015B4 D32F                   MOV.L       L1603+2,R3 ; _ExpressionPushInt
    000015B6 65A3                   MOV         R10,R5
    000015B8 430B                   JSR         @R3
    000015BA 6493                   MOV         R9,R4
    000015BC A009                   BRA         L1369
    000015BE 0009                   NOP
    000015C0              L1374:                            
      expression   886                            }
      expression   887                        }
      expression   888                        else
      expression   889                            FoundPrecedence = -1;
    000015C0 E4FF                   MOV         #-1,R4
      expression   890                        break;
    000015C2 A006                   BRA         L1369
    000015C4 6B43                   MOV         R4,R11
    000015C6              L1141:                           ; case label 
      expression   891    
      expression   892                    case OrderNone:
      expression   893                        /* this should never happen */
      expression   894                        assert(TopOperatorNode->Order != OrderNone);
    000015C6 84EE                   MOV.B       @(14,R14),R0
    000015C8 2008                   TST         R0,R0
    000015CA 8B02                   BF          L1369
    000015CC D22A                   MOV.L       L1603+6,R2 ; _abort
    000015CE 420B                   JSR         @R2
    000015D0 0009                   NOP
      expression   895                        break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015D2              L1369:                            
      expression   896                }
      expression   897                
      expression   898                /* if we've returned above the ignored precedence level turn ignoring off */
      expression   899                if (FoundPrecedence <= *IgnorePrecedence)
    000015D2 53F1                   MOV.L       @(4,R15),R3
    000015D4 6232                   MOV.L       @R3,R2
    000015D6 3B27                   CMP/GT      R2,R11
    000015D8 8902                   BT          L1560
      expression   900                    *IgnorePrecedence = DEEP_PRECEDENCE;
    000015DA 944A                   MOV.W       L1603,R4   ; H'4E20
    000015DC 52F1                   MOV.L       @(4,R15),R2
    000015DE 2242                   MOV.L       R4,@R2
    000015E0              L1560:                            
    000015E0 6CA2                   MOV.L       @R10,R12
    000015E2 2CC8                   TST         R12,R12
    000015E4 8907                   BT          L1381
    000015E6 62C2                   MOV.L       @R12,R2
    000015E8 2228                   TST         R2,R2
    000015EA 8904                   BT          L1381
    000015EC 53F2                   MOV.L       @(8,R15),R3
    000015EE 3B33                   CMP/GE      R3,R11
    000015F0 8B01                   BF          L1604
    000015F2 AF4A                   BRA         L1365
    000015F4 0009                   NOP
    000015F6              L1604:                            
    000015F6              L1381:                            
      expression   901            }
      expression   902    #ifdef DEBUG_EXPRESSIONS
      expression   903            ExpressionStackShow(*StackTop);
      expression   904    #endif
      expression   905            TopStackNode = *StackTop;
      expression   906        }
      expression   907    #ifdef DEBUG_EXPRESSIONS
      expression   908        ExpressionStackShow(*StackTop);
      expression   909    #endif
      expression   910    }
    000015F6 7F0C                   ADD         #12,R15
    000015F8 4F26                   LDS.L       @R15+,PR
    000015FA 68F6                   MOV.L       @R15+,R8
    000015FC 69F6                   MOV.L       @R15+,R9
    000015FE 6AF6                   MOV.L       @R15+,R10
    00001600 6BF6                   MOV.L       @R15+,R11
    00001602 6CF6                   MOV.L       @R15+,R12
    00001604 6DF6                   MOV.L       @R15+,R13
    00001606 000B                   RTS
    00001608 6EF6                   MOV.L       @R15+,R14
      expression   911    
      expression   912    /* push an operator on to the expression stack */
      expression   913    void ExpressionStackPushOperator(struct ParseState *Parser, struct ExpressionStack **StackTop, enum Operat
                         +orOrder Order, enum LexToken Token, int Precedence)
    0000160A              _ExpressionStackPushOperator:    ; function: ExpressionStackPushOperator
                                                           ; frame size=16
    0000160A 4F22                   STS.L       PR,@-R15
      expression   914    {
      expression   915        struct ExpressionStack *StackNode = VariableAlloc(Parser, sizeof(struct ExpressionStack), FALSE);
    0000160C D31B                   MOV.L       L1603+10,R3; _VariableAlloc




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000160E 7FF4                   ADD         #-12,R15
    00001610 2F52                   MOV.L       R5,@R15
    00001612 1F62                   MOV.L       R6,@(8,R15)
    00001614 1F71                   MOV.L       R7,@(4,R15)
    00001616 E600                   MOV         #0,R6
    00001618 430B                   JSR         @R3
    0000161A E510                   MOV         #16,R5
      expression   916        StackNode->Next = *StackTop;
    0000161C 62F2                   MOV.L       @R15,R2
    0000161E 6403                   MOV         R0,R4
    00001620 6322                   MOV.L       @R2,R3
    00001622 2432                   MOV.L       R3,@R4
      expression   917        StackNode->Order = Order;
    00001624 84FB                   MOV.B       @(11,R15),R0
    00001626 804E                   MOV.B       R0,@(14,R4)
      expression   918        StackNode->Op = Token;
    00001628 53F1                   MOV.L       @(4,R15),R3
    0000162A 1432                   MOV.L       R3,@(8,R4)
      expression   919        StackNode->Precedence = Precedence;
    0000162C 85F9                   MOV.W       @(18,R15),R0
    0000162E 8146                   MOV.W       R0,@(12,R4)
      expression   920        *StackTop = StackNode;
    00001630 63F2                   MOV.L       @R15,R3
    00001632 2342                   MOV.L       R4,@R3
      expression   921    #ifdef FANCY_ERROR_MESSAGES
      expression   922        StackNode->Line = Parser->Line;
      expression   923        StackNode->CharacterPos = Parser->CharacterPos;
      expression   924    #endif
      expression   925    #ifdef DEBUG_EXPRESSIONS
      expression   926        ExpressionStackShow(*StackTop);
      expression   927    #endif
      expression   928    }
    00001634 7F0C                   ADD         #12,R15
    00001636 4F26                   LDS.L       @R15+,PR
    00001638 000B                   RTS
    0000163A 0009                   NOP
      expression   929    
      expression   930    /* do the '.' and '->' operators */
      expression   931    void ExpressionGetStructElement(struct ParseState *Parser, struct ExpressionStack **StackTop, enum LexToke
                         +n Token)
    0000163C              _ExpressionGetStructElement:     ; function: ExpressionGetStructElement
                                                           ; frame size=64
    0000163C 2FE6                   MOV.L       R14,@-R15
    0000163E 6E43                   MOV         R4,R14
      expression   932    {
      expression   933        struct Value *Ident;
      expression   934        
      expression   935        /* get the identifier following the '.' or '->' */
      expression   936        if (LexGetToken(Parser, &Ident, TRUE) != TokenIdentifier)
    00001640 D310                   MOV.L       L1603+18,R3; _LexGetToken
    00001642 2FD6                   MOV.L       R13,@-R15
    00001644 2FC6                   MOV.L       R12,@-R15
    00001646 6C63                   MOV         R6,R12
    00001648 2FB6                   MOV.L       R11,@-R15
    0000164A E601                   MOV         #1,R6
    0000164C 2FA6                   MOV.L       R10,@-R15
    0000164E 6B53                   MOV         R5,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001650 2F96                   MOV.L       R9,@-R15
    00001652 2F86                   MOV.L       R8,@-R15
    00001654 4F22                   STS.L       PR,@-R15
    00001656 7FF0                   ADD         #-16,R15
    00001658 D809                   MOV.L       L1603+14,R8; _ProgramFail
    0000165A 65F3                   MOV         R15,R5
    0000165C 430B                   JSR         @R3
    0000165E 750C                   ADD         #12,R5
    00001660 882D                   CMP/EQ      #45,R0
    00001662 891A                   BT          L1382
      expression   937            ProgramFail(Parser, "need an structure or union member after '%s'", (Token == TokenDot) ? "." : "-
                         +>");
    00001664 60C3                   MOV         R12,R0
    00001666 8829                   CMP/EQ      #41,R0
    00001668 8B10                   BF          L1383
    0000166A D207                   MOV.L       L1603+22,R2; L535
    0000166C 2F26                   MOV.L       R2,@-R15
    0000166E A00F                   BRA         L1384
    00001670 0009                   NOP
    00001672              L1603:                            
    00001672 4E20                   .DATA.W     H'4E20
    00001674 <00000000>             .DATA.L     _ExpressionPushInt
    00001678 <00000000>             .DATA.L     _abort
    0000167C <00000000>             .DATA.L     _VariableAlloc
    00001680 <00000000>             .DATA.L     _ProgramFail
    00001684 <00000000>             .DATA.L     _LexGetToken
    00001688 <00000000>             .DATA.L     L535
    0000168C              L1383:                            
    0000168C D343                   MOV.L       L1605,R3   ; L536
    0000168E 2F36                   MOV.L       R3,@-R15
    00001690              L1384:                            
    00001690 D143                   MOV.L       L1605+4,R1 ; L778
    00001692 2F16                   MOV.L       R1,@-R15
    00001694 480B                   JSR         @R8
    00001696 64E3                   MOV         R14,R4
    00001698 7F08                   ADD         #8,R15
    0000169A              L1382:                            
      expression   938    
      expression   939        if (Parser->Mode == RunModeRun)
    0000169A 53E3                   MOV.L       @(12,R14),R3
    0000169C 2338                   TST         R3,R3
    0000169E 8B73                   BF          L1385
      expression   940        { 
      expression   941            /* look up the struct element */
      expression   942            struct Value *ParamVal = (*StackTop)->Val;
    000016A0 6DB2                   MOV.L       @R11,R13
      expression   943            struct Value *StructVal = ParamVal;
      expression   944            struct ValueType *StructType = ParamVal->Typ;
      expression   945            char *DerefDataLoc = (char *)ParamVal->Val;
      expression   946            struct Value *MemberValue;
      expression   947            struct Value *Result;
      expression   948    
      expression   949            /* if we're doing '->' dereference the struct pointer first */
      expression   950            if (Token == TokenArrow)
    000016A2 60C3                   MOV         R12,R0
    000016A4 5DD1                   MOV.L       @(4,R13),R13
    000016A6 882A                   CMP/EQ      #42,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016A8 2FD2                   MOV.L       R13,@R15
    000016AA 63D2                   MOV.L       @R13,R3
    000016AC 1F32                   MOV.L       R3,@(8,R15)
    000016AE 59D1                   MOV.L       @(4,R13),R9
    000016B0 8F0D                   BF/S        L1386
    000016B2 EA00                   MOV         #0,R10
      expression   951                DerefDataLoc = VariableDereferencePointer(Parser, ParamVal, &StructVal, NULL, &StructType, NUL
                         +L);
    000016B4 2FA6                   MOV.L       R10,@-R15
    000016B6 E700                   MOV         #0,R7
    000016B8 D33A                   MOV.L       L1605+8,R3 ; _VariableDereferencePointer
    000016BA 65D3                   MOV         R13,R5
    000016BC 62F3                   MOV         R15,R2
    000016BE 720C                   ADD         #12,R2
    000016C0 2F26                   MOV.L       R2,@-R15
    000016C2 66F3                   MOV         R15,R6
    000016C4 7608                   ADD         #8,R6
    000016C6 430B                   JSR         @R3
    000016C8 64E3                   MOV         R14,R4
    000016CA 7F08                   ADD         #8,R15
    000016CC 6903                   MOV         R0,R9
    000016CE              L1386:                            
      expression   952            
      expression   953            if (StructType->Base != TypeStruct && StructType->Base != TypeUnion)
    000016CE 54F2                   MOV.L       @(8,R15),R4
    000016D0 6442                   MOV.L       @R4,R4
    000016D2 6043                   MOV         R4,R0
    000016D4 880D                   CMP/EQ      #13,R0
    000016D6 891B                   BT          L1387
    000016D8 6043                   MOV         R4,R0
    000016DA 880E                   CMP/EQ      #14,R0
    000016DC 8918                   BT          L1387
      expression   954                ProgramFail(Parser, "can't use '%s' on something that's not a struct or union %s : it's a %t",
                         + (Token == TokenDot) ? "." : "->", (Token == TokenArrow) ? "pointer" : "", ParamVal->Typ);
    000016DE 60C3                   MOV         R12,R0
    000016E0 63D2                   MOV.L       @R13,R3
    000016E2 882A                   CMP/EQ      #42,R0
    000016E4 8F04                   BF/S        L1388
    000016E6 2F36                   MOV.L       R3,@-R15
    000016E8 D32F                   MOV.L       L1605+12,R3; L787
    000016EA 2F36                   MOV.L       R3,@-R15
    000016EC A002                   BRA         L1390
    000016EE 0009                   NOP
    000016F0              L1388:                            
    000016F0 D22E                   MOV.L       L1605+16,R2; L788
    000016F2 2F26                   MOV.L       R2,@-R15
    000016F4              L1390:                            
    000016F4 60C3                   MOV         R12,R0
    000016F6 8829                   CMP/EQ      #41,R0
    000016F8 8B03                   BF          L1389
    000016FA D32D                   MOV.L       L1605+20,R3; L535
    000016FC 2F36                   MOV.L       R3,@-R15
    000016FE A002                   BRA         L1391
    00001700 0009                   NOP
    00001702              L1389:                            
    00001702 D226                   MOV.L       L1605,R2   ; L536
    00001704 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001706              L1391:                            
    00001706 D12B                   MOV.L       L1605+24,R1; L786
    00001708 2F16                   MOV.L       R1,@-R15
    0000170A 480B                   JSR         @R8
    0000170C 64E3                   MOV         R14,R4
    0000170E 7F10                   ADD         #16,R15
    00001710              L1387:                            
      expression   955                
      expression   956            if (!TableGet(StructType->Members, Ident->Val->Identifier, &MemberValue, NULL, NULL, NULL))
    00001710 2FA6                   MOV.L       R10,@-R15
    00001712 E700                   MOV         #0,R7
    00001714 D328                   MOV.L       L1605+28,R3; _TableGet
    00001716 2FA6                   MOV.L       R10,@-R15
    00001718 55F5                   MOV.L       @(20,R15),R5
    0000171A 66F3                   MOV         R15,R6
    0000171C 54F4                   MOV.L       @(16,R15),R4
    0000171E 760C                   ADD         #12,R6
    00001720 5551                   MOV.L       @(4,R5),R5
    00001722 6552                   MOV.L       @R5,R5
    00001724 430B                   JSR         @R3
    00001726 5448                   MOV.L       @(32,R4),R4
    00001728 2008                   TST         R0,R0
    0000172A 8F09                   BF/S        L1392
    0000172C 7F08                   ADD         #8,R15
      expression   957                ProgramFail(Parser, "doesn't have a member called '%s'", Ident->Val->Identifier);
    0000172E 53F3                   MOV.L       @(12,R15),R3
    00001730 5231                   MOV.L       @(4,R3),R2
    00001732 6122                   MOV.L       @R2,R1
    00001734 D321                   MOV.L       L1605+32,R3; L789
    00001736 2F16                   MOV.L       R1,@-R15
    00001738 2F36                   MOV.L       R3,@-R15
    0000173A 480B                   JSR         @R8
    0000173C 64E3                   MOV         R14,R4
    0000173E 7F08                   ADD         #8,R15
    00001740              L1392:                            
      expression   958            
      expression   959            /* pop the value - assume it'll still be there until we're done */
      expression   960            HeapPopStack(ParamVal, sizeof(struct ExpressionStack) + sizeof(struct Value) + TypeStackSizeValue(
                         +StructVal));
    00001740 D31F                   MOV.L       L1605+36,R3; _TypeStackSizeValue
    00001742 430B                   JSR         @R3
    00001744 64F2                   MOV.L       @R15,R4
    00001746 6503                   MOV         R0,R5
    00001748 D21E                   MOV.L       L1605+40,R2; _HeapPopStack
    0000174A 7520                   ADD         #32,R5
    0000174C 420B                   JSR         @R2
    0000174E 64D3                   MOV         R13,R4
      expression   961            *StackTop = (*StackTop)->Next;
    00001750 63B2                   MOV.L       @R11,R3
    00001752 6232                   MOV.L       @R3,R2
    00001754 2B22                   MOV.L       R2,@R11
      expression   962            
      expression   963            /* make the result value for this member only */
      expression   964            Result = VariableAllocValueFromExistingData(Parser, MemberValue->Typ, (void *)(DerefDataLoc + Memb
                         +erValue->Val->Integer), TRUE, (StructVal != NULL) ? StructVal->LValueFrom : NULL);
    00001756 63F2                   MOV.L       @R15,R3
    00001758 2338                   TST         R3,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000175A 8D04                   BT/S        L1393
    0000175C E701                   MOV         #1,R7
    0000175E 63F2                   MOV.L       @R15,R3
    00001760 5232                   MOV.L       @(8,R3),R2
    00001762 A002                   BRA         L1394
    00001764 2F26                   MOV.L       R2,@-R15
    00001766              L1393:                            
    00001766 E100                   MOV         #0,R1
    00001768 2F16                   MOV.L       R1,@-R15
    0000176A              L1394:                            
    0000176A 56F2                   MOV.L       @(8,R15),R6
    0000176C 55F2                   MOV.L       @(8,R15),R5
    0000176E 5661                   MOV.L       @(4,R6),R6
    00001770 6552                   MOV.L       @R5,R5
    00001772 6662                   MOV.L       @R6,R6
    00001774 D314                   MOV.L       L1605+44,R3; _VariableAllocValueFromExistingData
    00001776 369C                   ADD         R9,R6
    00001778 430B                   JSR         @R3
    0000177A 64E3                   MOV         R14,R4
      expression   965            ExpressionStackPushValueNode(Parser, StackTop, Result);
    0000177C D213                   MOV.L       L1605+48,R2; _ExpressionStackPushValueNode
    0000177E 7F04                   ADD         #4,R15
    00001780 6603                   MOV         R0,R6
    00001782 65B3                   MOV         R11,R5
    00001784 420B                   JSR         @R2
    00001786 64E3                   MOV         R14,R4
    00001788              L1385:                            
      expression   966        }
      expression   967    }
    00001788 7F10                   ADD         #16,R15
    0000178A 4F26                   LDS.L       @R15+,PR
    0000178C 68F6                   MOV.L       @R15+,R8
    0000178E 69F6                   MOV.L       @R15+,R9
    00001790 6AF6                   MOV.L       @R15+,R10
    00001792 6BF6                   MOV.L       @R15+,R11
    00001794 6CF6                   MOV.L       @R15+,R12
    00001796 6DF6                   MOV.L       @R15+,R13
    00001798 000B                   RTS
    0000179A 6EF6                   MOV.L       @R15+,R14
    0000179C              L1605:                            
    0000179C <00000000>             .DATA.L     L536
    000017A0 <00000000>             .DATA.L     L778
    000017A4 <00000000>             .DATA.L     _VariableDereferencePointer
    000017A8 <00000000>             .DATA.L     L787
    000017AC <00000000>             .DATA.L     L788
    000017B0 <00000000>             .DATA.L     L535
    000017B4 <00000000>             .DATA.L     L786
    000017B8 <00000000>             .DATA.L     _TableGet
    000017BC <00000000>             .DATA.L     L789
    000017C0 <00000000>             .DATA.L     _TypeStackSizeValue
    000017C4 <00000000>             .DATA.L     _HeapPopStack
    000017C8 <00000000>             .DATA.L     _VariableAllocValueFromExistingData
    000017CC <00000000>             .DATA.L     _ExpressionStackPushValueNode
      expression   968    
      expression   969    /* parse an expression with operator precedence */
      expression   970    int ExpressionParse(struct ParseState *Parser, struct Value **Result)
    000017D0              _ExpressionParse:                ; function: ExpressionParse




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=160
                                                           ; used runtime library name:
                                                           ; __bfxlu
    000017D0 2FE6                   MOV.L       R14,@-R15
    000017D2 6E43                   MOV         R4,R14
      expression   971    {
      expression   972        struct Value *LexValue;
      expression   973        int PrefixState = TRUE;
      expression   974        int Done = FALSE;
      expression   975        int BracketPrecedence = 0;
      expression   976        int LocalPrecedence;
      expression   977        int Precedence = 0;
      expression   978        int IgnorePrecedence = DEEP_PRECEDENCE;
    000017D4 9395                   MOV.W       L1606,R3   ; H'4E20
    000017D6 2FD6                   MOV.L       R13,@-R15
    000017D8 2FC6                   MOV.L       R12,@-R15
    000017DA 2FB6                   MOV.L       R11,@-R15
    000017DC 2FA6                   MOV.L       R10,@-R15
    000017DE EA00                   MOV         #0,R10
    000017E0 DB48                   MOV.L       L1606+2,R11; _ProgramFail
    000017E2 6CA3                   MOV         R10,R12
    000017E4 2F96                   MOV.L       R9,@-R15
    000017E6 69A3                   MOV         R10,R9
    000017E8 2F86                   MOV.L       R8,@-R15
    000017EA E801                   MOV         #1,R8
    000017EC 4F22                   STS.L       PR,@-R15
    000017EE 7F88                   ADD         #-120,R15
    000017F0 1F5B                   MOV.L       R5,@(44,R15)
    000017F2 1FAD                   MOV.L       R10,@(52,R15)
    000017F4 1F31                   MOV.L       R3,@(4,R15)
      expression   979        struct ExpressionStack *StackTop = NULL;
    000017F6 2FA2                   MOV.L       R10,@R15
      expression   980        int TernaryDepth = 0;
    000017F8 1FA5                   MOV.L       R10,@(20,R15)
    000017FA D343                   MOV.L       L1606+6,R3 ; H'00000130+__$OperatorPrecedence
    000017FC 1F3C                   MOV.L       R3,@(48,R15)
      expression   981        
      expression   982        do
    000017FE              L1395:                            
      expression   983        {
      expression   984            struct ParseState PreState;
      expression   985            enum LexToken Token;
      expression   986    
      expression   987            ParserCopy(&PreState, Parser);
    000017FE 65E3                   MOV         R14,R5
    00001800 D342                   MOV.L       L1606+10,R3; _ParserCopy
    00001802 64F3                   MOV         R15,R4
    00001804 430B                   JSR         @R3
    00001806 7458                   ADD         #88,R4
      expression   988            Token = LexGetToken(Parser, &LexValue, TRUE);
    00001808 D241                   MOV.L       L1606+14,R2; _LexGetToken
    0000180A E601                   MOV         #1,R6
    0000180C 65F3                   MOV         R15,R5
    0000180E 7510                   ADD         #16,R5
    00001810 420B                   JSR         @R2
    00001812 64E3                   MOV         R14,R4
    00001814 6D03                   MOV         R0,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression   989            if ( ( ( (int)Token > TokenComma && (int)Token <= (int)TokenOpenBracket) || 
      expression   990                   (Token == TokenCloseBracket && BracketPrecedence != 0)) && 
      expression   991                   (Token != TokenColon || TernaryDepth > 0) )
    00001816 E301                   MOV         #1,R3
    00001818 3D37                   CMP/GT      R3,R13
    0000181A 8B02                   BF          L1398
    0000181C E12B                   MOV         #43,R1
    0000181E 3D17                   CMP/GT      R1,R13
    00001820 8B08                   BF          L1397
    00001822              L1398:                            
    00001822 60D3                   MOV         R13,R0
    00001824 882C                   CMP/EQ      #44,R0
    00001826 8901                   BT          L1607
    00001828 A15B                   BRA         L1396
    0000182A 0009                   NOP
    0000182C              L1607:                            
    0000182C 2998                   TST         R9,R9
    0000182E 8B01                   BF          L1608
    00001830 A157                   BRA         L1396
    00001832 0009                   NOP
    00001834              L1608:                            
    00001834              L1397:                            
    00001834 60D3                   MOV         R13,R0
    00001836 880E                   CMP/EQ      #14,R0
    00001838 8B04                   BF          L1399
    0000183A 52F5                   MOV.L       @(20,R15),R2
    0000183C 4215                   CMP/PL      R2
    0000183E 8901                   BT          L1609
    00001840 A14F                   BRA         L1396
    00001842 0009                   NOP
    00001844              L1609:                            
    00001844              L1399:                            
    00001844 D333                   MOV.L       L1606+18,R3; __$OperatorPrecedence
    00001846 61D3                   MOV         R13,R1
    00001848 4108                   SHLL2       R1
    0000184A 4100                   SHLL        R1
    0000184C 313C                   ADD         R3,R1
    0000184E 2888                   TST         R8,R8
    00001850 8F02                   BF/S        L1610
    00001852 1F13                   MOV.L       R1,@(12,R15)
    00001854 A092                   BRA         L1400
    00001856 0009                   NOP
    00001858              L1610:                            
      expression   992            { 
      expression   993                /* it's an operator with precedence */
      expression   994                if (PrefixState)
      expression   995                { 
      expression   996                    /* expect a prefix operator */
      expression   997                    if (OperatorPrecedence[(int)Token].PrefixPrecedence == 0)
    00001858 D32F                   MOV.L       L1606+22,R3; __bfxlu
    0000185A 6213                   MOV         R1,R2
    0000185C 430B                   JSR         @R3
    0000185E E104                   MOV         #4,R1
    00001860 2008                   TST         R0,R0
    00001862 8B04                   BF          L1401
      expression   998                        ProgramFail(Parser, "operator not expected here");
    00001864 D12D                   MOV.L       L1606+26,R1; L807




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001866 2F16                   MOV.L       R1,@-R15
    00001868 4B0B                   JSR         @R11
    0000186A 64E3                   MOV         R14,R4
    0000186C 7F04                   ADD         #4,R15
    0000186E              L1401:                            
      expression   999                    
      expression  1000                    LocalPrecedence = OperatorPrecedence[(int)Token].PrefixPrecedence;
    0000186E 62D3                   MOV         R13,R2
    00001870 D128                   MOV.L       L1606+18,R1; __$OperatorPrecedence
    00001872 4208                   SHLL2       R2
    00001874 D328                   MOV.L       L1606+22,R3; __bfxlu
    00001876 4200                   SHLL        R2
    00001878 321C                   ADD         R1,R2
    0000187A 430B                   JSR         @R3
    0000187C E104                   MOV         #4,R1
    0000187E 6403                   MOV         R0,R4
      expression  1001                    Precedence = BracketPrecedence + LocalPrecedence;
    00001880 6C93                   MOV         R9,R12
      expression  1002    
      expression  1003                    if (Token == TokenOpenBracket)
    00001882 60D3                   MOV         R13,R0
    00001884 882B                   CMP/EQ      #43,R0
    00001886 8F6A                   BF/S        L1402
    00001888 3C4C                   ADD         R4,R12
      expression  1004                    { 
      expression  1005                        /* it's either a new bracket level or a cast */
      expression  1006                        enum LexToken BracketToken = LexGetToken(Parser, &LexValue, FALSE);
    0000188A E600                   MOV         #0,R6
    0000188C D220                   MOV.L       L1606+14,R2; _LexGetToken
    0000188E 65F3                   MOV         R15,R5
    00001890 7510                   ADD         #16,R5
    00001892 420B                   JSR         @R2
    00001894 64E3                   MOV         R14,R4
    00001896 6403                   MOV         R0,R4
      expression  1007                        if (IS_TYPE_TOKEN(BracketToken) && (StackTop == NULL || StackTop->Op != TokenSizeof) )
    00001898 E336                   MOV         #54,R3
    0000189A 3433                   CMP/GE      R3,R4
    0000189C 8901                   BT          L1611
    0000189E A118                   BRA         L948
    000018A0 0009                   NOP
    000018A2              L1611:                            
    000018A2 E145                   MOV         #69,R1
    000018A4 3417                   CMP/GT      R1,R4
    000018A6 8B01                   BF          L1612
    000018A8 A113                   BRA         L948
    000018AA 0009                   NOP
    000018AC              L1612:                            
    000018AC 60F2                   MOV.L       @R15,R0
    000018AE 2008                   TST         R0,R0
    000018B0 8905                   BT          L1404
    000018B2 60F2                   MOV.L       @R15,R0
    000018B4 5002                   MOV.L       @(8,R0),R0
    000018B6 8825                   CMP/EQ      #37,R0
    000018B8 8B01                   BF          L1613
    000018BA A10A                   BRA         L948
    000018BC 0009                   NOP
    000018BE              L1613:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000018BE              L1404:                            
      expression  1008                        {
      expression  1009                            /* it's a cast - get the new type */
      expression  1010                            struct ValueType *CastType;
      expression  1011                            char *CastIdentifier;
      expression  1012                            struct Value *CastTypeValue;
      expression  1013                            
      expression  1014                            TypeParse(Parser, &CastType, &CastIdentifier, NULL);
    000018BE E700                   MOV         #0,R7
    000018C0 D317                   MOV.L       L1606+30,R3; _TypeParse
    000018C2 66F3                   MOV         R15,R6
    000018C4 7628                   ADD         #40,R6
    000018C6 65F3                   MOV         R15,R5
    000018C8 7520                   ADD         #32,R5
    000018CA 430B                   JSR         @R3
    000018CC 64E3                   MOV         R14,R4
      expression  1015                            if (LexGetToken(Parser, &LexValue, TRUE) != TokenCloseBracket)
    000018CE E601                   MOV         #1,R6
    000018D0 D20F                   MOV.L       L1606+14,R2; _LexGetToken
    000018D2 65F3                   MOV         R15,R5
    000018D4 7510                   ADD         #16,R5
    000018D6 420B                   JSR         @R2
    000018D8 64E3                   MOV         R14,R4
    000018DA 882C                   CMP/EQ      #44,R0
    000018DC 8904                   BT          L1405
      expression  1016                                ProgramFail(Parser, "brackets not closed");
    000018DE D211                   MOV.L       L1606+34,R2; L814
    000018E0 2F26                   MOV.L       R2,@-R15
    000018E2 4B0B                   JSR         @R11
    000018E4 64E3                   MOV         R14,R4
    000018E6 7F04                   ADD         #4,R15
    000018E8              L1405:                            
      expression  1017                            
      expression  1018                            /* scan and collapse the stack to the precedence of this infix cast operator, then
                         + push */
      expression  1019                            Precedence = BracketPrecedence + OperatorPrecedence[(int)TokenCast].PrefixPreceden
                         +ce;
    000018E8 52FC                   MOV.L       @(48,R15),R2
    000018EA D30B                   MOV.L       L1606+22,R3; __bfxlu
    000018EC 430B                   JSR         @R3
    000018EE E104                   MOV         #4,R1
    000018F0 6C93                   MOV         R9,R12
    000018F2 3C0C                   ADD         R0,R12
      expression  1020    
      expression  1021                            ExpressionStackCollapse(Parser, &StackTop, Precedence+1, &IgnorePrecedence);
    000018F4 67F3                   MOV         R15,R7
    000018F6 7704                   ADD         #4,R7
    000018F8 66C3                   MOV         R12,R6
    000018FA 7601                   ADD         #1,R6
    000018FC 65F3                   MOV         R15,R5
    000018FE A013                   BRA         L1563
    00001900 64E3                   MOV         R14,R4
    00001902              L1606:                            
    00001902 4E20                   .DATA.W     H'4E20
    00001904 <00000000>             .DATA.L     _ProgramFail
    00001908 <00000130>             .DATA.L     H'00000130+__$OperatorPrecedence
    0000190C <00000000>             .DATA.L     _ParserCopy




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001910 <00000000>             .DATA.L     _LexGetToken
    00001914 <00000000>             .DATA.L     __$OperatorPrecedence
    00001918 <00000000>             .DATA.L     __bfxlu
    0000191C <00000000>             .DATA.L     L807
    00001920 <00000000>             .DATA.L     _TypeParse
    00001924 <00000000>             .DATA.L     L814
    00001928              L1563:                            
    00001928 BDA0                   BSR         _ExpressionStackCollapse
    0000192A 0009                   NOP
      expression  1022                            CastTypeValue = VariableAllocValueFromType(Parser, &TypeType, FALSE, NULL, FALSE);
    0000192C 2FA6                   MOV.L       R10,@-R15
    0000192E E700                   MOV         #0,R7
    00001930 D536                   MOV.L       L1614+2,R5 ; _TypeType
    00001932 6673                   MOV         R7,R6
    00001934 D336                   MOV.L       L1614+6,R3 ; _VariableAllocValueFromType
    00001936 430B                   JSR         @R3
    00001938 64E3                   MOV         R14,R4
    0000193A 6603                   MOV         R0,R6
      expression  1023                            CastTypeValue->Val->Typ = CastType;
    0000193C 53F9                   MOV.L       @(36,R15),R3
      expression  1024                            ExpressionStackPushValueNode(Parser, &StackTop, CastTypeValue);
    0000193E 65F3                   MOV         R15,R5
    00001940 5261                   MOV.L       @(4,R6),R2
    00001942 7504                   ADD         #4,R5
    00001944 2232                   MOV.L       R3,@R2
    00001946 D333                   MOV.L       L1614+10,R3; _ExpressionStackPushValueNode
    00001948 430B                   JSR         @R3
    0000194A 64E3                   MOV         R14,R4
      expression  1025                            ExpressionStackPushOperator(Parser, &StackTop, OrderInfix, TokenCast, Precedence);
    0000194C 2FC6                   MOV.L       R12,@-R15
    0000194E E726                   MOV         #38,R7
    00001950 E602                   MOV         #2,R6
    00001952 65F3                   MOV         R15,R5
    00001954 7508                   ADD         #8,R5
    00001956 BE58                   BSR         _ExpressionStackPushOperator
    00001958 64E3                   MOV         R14,R4
    0000195A A1BA                   BRA         L1430
    0000195C 7F08                   ADD         #8,R15
    0000195E              L1402:                            
      expression  1026                        }
      expression  1027                        else
      expression  1028                        {
      expression  1029                            /* boost the bracket operator precedence */
      expression  1030                            BracketPrecedence += BRACKET_PRECEDENCE;
      expression  1031                        }
      expression  1032                    }
      expression  1033                    else
      expression  1034                    { 
      expression  1035                        /* scan and collapse the stack to the precedence of this operator, then push */
      expression  1036                        ExpressionStackCollapse(Parser, &StackTop, Precedence, &IgnorePrecedence);
    0000195E 67F3                   MOV         R15,R7
    00001960 7704                   ADD         #4,R7
    00001962 66C3                   MOV         R12,R6
    00001964 65F3                   MOV         R15,R5
    00001966 BD81                   BSR         _ExpressionStackCollapse
    00001968 64E3                   MOV         R14,R4
      expression  1037                        ExpressionStackPushOperator(Parser, &StackTop, OrderPrefix, Token, Precedence);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000196A 67D3                   MOV         R13,R7
    0000196C 2FC6                   MOV.L       R12,@-R15
    0000196E E601                   MOV         #1,R6
    00001970 65F3                   MOV         R15,R5
    00001972 7504                   ADD         #4,R5
    00001974 BE49                   BSR         _ExpressionStackPushOperator
    00001976 64E3                   MOV         R14,R4
    00001978 A1AB                   BRA         L1430
    0000197A 7F04                   ADD         #4,R15
    0000197C              L1400:                            
      expression  1038                    }
      expression  1039                }
      expression  1040                else
      expression  1041                { 
      expression  1042                    /* expect an infix or postfix operator */
      expression  1043                    if (OperatorPrecedence[(int)Token].PostfixPrecedence != 0)
    0000197C 6013                   MOV         R1,R0
    0000197E 6000                   MOV.B       @R0,R0
    00001980 C80F                   TST         #15,R0
    00001982 8926                   BT          L1409
      expression  1044                    {
      expression  1045                        switch (Token)
    00001984 60D3                   MOV         R13,R0
    00001986 882C                   CMP/EQ      #44,R0
    00001988 8903                   BT          L1151
    0000198A 8828                   CMP/EQ      #40,R0
    0000198C 8901                   BT          L1152
    0000198E A00C                   BRA         L1153
    00001990 0009                   NOP
    00001992              L1151:                           ; case label 
      expression  1046                        {
      expression  1047                            case TokenCloseBracket:
      expression  1048                            case TokenRightSquareBracket:
    00001992              L1152:                           ; case label 
      expression  1049                                if (BracketPrecedence == 0)
    00001992 2998                   TST         R9,R9
    00001994 8B01                   BF          L1615
    00001996 A195                   BRA         L949
    00001998 0009                   NOP
    0000199A              L1615:                            
      expression  1050                                { 
      expression  1051                                    /* assume this bracket is after the end of the expression */
      expression  1052                                    ParserCopy(Parser, &PreState);
      expression  1053                                    Done = TRUE;
      expression  1054                                }
      expression  1055                                else
      expression  1056                                {
      expression  1057                                    /* collapse to the bracket precedence */
      expression  1058                                    ExpressionStackCollapse(Parser, &StackTop, BracketPrecedence, &IgnorePrece
                         +dence);
    0000199A 67F3                   MOV         R15,R7
    0000199C 7704                   ADD         #4,R7
    0000199E 6693                   MOV         R9,R6
    000019A0 65F3                   MOV         R15,R5
    000019A2 BD63                   BSR         _ExpressionStackCollapse
    000019A4 64E3                   MOV         R14,R4
      expression  1059                                    BracketPrecedence -= BRACKET_PRECEDENCE;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression  1060                                }    
      expression  1061                                break;
    000019A6 A194                   BRA         L1430
    000019A8 79EC                   ADD         #-20,R9
    000019AA              L1153:                           ; default label 
      expression  1062                        
      expression  1063                            default:
      expression  1064                                /* scan and collapse the stack to the precedence of this operator, then push *
                         +/
      expression  1065                                Precedence = BracketPrecedence + OperatorPrecedence[(int)Token].PostfixPrecede
                         +nce;
    000019AA 6C93                   MOV         R9,R12
    000019AC 50F3                   MOV.L       @(12,R15),R0
      expression  1066                                ExpressionStackCollapse(Parser, &StackTop, Precedence, &IgnorePrecedence);
    000019AE 67F3                   MOV         R15,R7
    000019B0 6000                   MOV.B       @R0,R0
    000019B2 65F3                   MOV         R15,R5
    000019B4 C90F                   AND         #15,R0
    000019B6 3C0C                   ADD         R0,R12
    000019B8 7704                   ADD         #4,R7
    000019BA 66C3                   MOV         R12,R6
    000019BC BD56                   BSR         _ExpressionStackCollapse
    000019BE 64E3                   MOV         R14,R4
      expression  1067                                ExpressionStackPushOperator(Parser, &StackTop, OrderPostfix, Token, Precedence
                         +);
    000019C0 2FC6                   MOV.L       R12,@-R15
    000019C2 67D3                   MOV         R13,R7
    000019C4 E603                   MOV         #3,R6
    000019C6 65F3                   MOV         R15,R5
    000019C8 7504                   ADD         #4,R5
    000019CA BE1E                   BSR         _ExpressionStackPushOperator
    000019CC 64E3                   MOV         R14,R4
      expression  1068                                break;
    000019CE A180                   BRA         L1430
    000019D0 7F04                   ADD         #4,R15
    000019D2              L1409:                            
      expression  1069                        }
      expression  1070                    }
      expression  1071                    else if (OperatorPrecedence[(int)Token].InfixPrecedence != 0)
    000019D2 911A                   MOV.W       L1614,R1   ; H'0804
    000019D4 D310                   MOV.L       L1614+14,R3; __bfxlu
    000019D6 430B                   JSR         @R3
    000019D8 52F3                   MOV.L       @(12,R15),R2
    000019DA 2008                   TST         R0,R0
    000019DC 897B                   BT          L1414
      expression  1072                    { 
      expression  1073                        /* scan and collapse the stack, then push */
      expression  1074                        Precedence = BracketPrecedence + OperatorPrecedence[(int)Token].InfixPrecedence;
    000019DE 9114                   MOV.W       L1614,R1   ; H'0804
    000019E0 D30D                   MOV.L       L1614+14,R3; __bfxlu
    000019E2 430B                   JSR         @R3
    000019E4 52F3                   MOV.L       @(12,R15),R2
    000019E6 6C93                   MOV         R9,R12
      expression  1075                        
      expression  1076                        /* for right to left order, only go down to the next higher precedence so we evaluate 
                         +it in reverse order */
      expression  1077                        /* for left to right order, collapse down to this precedence so we evaluate it in forw




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +ard order */
      expression  1078                        if (IS_LEFT_TO_RIGHT(OperatorPrecedence[(int)Token].InfixPrecedence))
    000019E8 910F                   MOV.W       L1614,R1   ; H'0804
    000019EA 3C0C                   ADD         R0,R12
    000019EC D30A                   MOV.L       L1614+14,R3; __bfxlu
    000019EE 430B                   JSR         @R3
    000019F0 52F3                   MOV.L       @(12,R15),R2
    000019F2 8802                   CMP/EQ      #2,R0
    000019F4 8912                   BT          L1415
    000019F6 9108                   MOV.W       L1614,R1   ; H'0804
    000019F8 D307                   MOV.L       L1614+14,R3; __bfxlu
    000019FA 430B                   JSR         @R3
    000019FC 52F3                   MOV.L       @(12,R15),R2
    000019FE 880E                   CMP/EQ      #14,R0
    00001A00 890C                   BT          L1415
      expression  1079                            ExpressionStackCollapse(Parser, &StackTop, Precedence, &IgnorePrecedence);
    00001A02 67F3                   MOV         R15,R7
    00001A04 7704                   ADD         #4,R7
    00001A06 A00D                   BRA         L1561
    00001A08 66C3                   MOV         R12,R6
    00001A0A              L1614:                            
    00001A0A 0804                   .DATA.W     H'0804
    00001A0C <00000000>             .DATA.L     _TypeType
    00001A10 <00000000>             .DATA.L     _VariableAllocValueFromType
    00001A14 <00000000>             .DATA.L     _ExpressionStackPushValueNode
    00001A18 <00000000>             .DATA.L     __bfxlu
    00001A1C              L1415:                            
      expression  1080                        else
      expression  1081                            ExpressionStackCollapse(Parser, &StackTop, Precedence+1, &IgnorePrecedence);
    00001A1C 67F3                   MOV         R15,R7
    00001A1E 7704                   ADD         #4,R7
    00001A20 66C3                   MOV         R12,R6
    00001A22 7601                   ADD         #1,R6
    00001A24              L1561:                            
    00001A24 65F3                   MOV         R15,R5
    00001A26 BD21                   BSR         _ExpressionStackCollapse
    00001A28 64E3                   MOV         R14,R4
      expression  1082                            
      expression  1083                        if (Token == TokenDot || Token == TokenArrow)
    00001A2A 60D3                   MOV         R13,R0
    00001A2C 8829                   CMP/EQ      #41,R0
    00001A2E 8902                   BT          L1418
    00001A30 60D3                   MOV         R13,R0
    00001A32 882A                   CMP/EQ      #42,R0
    00001A34 8B05                   BF          L1417
    00001A36              L1418:                            
      expression  1084                        {
      expression  1085                            ExpressionGetStructElement(Parser, &StackTop, Token); /* this operator is followed
                         + by a struct element so handle it as a special case */
    00001A36 66D3                   MOV         R13,R6
    00001A38 65F3                   MOV         R15,R5
    00001A3A BDFF                   BSR         _ExpressionGetStructElement
    00001A3C 64E3                   MOV         R14,R4
    00001A3E A043                   BRA         L1419
    00001A40 0009                   NOP
    00001A42              L1417:                            
      expression  1086                        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression  1087                        else
      expression  1088                        { 
      expression  1089                            /* if it's a && or || operator we may not need to evaluate the right hand side of 
                         +the expression */
      expression  1090                            if ( (Token == TokenLogicalOr || Token == TokenLogicalAnd) && IS_NUMERIC_COERCIBLE
                         +(StackTop->Val))
    00001A42 880F                   CMP/EQ      #15,R0
    00001A44 8902                   BT          L1421
    00001A46 60D3                   MOV         R13,R0
    00001A48 8810                   CMP/EQ      #16,R0
    00001A4A 8B26                   BF          L1420
    00001A4C              L1421:                            
    00001A4C 62F2                   MOV.L       @R15,R2
    00001A4E 5321                   MOV.L       @(4,R2),R3
    00001A50 6132                   MOV.L       @R3,R1
    00001A52 E201                   MOV         #1,R2
    00001A54 6012                   MOV.L       @R1,R0
    00001A56 3023                   CMP/GE      R2,R0
    00001A58 8B06                   BF          L1423
    00001A5A 61F2                   MOV.L       @R15,R1
    00001A5C 5311                   MOV.L       @(4,R1),R3
    00001A5E E107                   MOV         #7,R1
    00001A60 6032                   MOV.L       @R3,R0
    00001A62 6302                   MOV.L       @R0,R3
    00001A64 3317                   CMP/GT      R1,R3
    00001A66 8B05                   BF          L1422
    00001A68              L1423:                            
    00001A68 60F2                   MOV.L       @R15,R0
    00001A6A 5001                   MOV.L       @(4,R0),R0
    00001A6C 6002                   MOV.L       @R0,R0
    00001A6E 6002                   MOV.L       @R0,R0
    00001A70 8808                   CMP/EQ      #8,R0
    00001A72 8B12                   BF          L1420
    00001A74              L1422:                            
      expression  1091                            {
      expression  1092                                long LHSInt = ExpressionCoerceInteger(StackTop->Val);
    00001A74 64F2                   MOV.L       @R15,R4
    00001A76 D357                   MOV.L       L1616+2,R3 ; _ExpressionCoerceInteger
    00001A78 430B                   JSR         @R3
    00001A7A 5441                   MOV.L       @(4,R4),R4
    00001A7C 6403                   MOV         R0,R4
      expression  1093                                if ( ( (Token == TokenLogicalOr && LHSInt) || (Token == TokenLogicalAnd && !LH
                         +SInt) ) &&
      expression  1094                                     (IgnorePrecedence > Precedence) )
    00001A7E 60D3                   MOV         R13,R0
    00001A80 880F                   CMP/EQ      #15,R0
    00001A82 8B01                   BF          L1426
    00001A84 2448                   TST         R4,R4
    00001A86 8B04                   BF          L1425
    00001A88              L1426:                            
    00001A88 60D3                   MOV         R13,R0
    00001A8A 8810                   CMP/EQ      #16,R0
    00001A8C 8B05                   BF          L1420
    00001A8E 2448                   TST         R4,R4
    00001A90 8B03                   BF          L1420
    00001A92              L1425:                            
    00001A92 52F1                   MOV.L       @(4,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A94 32C7                   CMP/GT      R12,R2
    00001A96 8B00                   BF          L1420
      expression  1095                                    IgnorePrecedence = Precedence;
    00001A98 1FC1                   MOV.L       R12,@(4,R15)
    00001A9A              L1420:                            
      expression  1096                            }
      expression  1097                            
      expression  1098                            /* push the operator on the stack */
      expression  1099                            ExpressionStackPushOperator(Parser, &StackTop, OrderInfix, Token, Precedence);
    00001A9A 67D3                   MOV         R13,R7
    00001A9C 2FC6                   MOV.L       R12,@-R15
    00001A9E E602                   MOV         #2,R6
    00001AA0 65F3                   MOV         R15,R5
    00001AA2 7504                   ADD         #4,R5
    00001AA4 BDB1                   BSR         _ExpressionStackPushOperator
    00001AA6 64E3                   MOV         R14,R4
    00001AA8 7F04                   ADD         #4,R15
      expression  1100                            PrefixState = TRUE;
      expression  1101                            
      expression  1102                            switch (Token)
    00001AAA 60D3                   MOV         R13,R0
    00001AAC 880D                   CMP/EQ      #13,R0
    00001AAE 8D04                   BT/S        L1154
    00001AB0 E801                   MOV         #1,R8
    00001AB2 880E                   CMP/EQ      #14,R0
    00001AB4 8905                   BT          L1155
    00001AB6 A007                   BRA         L1419
    00001AB8 0009                   NOP
    00001ABA              L1154:                           ; case label 
      expression  1103                            {
      expression  1104                                case TokenQuestionMark: TernaryDepth++; break;
    00001ABA 52F5                   MOV.L       @(20,R15),R2
    00001ABC 7201                   ADD         #1,R2
    00001ABE A003                   BRA         L1419
    00001AC0 1F25                   MOV.L       R2,@(20,R15)
    00001AC2              L1155:                           ; case label 
      expression  1105                                case TokenColon: TernaryDepth--; break;
    00001AC2 51F5                   MOV.L       @(20,R15),R1
    00001AC4 71FF                   ADD         #-1,R1
    00001AC6 1F15                   MOV.L       R1,@(20,R15)
      expression  1106                                default: break;
    00001AC8              L1419:                            
      expression  1107                            }
      expression  1108                        }
      expression  1109    
      expression  1110                        /* treat an open square bracket as an infix array index operator followed by an open b
                         +racket */
      expression  1111                        if (Token == TokenLeftSquareBracket)
    00001AC8 60D3                   MOV         R13,R0
    00001ACA 8827                   CMP/EQ      #39,R0
    00001ACC 8901                   BT          L1617
    00001ACE A100                   BRA         L1430
    00001AD0 0009                   NOP
    00001AD2              L1617:                            
    00001AD2              L948:
      expression  1112                        { 
      expression  1113                            /* boost the bracket operator precedence, then push */




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression  1114                            BracketPrecedence += BRACKET_PRECEDENCE;
    00001AD2 A0FE                   BRA         L1430
    00001AD4 7914                   ADD         #20,R9
    00001AD6              L1414:                            
      expression  1115                        }
      expression  1116                    }
      expression  1117                    else
      expression  1118                        ProgramFail(Parser, "operator not expected here");
    00001AD6 D340                   MOV.L       L1616+6,R3 ; L807
    00001AD8 2F36                   MOV.L       R3,@-R15
    00001ADA 4B0B                   JSR         @R11
    00001ADC 64E3                   MOV         R14,R4
    00001ADE A0F8                   BRA         L1430
    00001AE0 7F04                   ADD         #4,R15
    00001AE2              L1396:                            
      expression  1119                }
      expression  1120            }
      expression  1121            else if (Token == TokenIdentifier)
    00001AE2 60D3                   MOV         R13,R0
    00001AE4 882D                   CMP/EQ      #45,R0
    00001AE6 8901                   BT          L1618
    00001AE8 A097                   BRA         L1431
    00001AEA 0009                   NOP
    00001AEC              L1618:                            
      expression  1122            { 
      expression  1123                /* it's a variable, function or a macro */
      expression  1124                if (!PrefixState)
    00001AEC 2888                   TST         R8,R8
    00001AEE 8B04                   BF          L1432
      expression  1125                    ProgramFail(Parser, "identifier not expected here");
    00001AF0 DD3A                   MOV.L       L1616+10,R13; L830
    00001AF2 2FD6                   MOV.L       R13,@-R15
    00001AF4 4B0B                   JSR         @R11
    00001AF6 64E3                   MOV         R14,R4
    00001AF8 7F04                   ADD         #4,R15
    00001AFA              L1432:                            
      expression  1126                    
      expression  1127                if (LexGetToken(Parser, NULL, FALSE) == TokenOpenBracket)
    00001AFA E600                   MOV         #0,R6
    00001AFC D338                   MOV.L       L1616+14,R3; _LexGetToken
    00001AFE 6563                   MOV         R6,R5
    00001B00 430B                   JSR         @R3
    00001B02 64E3                   MOV         R14,R4
    00001B04 882B                   CMP/EQ      #43,R0
    00001B06 8B10                   BF          L1433
      expression  1128                {
      expression  1129                    ExpressionParseFunctionCall(Parser, &StackTop, LexValue->Val->Identifier, Parser->Mode == 
                         +RunModeRun && Precedence < IgnorePrecedence);
    00001B08 53E3                   MOV.L       @(12,R14),R3
    00001B0A 2338                   TST         R3,R3
    00001B0C 8B04                   BF          L1434
    00001B0E 53F1                   MOV.L       @(4,R15),R3
    00001B10 3C33                   CMP/GE      R3,R12
    00001B12 8901                   BT          L1434
    00001B14 A001                   BRA         L1435
    00001B16 E701                   MOV         #1,R7
    00001B18              L1434:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B18 E700                   MOV         #0,R7
    00001B1A              L1435:                            
    00001B1A 65F3                   MOV         R15,R5
    00001B1C 56F4                   MOV.L       @(16,R15),R6
    00001B1E 5661                   MOV.L       @(4,R6),R6
    00001B20 6662                   MOV.L       @R6,R6
    00001B22 B209                   BSR         _ExpressionParseFunctionCall
    00001B24 64E3                   MOV         R14,R4
    00001B26 A070                   BRA         L1436
    00001B28 0009                   NOP
    00001B2A              L1433:                            
      expression  1130                }
      expression  1131                else
      expression  1132                {
      expression  1133                    if (Parser->Mode == RunModeRun && Precedence < IgnorePrecedence)
    00001B2A 53E3                   MOV.L       @(12,R14),R3
    00001B2C 2338                   TST         R3,R3
    00001B2E 8B67                   BF          L1437
    00001B30 53F1                   MOV.L       @(4,R15),R3
    00001B32 3C33                   CMP/GE      R3,R12
    00001B34 8964                   BT          L1437
      expression  1134                    {
      expression  1135                        struct Value *VariableValue = NULL;
      expression  1136                        
      expression  1137                        VariableGet(Parser, LexValue->Val->Identifier, &VariableValue);
    00001B36 66F3                   MOV         R15,R6
    00001B38 1FA2                   MOV.L       R10,@(8,R15)
    00001B3A 7608                   ADD         #8,R6
    00001B3C DD29                   MOV.L       L1616+18,R13; _VariableGet
    00001B3E 55F4                   MOV.L       @(16,R15),R5
    00001B40 5551                   MOV.L       @(4,R5),R5
    00001B42 6552                   MOV.L       @R5,R5
    00001B44 4D0B                   JSR         @R13
    00001B46 64E3                   MOV         R14,R4
      expression  1138                        if (VariableValue->Typ->Base == TypeMacro)
    00001B48 50F2                   MOV.L       @(8,R15),R0
    00001B4A 6002                   MOV.L       @R0,R0
    00001B4C 6002                   MOV.L       @R0,R0
    00001B4E 880A                   CMP/EQ      #10,R0
    00001B50 8B2D                   BF          L1438
      expression  1139                        {
      expression  1140                            /* evaluate a macro as a kind of simple subroutine */
      expression  1141                            struct ParseState MacroParser;
      expression  1142                            struct Value *MacroResult;
      expression  1143                            
      expression  1144                            ParserCopy(&MacroParser, &VariableValue->Val->MacroDef.Body);
    00001B52 64F3                   MOV         R15,R4
    00001B54 D324                   MOV.L       L1616+22,R3; _ParserCopy
    00001B56 55F2                   MOV.L       @(8,R15),R5
    00001B58 5551                   MOV.L       @(4,R5),R5
    00001B5A 7508                   ADD         #8,R5
    00001B5C 430B                   JSR         @R3
    00001B5E 7438                   ADD         #56,R4
      expression  1145                            if (VariableValue->Val->MacroDef.NumParams != 0)
    00001B60 52F2                   MOV.L       @(8,R15),R2
    00001B62 5321                   MOV.L       @(4,R2),R3
    00001B64 6132                   MOV.L       @R3,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B66 2118                   TST         R1,R1
    00001B68 8905                   BT          L1439
      expression  1146                                ProgramFail(&MacroParser, "macro arguments missing");
    00001B6A DD20                   MOV.L       L1616+26,R13; L838
    00001B6C 2FD6                   MOV.L       R13,@-R15
    00001B6E 64F3                   MOV         R15,R4
    00001B70 4B0B                   JSR         @R11
    00001B72 743C                   ADD         #60,R4
    00001B74 7F04                   ADD         #4,R15
    00001B76              L1439:                            
      expression  1147                                
      expression  1148                            if (!ExpressionParse(&MacroParser, &MacroResult) || LexGetToken(&MacroParser, NULL
                         +, FALSE) != TokenEndOfFunction)
    00001B76 65F3                   MOV         R15,R5
    00001B78 751C                   ADD         #28,R5
    00001B7A 64F3                   MOV         R15,R4
    00001B7C BE28                   BSR         _ExpressionParse
    00001B7E 7438                   ADD         #56,R4
    00001B80 2008                   TST         R0,R0
    00001B82 8907                   BT          L1441
    00001B84 D316                   MOV.L       L1616+14,R3; _LexGetToken
    00001B86 E600                   MOV         #0,R6
    00001B88 6563                   MOV         R6,R5
    00001B8A 64F3                   MOV         R15,R4
    00001B8C 430B                   JSR         @R3
    00001B8E 7438                   ADD         #56,R4
    00001B90 885F                   CMP/EQ      #95,R0
    00001B92 8905                   BT          L1440
    00001B94              L1441:                            
      expression  1149                                ProgramFail(&MacroParser, "expression expected");
    00001B94 DD16                   MOV.L       L1616+30,R13; L839
    00001B96 2FD6                   MOV.L       R13,@-R15
    00001B98 64F3                   MOV         R15,R4
    00001B9A 4B0B                   JSR         @R11
    00001B9C 743C                   ADD         #60,R4
    00001B9E 7F04                   ADD         #4,R15
    00001BA0              L1440:                            
      expression  1150                            
      expression  1151                            ExpressionStackPushValueNode(Parser, &StackTop, MacroResult);
    00001BA0 56F7                   MOV.L       @(28,R15),R6
    00001BA2 65F3                   MOV         R15,R5
    00001BA4 D313                   MOV.L       L1616+34,R3; _ExpressionStackPushValueNode
    00001BA6 430B                   JSR         @R3
    00001BA8 64E3                   MOV         R14,R4
    00001BAA A02E                   BRA         L1436
    00001BAC 0009                   NOP
    00001BAE              L1438:                            
      expression  1152                        }
      expression  1153                        else if (VariableValue->Typ == TypeVoid)
    00001BAE 53F2                   MOV.L       @(8,R15),R3
    00001BB0 6232                   MOV.L       @R3,R2
    00001BB2 2228                   TST         R2,R2
    00001BB4 8B05                   BF          L1443
      expression  1154                            ProgramFail(Parser, "a void value isn't much use here");
    00001BB6 DD10                   MOV.L       L1616+38,R13; L840
    00001BB8 2FD6                   MOV.L       R13,@-R15
    00001BBA 4B0B                   JSR         @R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   91


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001BBC 64E3                   MOV         R14,R4
    00001BBE A024                   BRA         L1436
    00001BC0 7F04                   ADD         #4,R15
    00001BC2              L1443:                            
      expression  1155                        else
      expression  1156                            ExpressionStackPushLValue(Parser, &StackTop, VariableValue, 0); /* it's a value va
                         +riable */
    00001BC2 E700                   MOV         #0,R7
    00001BC4 56F2                   MOV.L       @(8,R15),R6
    00001BC6 65F3                   MOV         R15,R5
    00001BC8 D30C                   MOV.L       L1616+42,R3; _ExpressionStackPushLValue
    00001BCA 430B                   JSR         @R3
    00001BCC 64E3                   MOV         R14,R4
    00001BCE A01C                   BRA         L1436
    00001BD0 0009                   NOP
    00001BD2              L1616:                            
    00001BD2 0000                   .DATA.W     0
    00001BD4 <00000000>             .DATA.L     _ExpressionCoerceInteger
    00001BD8 <00000000>             .DATA.L     L807
    00001BDC <00000000>             .DATA.L     L830
    00001BE0 <00000000>             .DATA.L     _LexGetToken
    00001BE4 <00000000>             .DATA.L     _VariableGet
    00001BE8 <00000000>             .DATA.L     _ParserCopy
    00001BEC <00000000>             .DATA.L     L838
    00001BF0 <00000000>             .DATA.L     L839
    00001BF4 <00000000>             .DATA.L     _ExpressionStackPushValueNode
    00001BF8 <00000000>             .DATA.L     L840
    00001BFC <00000000>             .DATA.L     _ExpressionStackPushLValue
    00001C00              L1437:                            
      expression  1157                    }
      expression  1158                    else /* push a dummy value */
      expression  1159                        ExpressionPushInt(Parser, &StackTop, 0);
    00001C00 D327                   MOV.L       L1619+2,R3 ; _ExpressionPushInt
    00001C02 E600                   MOV         #0,R6
    00001C04 65F3                   MOV         R15,R5
    00001C06 430B                   JSR         @R3
    00001C08 64E3                   MOV         R14,R4
    00001C0A              L1436:                            
      expression  1160                        
      expression  1161                }
      expression  1162    
      expression  1163                 /* if we've successfully ignored the RHS turn ignoring off */
      expression  1164                if (Precedence <= IgnorePrecedence)
    00001C0A 52F1                   MOV.L       @(4,R15),R2
    00001C0C 3C27                   CMP/GT      R2,R12
    00001C0E 8D02                   BT/S        L1446
      expression  1165                    IgnorePrecedence = DEEP_PRECEDENCE;
      expression  1166    
      expression  1167                PrefixState = FALSE;
    00001C10 68A3                   MOV         R10,R8
    00001C12 9144                   MOV.W       L1619,R1   ; H'4E20
    00001C14 1F11                   MOV.L       R1,@(4,R15)
    00001C16              L1446:                            
    00001C16 A05C                   BRA         L1430
    00001C18 0009                   NOP
    00001C1A              L1431:                            
      expression  1168            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   92


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression  1169            else if ((int)Token > TokenCloseBracket && (int)Token <= TokenCharacterConstant)
    00001C1A E42C                   MOV         #44,R4
    00001C1C 3D47                   CMP/GT      R4,R13
    00001C1E 8B11                   BF          L1448
    00001C20 E331                   MOV         #49,R3
    00001C22 3D37                   CMP/GT      R3,R13
    00001C24 890E                   BT          L1448
      expression  1170            { 
      expression  1171                /* it's a value of some sort, push it */
      expression  1172                if (!PrefixState)
    00001C26 2888                   TST         R8,R8
    00001C28 8B04                   BF          L1449
      expression  1173                    ProgramFail(Parser, "value not expected here");
    00001C2A DD1E                   MOV.L       L1619+6,R13; L842
    00001C2C 2FD6                   MOV.L       R13,@-R15
    00001C2E 4B0B                   JSR         @R11
    00001C30 64E3                   MOV         R14,R4
    00001C32 7F04                   ADD         #4,R15
    00001C34              L1449:                            
      expression  1174                    
      expression  1175                PrefixState = FALSE;
      expression  1176                ExpressionStackPushValue(Parser, &StackTop, LexValue);
    00001C34 56F4                   MOV.L       @(16,R15),R6
    00001C36 65F3                   MOV         R15,R5
    00001C38 D31B                   MOV.L       L1619+10,R3; _ExpressionStackPushValue
    00001C3A 68A3                   MOV         R10,R8
    00001C3C 430B                   JSR         @R3
    00001C3E 64E3                   MOV         R14,R4
    00001C40 A047                   BRA         L1430
    00001C42 0009                   NOP
    00001C44              L1448:                            
      expression  1177            }
      expression  1178            else if (IS_TYPE_TOKEN(Token))
    00001C44 E336                   MOV         #54,R3
    00001C46 3D33                   CMP/GE      R3,R13
    00001C48 8B3C                   BF          L949
    00001C4A E145                   MOV         #69,R1
    00001C4C 3D17                   CMP/GT      R1,R13
    00001C4E 8939                   BT          L949
      expression  1179            {
      expression  1180                /* it's a type. push it on the stack like a value. this is used in sizeof() */
      expression  1181                struct ValueType *Typ;
      expression  1182                char *Identifier;
      expression  1183                struct Value *TypeValue;
      expression  1184                
      expression  1185                if (!PrefixState)
    00001C50 2888                   TST         R8,R8
    00001C52 8B04                   BF          L1452
      expression  1186                    ProgramFail(Parser, "type not expected here");
    00001C54 DD15                   MOV.L       L1619+14,R13; L847
    00001C56 2FD6                   MOV.L       R13,@-R15
    00001C58 4B0B                   JSR         @R11
    00001C5A 64E3                   MOV         R14,R4
    00001C5C 7F04                   ADD         #4,R15
    00001C5E              L1452:                            
      expression  1187                    
      expression  1188                PrefixState = FALSE;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   93


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C5E 68A3                   MOV         R10,R8
      expression  1189                ParserCopy(Parser, &PreState);
    00001C60 D213                   MOV.L       L1619+18,R2; _ParserCopy
    00001C62 65F3                   MOV         R15,R5
    00001C64 7558                   ADD         #88,R5
    00001C66 420B                   JSR         @R2
    00001C68 64E3                   MOV         R14,R4
      expression  1190                TypeParse(Parser, &Typ, &Identifier, NULL);
    00001C6A E700                   MOV         #0,R7
    00001C6C D311                   MOV.L       L1619+22,R3; _TypeParse
    00001C6E 66F3                   MOV         R15,R6
    00001C70 7624                   ADD         #36,R6
    00001C72 65F3                   MOV         R15,R5
    00001C74 7518                   ADD         #24,R5
    00001C76 430B                   JSR         @R3
    00001C78 64E3                   MOV         R14,R4
      expression  1191                TypeValue = VariableAllocValueFromType(Parser, &TypeType, FALSE, NULL, FALSE);
    00001C7A E700                   MOV         #0,R7
    00001C7C D50E                   MOV.L       L1619+26,R5; _TypeType
    00001C7E 6673                   MOV         R7,R6
    00001C80 D20E                   MOV.L       L1619+30,R2; _VariableAllocValueFromType
    00001C82 2F86                   MOV.L       R8,@-R15
    00001C84 420B                   JSR         @R2
    00001C86 64E3                   MOV         R14,R4
    00001C88 7F04                   ADD         #4,R15
    00001C8A 6603                   MOV         R0,R6
      expression  1192                TypeValue->Val->Typ = Typ;
    00001C8C 52F6                   MOV.L       @(24,R15),R2
      expression  1193                ExpressionStackPushValueNode(Parser, &StackTop, TypeValue);
    00001C8E 65F3                   MOV         R15,R5
    00001C90 5361                   MOV.L       @(4,R6),R3
    00001C92 2322                   MOV.L       R2,@R3
    00001C94 D30A                   MOV.L       L1619+34,R3; _ExpressionStackPushValueNode
    00001C96 430B                   JSR         @R3
    00001C98 64E3                   MOV         R14,R4
    00001C9A A01A                   BRA         L1430
    00001C9C 0009                   NOP
    00001C9E              L1619:                            
    00001C9E 4E20                   .DATA.W     H'4E20
    00001CA0 <00000000>             .DATA.L     _ExpressionPushInt
    00001CA4 <00000000>             .DATA.L     L842
    00001CA8 <00000000>             .DATA.L     _ExpressionStackPushValue
    00001CAC <00000000>             .DATA.L     L847
    00001CB0 <00000000>             .DATA.L     _ParserCopy
    00001CB4 <00000000>             .DATA.L     _TypeParse
    00001CB8 <00000000>             .DATA.L     _TypeType
    00001CBC <00000000>             .DATA.L     _VariableAllocValueFromType
    00001CC0 <00000000>             .DATA.L     _ExpressionStackPushValueNode
    00001CC4              L949:
      expression  1194            }
      expression  1195            else
      expression  1196            { 
      expression  1197                /* it isn't a token from an expression */
      expression  1198                ParserCopy(Parser, &PreState);
    00001CC4 D385                   MOV.L       L1620+2,R3 ; _ParserCopy
    00001CC6 65F3                   MOV         R15,R5
    00001CC8 7558                   ADD         #88,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   94


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001CCA 430B                   JSR         @R3
    00001CCC 64E3                   MOV         R14,R4
      expression  1199                Done = TRUE;
    00001CCE E201                   MOV         #1,R2
    00001CD0 1F2D                   MOV.L       R2,@(52,R15)
    00001CD2              L1430:                            
      expression  1200            }
      expression  1201            
      expression  1202        } while (!Done);
    00001CD2 53FD                   MOV.L       @(52,R15),R3
    00001CD4 2338                   TST         R3,R3
    00001CD6 8B01                   BF          L1621
    00001CD8 AD91                   BRA         L1395
    00001CDA 0009                   NOP
    00001CDC              L1621:                            
      expression  1203        
      expression  1204        /* check that brackets have been closed */
      expression  1205        if (BracketPrecedence > 0)
    00001CDC 4915                   CMP/PL      R9
    00001CDE 8B04                   BF          L1454
      expression  1206            ProgramFail(Parser, "brackets not closed");
    00001CE0 D27F                   MOV.L       L1620+6,R2 ; L814
    00001CE2 2F26                   MOV.L       R2,@-R15
    00001CE4 4B0B                   JSR         @R11
    00001CE6 64E3                   MOV         R14,R4
    00001CE8 7F04                   ADD         #4,R15
    00001CEA              L1454:                            
      expression  1207            
      expression  1208        /* scan and collapse the stack to precedence 0 */
      expression  1209        ExpressionStackCollapse(Parser, &StackTop, 0, &IgnorePrecedence);
    00001CEA 67F3                   MOV         R15,R7
    00001CEC 7704                   ADD         #4,R7
    00001CEE E600                   MOV         #0,R6
    00001CF0 65F3                   MOV         R15,R5
    00001CF2 BBBB                   BSR         _ExpressionStackCollapse
    00001CF4 64E3                   MOV         R14,R4
      expression  1210        
      expression  1211        /* fix up the stack and return the result if we're in run mode */
      expression  1212        if (StackTop != NULL)
    00001CF6 62F2                   MOV.L       @R15,R2
    00001CF8 2228                   TST         R2,R2
    00001CFA 8921                   BT          L1455
      expression  1213        {
      expression  1214            /* all that should be left is a single value on the stack */
      expression  1215            if (Parser->Mode == RunModeRun)
    00001CFC 53E3                   MOV.L       @(12,R14),R3
    00001CFE 2338                   TST         R3,R3
    00001D00 8B13                   BF          L1456
      expression  1216            {
      expression  1217                if (StackTop->Order != OrderNone || StackTop->Next != NULL)
    00001D02 63F2                   MOV.L       @R15,R3
    00001D04 843E                   MOV.B       @(14,R3),R0
    00001D06 2008                   TST         R0,R0
    00001D08 8B03                   BF          L1458
    00001D0A 62F2                   MOV.L       @R15,R2
    00001D0C 6322                   MOV.L       @R2,R3
    00001D0E 2338                   TST         R3,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   95


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D10 8904                   BT          L1457
    00001D12              L1458:                            
      expression  1218                    ProgramFail(Parser, "invalid expression");
    00001D12 D374                   MOV.L       L1620+10,R3; L708
    00001D14 2F36                   MOV.L       R3,@-R15
    00001D16 4B0B                   JSR         @R11
    00001D18 64E3                   MOV         R14,R4
    00001D1A 7F04                   ADD         #4,R15
    00001D1C              L1457:                            
      expression  1219                    
      expression  1220                *Result = StackTop->Val;
    00001D1C 52FB                   MOV.L       @(44,R15),R2
      expression  1221                HeapPopStack(StackTop, sizeof(struct ExpressionStack));
    00001D1E E510                   MOV         #16,R5
    00001D20 63F2                   MOV.L       @R15,R3
    00001D22 5131                   MOV.L       @(4,R3),R1
    00001D24 2212                   MOV.L       R1,@R2
    00001D26 A008                   BRA         L1562
    00001D28 64F2                   MOV.L       @R15,R4
    00001D2A              L1456:                            
      expression  1222            }
      expression  1223            else
      expression  1224                HeapPopStack(StackTop->Val, sizeof(struct ExpressionStack) + sizeof(struct Value) + TypeStackS
                         +izeValue(StackTop->Val));
    00001D2A 64F2                   MOV.L       @R15,R4
    00001D2C D36E                   MOV.L       L1620+14,R3; _TypeStackSizeValue
    00001D2E 430B                   JSR         @R3
    00001D30 5441                   MOV.L       @(4,R4),R4
    00001D32 6503                   MOV         R0,R5
    00001D34 64F2                   MOV.L       @R15,R4
    00001D36 7520                   ADD         #32,R5
    00001D38 5441                   MOV.L       @(4,R4),R4
    00001D3A              L1562:                            
    00001D3A D36C                   MOV.L       L1620+18,R3; _HeapPopStack
    00001D3C 430B                   JSR         @R3
    00001D3E 0009                   NOP
    00001D40              L1455:                            
      expression  1225        }
      expression  1226        
      expression  1227    #ifdef DEBUG_EXPRESSIONS
      expression  1228        ExpressionStackShow(StackTop);
      expression  1229    #endif
      expression  1230        return StackTop != NULL;
    00001D40 60F2                   MOV.L       @R15,R0
      expression  1231    }
    00001D42 7F78                   ADD         #120,R15
    00001D44 4F26                   LDS.L       @R15+,PR
    00001D46 2008                   TST         R0,R0
    00001D48 68F6                   MOV.L       @R15+,R8
    00001D4A 0029                   MOVT        R0
    00001D4C 69F6                   MOV.L       @R15+,R9
    00001D4E CA01                   XOR         #1,R0
    00001D50 6AF6                   MOV.L       @R15+,R10
    00001D52 6BF6                   MOV.L       @R15+,R11
    00001D54 6CF6                   MOV.L       @R15+,R12
    00001D56 6DF6                   MOV.L       @R15+,R13
    00001D58 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   96


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D5A 6EF6                   MOV.L       @R15+,R14
      expression  1232    
      expression  1233    
      expression  1234    /* do a parameterised macro call */
      expression  1235    void ExpressionParseMacroCall(struct ParseState *Parser, struct ExpressionStack **StackTop, const char *Ma
                         +croName, struct MacroDef *MDef)
    00001D5C              _ExpressionParseMacroCall:       ; function: ExpressionParseMacroCall
                                                           ; frame size=92
    00001D5C 2FE6                   MOV.L       R14,@-R15
    00001D5E 6E43                   MOV         R4,R14
    00001D60 2FD6                   MOV.L       R13,@-R15
    00001D62 2FC6                   MOV.L       R12,@-R15
    00001D64 2FB6                   MOV.L       R11,@-R15
    00001D66 6C73                   MOV         R7,R12
      expression  1236    {
      expression  1237        struct Value *ReturnValue = NULL;
      expression  1238        struct Value *Param;
      expression  1239        struct Value **ParamArray = NULL;
      expression  1240        int ArgCount;
      expression  1241        enum LexToken Token;
      expression  1242        
      expression  1243        if (Parser->Mode == RunModeRun) 
    00001D68 DD61                   MOV.L       L1620+22,R13; _ProgramFail
    00001D6A 6B53                   MOV         R5,R11
    00001D6C 2FA6                   MOV.L       R10,@-R15
    00001D6E 2F96                   MOV.L       R9,@-R15
    00001D70 2F86                   MOV.L       R8,@-R15
    00001D72 E800                   MOV         #0,R8
    00001D74 4F22                   STS.L       PR,@-R15
    00001D76 7FD0                   ADD         #-48,R15
    00001D78 2F62                   MOV.L       R6,@R15
    00001D7A 1F83                   MOV.L       R8,@(12,R15)
    00001D7C 53E3                   MOV.L       @(12,R14),R3
    00001D7E 2338                   TST         R3,R3
    00001D80 8F17                   BF/S        L1462
    00001D82 6983                   MOV         R8,R9
      expression  1244        { 
      expression  1245            /* create a stack frame for this macro */
      expression  1246    #ifndef NO_FP
      expression  1247            ExpressionStackPushValueByType(Parser, StackTop, &FPType);  /* largest return type there is */
    00001D84 D65B                   MOV.L       L1620+26,R6; _FPType
    00001D86 65B3                   MOV         R11,R5
    00001D88 D35B                   MOV.L       L1620+30,R3; _ExpressionStackPushValueByType
    00001D8A 430B                   JSR         @R3
    00001D8C 64E3                   MOV         R14,R4
      expression  1248    #else
      expression  1249            ExpressionStackPushValueByType(Parser, StackTop, &IntType);  /* largest return type there is */
      expression  1250    #endif
      expression  1251            ReturnValue = (*StackTop)->Val;
    00001D8E 62B2                   MOV.L       @R11,R2
    00001D90 5321                   MOV.L       @(4,R2),R3
      expression  1252            HeapPushStackFrame();
    00001D92 D25A                   MOV.L       L1620+34,R2; _HeapPushStackFrame
    00001D94 420B                   JSR         @R2
    00001D96 1F33                   MOV.L       R3,@(12,R15)
      expression  1253            ParamArray = HeapAllocStack(sizeof(struct Value *) * MDef->NumParams); 
    00001D98 64C2                   MOV.L       @R12,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   97


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D9A D359                   MOV.L       L1620+38,R3; _HeapAllocStack
    00001D9C 430B                   JSR         @R3
    00001D9E 4408                   SHLL2       R4
    00001DA0 6903                   MOV         R0,R9
      expression  1254    
      expression  1255            if (ParamArray == NULL)
    00001DA2 2998                   TST         R9,R9
    00001DA4 8B0A                   BF          L1464
      expression  1256                ProgramFail(Parser, "out of memory");
    00001DA6 D357                   MOV.L       L1620+42,R3; L863
    00001DA8 2F36                   MOV.L       R3,@-R15
    00001DAA 4D0B                   JSR         @R13
    00001DAC 64E3                   MOV         R14,R4
    00001DAE A005                   BRA         L1464
    00001DB0 7F04                   ADD         #4,R15
    00001DB2              L1462:                            
      expression  1257        }
      expression  1258        else
      expression  1259            ExpressionPushInt(Parser, StackTop, 0);
    00001DB2 E600                   MOV         #0,R6
    00001DB4 D354                   MOV.L       L1620+46,R3; _ExpressionPushInt
    00001DB6 65B3                   MOV         R11,R5
    00001DB8 430B                   JSR         @R3
    00001DBA 64E3                   MOV         R14,R4
    00001DBC              L1464:                            
      expression  1260            
      expression  1261        /* parse arguments */
      expression  1262        ArgCount = 0;
    00001DBC 6A83                   MOV         R8,R10
      expression  1263        do {
    00001DBE              L1465:                            
      expression  1264            if (ExpressionParse(Parser, &Param))
    00001DBE 65F3                   MOV         R15,R5
    00001DC0 7504                   ADD         #4,R5
    00001DC2 BD05                   BSR         _ExpressionParse
    00001DC4 64E3                   MOV         R14,R4
    00001DC6 2008                   TST         R0,R0
    00001DC8 8923                   BT          L1466
      expression  1265            {
      expression  1266                if (Parser->Mode == RunModeRun)
    00001DCA 52E3                   MOV.L       @(12,R14),R2
    00001DCC 2228                   TST         R2,R2
    00001DCE 8B0E                   BF          L1467
      expression  1267                { 
      expression  1268                    if (ArgCount < MDef->NumParams)
    00001DD0 63C2                   MOV.L       @R12,R3
    00001DD2 3A33                   CMP/GE      R3,R10
    00001DD4 8904                   BT          L1468
      expression  1269                        ParamArray[ArgCount] = Param;
    00001DD6 60A3                   MOV         R10,R0
    00001DD8 53F1                   MOV.L       @(4,R15),R3
    00001DDA 4008                   SHLL2       R0
    00001DDC A007                   BRA         L1467
    00001DDE 0936                   MOV.L       R3,@(R0,R9)
    00001DE0              L1468:                            
      expression  1270                    else
      expression  1271                        ProgramFail(Parser, "too many arguments to %s()", MacroName);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   98


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001DE0 60F2                   MOV.L       @R15,R0
    00001DE2 2F06                   MOV.L       R0,@-R15
    00001DE4 D349                   MOV.L       L1620+50,R3; L867
    00001DE6 2F36                   MOV.L       R3,@-R15
    00001DE8 4D0B                   JSR         @R13
    00001DEA 64E3                   MOV         R14,R4
    00001DEC 7F08                   ADD         #8,R15
    00001DEE              L1467:                            
      expression  1272                }
      expression  1273                
      expression  1274                ArgCount++;
    00001DEE 7A01                   ADD         #1,R10
      expression  1275                Token = LexGetToken(Parser, NULL, TRUE);
    00001DF0 D247                   MOV.L       L1620+54,R2; _LexGetToken
    00001DF2 E601                   MOV         #1,R6
    00001DF4 E500                   MOV         #0,R5
    00001DF6 420B                   JSR         @R2
    00001DF8 64E3                   MOV         R14,R4
      expression  1276                if (Token != TokenComma && Token != TokenCloseBracket)
    00001DFA 8801                   CMP/EQ      #1,R0
    00001DFC 8D0F                   BT/S        L1471
    00001DFE 6B03                   MOV         R0,R11
    00001E00 60B3                   MOV         R11,R0
    00001E02 882C                   CMP/EQ      #44,R0
    00001E04 890B                   BT          L1471
      expression  1277                    ProgramFail(Parser, "comma expected");
    00001E06 D343                   MOV.L       L1620+58,R3; L868
    00001E08 2F36                   MOV.L       R3,@-R15
    00001E0A 4D0B                   JSR         @R13
    00001E0C 64E3                   MOV         R14,R4
    00001E0E A006                   BRA         L1471
    00001E10 7F04                   ADD         #4,R15
    00001E12              L1466:                            
      expression  1278            }
      expression  1279            else
      expression  1280            { 
      expression  1281                /* end of argument list? */
      expression  1282                Token = LexGetToken(Parser, NULL, TRUE);
    00001E12 E601                   MOV         #1,R6
    00001E14 D33E                   MOV.L       L1620+54,R3; _LexGetToken
    00001E16 E500                   MOV         #0,R5
    00001E18 430B                   JSR         @R3
    00001E1A 64E3                   MOV         R14,R4
    00001E1C 6B03                   MOV         R0,R11
      expression  1283                if (!TokenCloseBracket)
      expression  1284                    ProgramFail(Parser, "bad argument");
    00001E1E              L1471:                            
      expression  1285            }
      expression  1286            
      expression  1287        } while (Token != TokenCloseBracket);
    00001E1E 60B3                   MOV         R11,R0
    00001E20 882C                   CMP/EQ      #44,R0
    00001E22 8BCC                   BF          L1465
      expression  1288        
      expression  1289        if (Parser->Mode == RunModeRun) 
    00001E24 53E3                   MOV.L       @(12,R14),R3
    00001E26 2338                   TST         R3,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE   99


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E28 8B4D                   BF          L1473
      expression  1290        { 
      expression  1291            /* evaluate the macro */
      expression  1292            struct ParseState MacroParser;
      expression  1293            int Count;
      expression  1294            struct Value *EvalValue;
      expression  1295            
      expression  1296            if (ArgCount < MDef->NumParams)
    00001E2A 63C2                   MOV.L       @R12,R3
    00001E2C 3A33                   CMP/GE      R3,R10
    00001E2E 8906                   BT          L1474
      expression  1297                ProgramFail(Parser, "not enough arguments to '%s'", MacroName);
    00001E30 61F2                   MOV.L       @R15,R1
    00001E32 2F16                   MOV.L       R1,@-R15
    00001E34 D338                   MOV.L       L1620+62,R3; L875
    00001E36 2F36                   MOV.L       R3,@-R15
    00001E38 4D0B                   JSR         @R13
    00001E3A 64E3                   MOV         R14,R4
    00001E3C 7F08                   ADD         #8,R15
    00001E3E              L1474:                            
      expression  1298            
      expression  1299            if (MDef->Body.Pos == NULL)
    00001E3E 52C2                   MOV.L       @(8,R12),R2
    00001E40 2228                   TST         R2,R2
    00001E42 8B06                   BF          L1475
      expression  1300                ProgramFail(Parser, "'%s' is undefined", MacroName);
    00001E44 63F2                   MOV.L       @R15,R3
    00001E46 2F36                   MOV.L       R3,@-R15
    00001E48 D234                   MOV.L       L1620+66,R2; L876
    00001E4A 2F26                   MOV.L       R2,@-R15
    00001E4C 4D0B                   JSR         @R13
    00001E4E 64E3                   MOV         R14,R4
    00001E50 7F08                   ADD         #8,R15
    00001E52              L1475:                            
      expression  1301            
      expression  1302            ParserCopy(&MacroParser, &MDef->Body);
    00001E52 65C3                   MOV         R12,R5
    00001E54 D321                   MOV.L       L1620+2,R3 ; _ParserCopy
    00001E56 64F3                   MOV         R15,R4
    00001E58 7508                   ADD         #8,R5
    00001E5A 430B                   JSR         @R3
    00001E5C 7410                   ADD         #16,R4
      expression  1303            VariableStackFrameAdd(Parser, MacroName, 0);
    00001E5E E600                   MOV         #0,R6
    00001E60 65F2                   MOV.L       @R15,R5
    00001E62 D32F                   MOV.L       L1620+70,R3; _VariableStackFrameAdd
    00001E64 430B                   JSR         @R3
    00001E66 64E3                   MOV         R14,R4
      expression  1304            TopStackFrame->NumParams = ArgCount;
    00001E68 D42E                   MOV.L       L1620+74,R4; _TopStackFrame
    00001E6A 6242                   MOV.L       @R4,R2
    00001E6C 12AB                   MOV.L       R10,@(44,R2)
      expression  1305            TopStackFrame->ReturnValue = ReturnValue;
      expression  1306            for (Count = 0; Count < MDef->NumParams; Count++)
    00001E6E EA01                   MOV         #1,R10
    00001E70 6342                   MOV.L       @R4,R3
    00001E72 52F3                   MOV.L       @(12,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  100


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E74 1329                   MOV.L       R2,@(36,R3)
    00001E76 A00D                   BRA         L1476
    00001E78 6D83                   MOV         R8,R13
    00001E7A              L1477:                            
      expression  1307                VariableDefine(Parser, MDef->ParamName[Count], ParamArray[Count], NULL, TRUE);
    00001E7A E700                   MOV         #0,R7
    00001E7C D32A                   MOV.L       L1620+78,R3; _VariableDefine
    00001E7E 6BD3                   MOV         R13,R11
    00001E80 2FA6                   MOV.L       R10,@-R15
    00001E82 4B08                   SHLL2       R11
    00001E84 60B3                   MOV         R11,R0
    00001E86 069E                   MOV.L       @(R0,R9),R6
    00001E88 50C1                   MOV.L       @(4,R12),R0
    00001E8A 05BE                   MOV.L       @(R0,R11),R5
    00001E8C 430B                   JSR         @R3
    00001E8E 64E3                   MOV         R14,R4
    00001E90 7F04                   ADD         #4,R15
    00001E92 7D01                   ADD         #1,R13
    00001E94              L1476:                            
    00001E94 62C2                   MOV.L       @R12,R2
    00001E96 3D23                   CMP/GE      R2,R13
    00001E98 8BEF                   BF          L1477
      expression  1308                
      expression  1309            ExpressionParse(&MacroParser, &EvalValue);
    00001E9A 65F3                   MOV         R15,R5
    00001E9C 7508                   ADD         #8,R5
    00001E9E 64F3                   MOV         R15,R4
    00001EA0 BC96                   BSR         _ExpressionParse
    00001EA2 7410                   ADD         #16,R4
      expression  1310            ExpressionAssign(Parser, ReturnValue, EvalValue, TRUE, MacroName, 0, FALSE);
    00001EA4 2F86                   MOV.L       R8,@-R15
    00001EA6 E701                   MOV         #1,R7
    00001EA8 2F86                   MOV.L       R8,@-R15
    00001EAA 53F2                   MOV.L       @(8,R15),R3
    00001EAC 2F36                   MOV.L       R3,@-R15
    00001EAE 56F5                   MOV.L       @(20,R15),R6
    00001EB0 55F6                   MOV.L       @(24,R15),R5
    00001EB2 D31E                   MOV.L       L1620+82,R3; _ExpressionAssign
    00001EB4 430B                   JSR         @R3
    00001EB6 64E3                   MOV         R14,R4
      expression  1311            VariableStackFramePop(Parser);
    00001EB8 D21D                   MOV.L       L1620+86,R2; _VariableStackFramePop
    00001EBA 7F0C                   ADD         #12,R15
    00001EBC 420B                   JSR         @R2
    00001EBE 64E3                   MOV         R14,R4
      expression  1312            HeapPopStackFrame();
    00001EC0 D31C                   MOV.L       L1620+90,R3; _HeapPopStackFrame
    00001EC2 430B                   JSR         @R3
    00001EC4 0009                   NOP
    00001EC6              L1473:                            
      expression  1313        }
      expression  1314    }
    00001EC6 7F30                   ADD         #48,R15
    00001EC8 4F26                   LDS.L       @R15+,PR
    00001ECA 68F6                   MOV.L       @R15+,R8
    00001ECC 69F6                   MOV.L       @R15+,R9
    00001ECE 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  101


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001ED0 6BF6                   MOV.L       @R15+,R11
    00001ED2 6CF6                   MOV.L       @R15+,R12
    00001ED4 6DF6                   MOV.L       @R15+,R13
    00001ED6 000B                   RTS
    00001ED8 6EF6                   MOV.L       @R15+,R14
    00001EDA              L1620:                            
    00001EDA 0000                   .DATA.W     0
    00001EDC <00000000>             .DATA.L     _ParserCopy
    00001EE0 <00000000>             .DATA.L     L814
    00001EE4 <00000000>             .DATA.L     L708
    00001EE8 <00000000>             .DATA.L     _TypeStackSizeValue
    00001EEC <00000000>             .DATA.L     _HeapPopStack
    00001EF0 <00000000>             .DATA.L     _ProgramFail
    00001EF4 <00000000>             .DATA.L     _FPType
    00001EF8 <00000000>             .DATA.L     _ExpressionStackPushValueByType
    00001EFC <00000000>             .DATA.L     _HeapPushStackFrame
    00001F00 <00000000>             .DATA.L     _HeapAllocStack
    00001F04 <00000000>             .DATA.L     L863
    00001F08 <00000000>             .DATA.L     _ExpressionPushInt
    00001F0C <00000000>             .DATA.L     L867
    00001F10 <00000000>             .DATA.L     _LexGetToken
    00001F14 <00000000>             .DATA.L     L868
    00001F18 <00000000>             .DATA.L     L875
    00001F1C <00000000>             .DATA.L     L876
    00001F20 <00000000>             .DATA.L     _VariableStackFrameAdd
    00001F24 <00000000>             .DATA.L     _TopStackFrame
    00001F28 <00000000>             .DATA.L     _VariableDefine
    00001F2C <00000000>             .DATA.L     _ExpressionAssign
    00001F30 <00000000>             .DATA.L     _VariableStackFramePop
    00001F34 <00000000>             .DATA.L     _HeapPopStackFrame
      expression  1315    
      expression  1316    /* do a function call */
      expression  1317    void ExpressionParseFunctionCall(struct ParseState *Parser, struct ExpressionStack **StackTop, const char 
                         +*FuncName, int RunIt)
    00001F38              _ExpressionParseFunctionCall:    ; function: ExpressionParseFunctionCall
                                                           ; frame size=100
    00001F38 2FE6                   MOV.L       R14,@-R15
    00001F3A 6E43                   MOV         R4,R14
      expression  1318    {
      expression  1319        struct Value *ReturnValue = NULL;
      expression  1320        struct Value *FuncValue;
      expression  1321        struct Value *Param;
      expression  1322        struct Value **ParamArray = NULL;
      expression  1323        int ArgCount;
      expression  1324        enum LexToken Token = LexGetToken(Parser, NULL, TRUE);    /* open bracket */
    00001F3C D37E                   MOV.L       L1622+2,R3 ; _LexGetToken
    00001F3E 2FD6                   MOV.L       R13,@-R15
    00001F40 2FC6                   MOV.L       R12,@-R15
    00001F42 6C53                   MOV         R5,R12
    00001F44 2FB6                   MOV.L       R11,@-R15
    00001F46 EB00                   MOV         #0,R11
    00001F48 2FA6                   MOV.L       R10,@-R15
    00001F4A 65B3                   MOV         R11,R5
    00001F4C 2F96                   MOV.L       R9,@-R15
    00001F4E 6AB3                   MOV         R11,R10
    00001F50 2F86                   MOV.L       R8,@-R15
    00001F52 6863                   MOV         R6,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  102


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001F54 4F22                   STS.L       PR,@-R15
    00001F56 E601                   MOV         #1,R6
    00001F58 7FC8                   ADD         #-56,R15
    00001F5A 1F71                   MOV.L       R7,@(4,R15)
    00001F5C 1FB3                   MOV.L       R11,@(12,R15)
    00001F5E 430B                   JSR         @R3
    00001F60 64E3                   MOV         R14,R4
      expression  1325        enum RunMode OldMode = Parser->Mode;
    00001F62 52E3                   MOV.L       @(12,R14),R2
      expression  1326        
      expression  1327        if (RunIt)
    00001F64 DD75                   MOV.L       L1622+6,R13; _ProgramFail
    00001F66 1F25                   MOV.L       R2,@(20,R15)
    00001F68 53F1                   MOV.L       @(4,R15),R3
    00001F6A 2338                   TST         R3,R3
    00001F6C 8939                   BT          L1478
      expression  1328        { 
      expression  1329            /* get the function definition */
      expression  1330            VariableGet(Parser, FuncName, &FuncValue);
    00001F6E 66F3                   MOV         R15,R6
    00001F70 D373                   MOV.L       L1622+10,R3; _VariableGet
    00001F72 6583                   MOV         R8,R5
    00001F74 430B                   JSR         @R3
    00001F76 64E3                   MOV         R14,R4
      expression  1331            
      expression  1332            if (FuncValue->Typ->Base == TypeMacro)
    00001F78 60F2                   MOV.L       @R15,R0
    00001F7A 6002                   MOV.L       @R0,R0
    00001F7C 6002                   MOV.L       @R0,R0
    00001F7E 880A                   CMP/EQ      #10,R0
    00001F80 8B07                   BF          L1479
      expression  1333            {
      expression  1334                /* this is actually a macro, not a function */
      expression  1335                ExpressionParseMacroCall(Parser, StackTop, FuncName, &FuncValue->Val->MacroDef);
    00001F82 6683                   MOV         R8,R6
    00001F84 67F2                   MOV.L       @R15,R7
    00001F86 65C3                   MOV         R12,R5
    00001F88 5771                   MOV.L       @(4,R7),R7
    00001F8A BEE7                   BSR         _ExpressionParseMacroCall
    00001F8C 64E3                   MOV         R14,R4
      expression  1336                return;
    00001F8E A150                   BRA         L1480
    00001F90 0009                   NOP
    00001F92              L1479:                            
      expression  1337            }
      expression  1338            
      expression  1339            if (FuncValue->Typ->Base != TypeFunction)
    00001F92 60F2                   MOV.L       @R15,R0
    00001F94 6002                   MOV.L       @R0,R0
    00001F96 6002                   MOV.L       @R0,R0
    00001F98 8809                   CMP/EQ      #9,R0
    00001F9A 8907                   BT          L1481
      expression  1340                ProgramFail(Parser, "%t is not a function - can't call", FuncValue->Typ);
    00001F9C 62F2                   MOV.L       @R15,R2
    00001F9E 6322                   MOV.L       @R2,R3
    00001FA0 D168                   MOV.L       L1622+14,R1; L891
    00001FA2 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  103


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001FA4 2F16                   MOV.L       R1,@-R15
    00001FA6 4D0B                   JSR         @R13
    00001FA8 64E3                   MOV         R14,R4
    00001FAA 7F08                   ADD         #8,R15
    00001FAC              L1481:                            
      expression  1341        
      expression  1342            ExpressionStackPushValueByType(Parser, StackTop, FuncValue->Val->FuncDef.ReturnType);
    00001FAC 66F2                   MOV.L       @R15,R6
    00001FAE 65C3                   MOV         R12,R5
    00001FB0 D365                   MOV.L       L1622+18,R3; _ExpressionStackPushValueByType
    00001FB2 5661                   MOV.L       @(4,R6),R6
    00001FB4 6662                   MOV.L       @R6,R6
    00001FB6 430B                   JSR         @R3
    00001FB8 64E3                   MOV         R14,R4
      expression  1343            ReturnValue = (*StackTop)->Val;
    00001FBA 62C2                   MOV.L       @R12,R2
    00001FBC 5321                   MOV.L       @(4,R2),R3
      expression  1344            HeapPushStackFrame();
    00001FBE D263                   MOV.L       L1622+22,R2; _HeapPushStackFrame
    00001FC0 420B                   JSR         @R2
    00001FC2 1F33                   MOV.L       R3,@(12,R15)
      expression  1345            ParamArray = HeapAllocStack(sizeof(struct Value *) * FuncValue->Val->FuncDef.NumParams);    
    00001FC4 64F2                   MOV.L       @R15,R4
    00001FC6 5441                   MOV.L       @(4,R4),R4
    00001FC8 D361                   MOV.L       L1622+26,R3; _HeapAllocStack
    00001FCA 5441                   MOV.L       @(4,R4),R4
    00001FCC 430B                   JSR         @R3
    00001FCE 4408                   SHLL2       R4
    00001FD0 6A03                   MOV         R0,R10
      expression  1346            if (ParamArray == NULL)
    00001FD2 2AA8                   TST         R10,R10
    00001FD4 8B0C                   BF          L1483
      expression  1347                ProgramFail(Parser, "out of memory");
    00001FD6 D35F                   MOV.L       L1622+30,R3; L863
    00001FD8 2F36                   MOV.L       R3,@-R15
    00001FDA 4D0B                   JSR         @R13
    00001FDC 64E3                   MOV         R14,R4
    00001FDE A007                   BRA         L1483
    00001FE0 7F04                   ADD         #4,R15
    00001FE2              L1478:                            
      expression  1348        }
      expression  1349        else
      expression  1350        {
      expression  1351            ExpressionPushInt(Parser, StackTop, 0);
    00001FE2 E600                   MOV         #0,R6
    00001FE4 D35C                   MOV.L       L1622+34,R3; _ExpressionPushInt
    00001FE6 65C3                   MOV         R12,R5
    00001FE8 430B                   JSR         @R3
    00001FEA 64E3                   MOV         R14,R4
      expression  1352            Parser->Mode = RunModeSkip;
    00001FEC E201                   MOV         #1,R2
    00001FEE 1E23                   MOV.L       R2,@(12,R14)
    00001FF0              L1483:                            
      expression  1353        }
      expression  1354            
      expression  1355        /* parse arguments */
      expression  1356        ArgCount = 0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  104


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001FF0 6CB3                   MOV         R11,R12
      expression  1357        do {
    00001FF2              L1484:                            
      expression  1358            if (RunIt && ArgCount < FuncValue->Val->FuncDef.NumParams)
    00001FF2 53F1                   MOV.L       @(4,R15),R3
    00001FF4 2338                   TST         R3,R3
    00001FF6 8916                   BT          L1485
    00001FF8 63F2                   MOV.L       @R15,R3
    00001FFA 5231                   MOV.L       @(4,R3),R2
    00001FFC 5121                   MOV.L       @(4,R2),R1
    00001FFE 3C13                   CMP/GE      R1,R12
    00002000 8911                   BT          L1485
      expression  1359                ParamArray[ArgCount] = VariableAllocValueFromType(Parser, FuncValue->Val->FuncDef.ParamType[Ar
                         +gCount], FALSE, NULL, FALSE);
    00002002 69C3                   MOV         R12,R9
    00002004 4908                   SHLL2       R9
    00002006 6393                   MOV         R9,R3
    00002008 33AC                   ADD         R10,R3
    0000200A E700                   MOV         #0,R7
    0000200C 2F36                   MOV.L       R3,@-R15
    0000200E 6673                   MOV         R7,R6
    00002010 2FB6                   MOV.L       R11,@-R15
    00002012 55F2                   MOV.L       @(8,R15),R5
    00002014 D351                   MOV.L       L1622+38,R3; _VariableAllocValueFromType
    00002016 5551                   MOV.L       @(4,R5),R5
    00002018 5053                   MOV.L       @(12,R5),R0
    0000201A 059E                   MOV.L       @(R0,R9),R5
    0000201C 430B                   JSR         @R3
    0000201E 64E3                   MOV         R14,R4
    00002020 7F04                   ADD         #4,R15
    00002022 63F6                   MOV.L       @R15+,R3
    00002024 2302                   MOV.L       R0,@R3
    00002026              L1485:                            
      expression  1360            
      expression  1361            if (ExpressionParse(Parser, &Param))
    00002026 65F3                   MOV         R15,R5
    00002028 7508                   ADD         #8,R5
    0000202A BBD1                   BSR         _ExpressionParse
    0000202C 64E3                   MOV         R14,R4
    0000202E 2008                   TST         R0,R0
    00002030 8938                   BT          L1486
      expression  1362            {
      expression  1363                if (RunIt)
    00002032 52F1                   MOV.L       @(4,R15),R2
    00002034 2228                   TST         R2,R2
    00002036 8923                   BT          L1487
      expression  1364                { 
      expression  1365                    if (ArgCount < FuncValue->Val->FuncDef.NumParams)
    00002038 63F2                   MOV.L       @R15,R3
    0000203A 5231                   MOV.L       @(4,R3),R2
    0000203C 5121                   MOV.L       @(4,R2),R1
    0000203E 3C13                   CMP/GE      R1,R12
    00002040 8913                   BT          L1488
      expression  1366                    {
      expression  1367                        ExpressionAssign(Parser, ParamArray[ArgCount], Param, TRUE, FuncName, ArgCount+1, FALS
                         +E);
    00002042 62C3                   MOV         R12,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  105


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002044 D346                   MOV.L       L1622+42,R3; _ExpressionAssign
    00002046 E701                   MOV         #1,R7
    00002048 2FB6                   MOV.L       R11,@-R15
    0000204A 60C3                   MOV         R12,R0
    0000204C 7201                   ADD         #1,R2
    0000204E 4008                   SHLL2       R0
    00002050 2F26                   MOV.L       R2,@-R15
    00002052 2F86                   MOV.L       R8,@-R15
    00002054 56F5                   MOV.L       @(20,R15),R6
    00002056 05AE                   MOV.L       @(R0,R10),R5
    00002058 430B                   JSR         @R3
    0000205A 64E3                   MOV         R14,R4
      expression  1368                        VariableStackPop(Parser, Param);
    0000205C D341                   MOV.L       L1622+46,R3; _VariableStackPop
    0000205E 7F0C                   ADD         #12,R15
    00002060 55F2                   MOV.L       @(8,R15),R5
    00002062 430B                   JSR         @R3
    00002064 64E3                   MOV         R14,R4
    00002066 A00B                   BRA         L1487
    00002068 0009                   NOP
    0000206A              L1488:                            
      expression  1369                    }
      expression  1370                    else
      expression  1371                    {
      expression  1372                        if (!FuncValue->Val->FuncDef.VarArgs)
    0000206A 63F2                   MOV.L       @R15,R3
    0000206C 5231                   MOV.L       @(4,R3),R2
    0000206E 5122                   MOV.L       @(8,R2),R1
    00002070 2118                   TST         R1,R1
    00002072 8B05                   BF          L1487
      expression  1373                            ProgramFail(Parser, "too many arguments to %s()", FuncName);
    00002074 2F86                   MOV.L       R8,@-R15
    00002076 D33C                   MOV.L       L1622+50,R3; L867
    00002078 2F36                   MOV.L       R3,@-R15
    0000207A 4D0B                   JSR         @R13
    0000207C 64E3                   MOV         R14,R4
    0000207E 7F08                   ADD         #8,R15
    00002080              L1487:                            
      expression  1374                    }
      expression  1375                }
      expression  1376                
      expression  1377                ArgCount++;
      expression  1378                Token = LexGetToken(Parser, NULL, TRUE);
    00002080 D22D                   MOV.L       L1622+2,R2 ; _LexGetToken
    00002082 7C01                   ADD         #1,R12
    00002084 E601                   MOV         #1,R6
    00002086 E500                   MOV         #0,R5
    00002088 420B                   JSR         @R2
    0000208A 64E3                   MOV         R14,R4
      expression  1379                if (Token != TokenComma && Token != TokenCloseBracket)
    0000208C 8801                   CMP/EQ      #1,R0
    0000208E 8D0F                   BT/S        L1492
    00002090 6903                   MOV         R0,R9
    00002092 6093                   MOV         R9,R0
    00002094 882C                   CMP/EQ      #44,R0
    00002096 890B                   BT          L1492
      expression  1380                    ProgramFail(Parser, "comma expected");




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  106


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002098 D334                   MOV.L       L1622+54,R3; L868
    0000209A 2F36                   MOV.L       R3,@-R15
    0000209C 4D0B                   JSR         @R13
    0000209E 64E3                   MOV         R14,R4
    000020A0 A006                   BRA         L1492
    000020A2 7F04                   ADD         #4,R15
    000020A4              L1486:                            
      expression  1381            }
      expression  1382            else
      expression  1383            { 
      expression  1384                /* end of argument list? */
      expression  1385                Token = LexGetToken(Parser, NULL, TRUE);
    000020A4 D324                   MOV.L       L1622+2,R3 ; _LexGetToken
    000020A6 E601                   MOV         #1,R6
    000020A8 E500                   MOV         #0,R5
    000020AA 430B                   JSR         @R3
    000020AC 64E3                   MOV         R14,R4
    000020AE 6903                   MOV         R0,R9
      expression  1386                if (!TokenCloseBracket)
      expression  1387                    ProgramFail(Parser, "bad argument");
    000020B0              L1492:                            
      expression  1388            }
      expression  1389            
      expression  1390        } while (Token != TokenCloseBracket);
    000020B0 6093                   MOV         R9,R0
    000020B2 882C                   CMP/EQ      #44,R0
    000020B4 8B9D                   BF          L1484
      expression  1391        
      expression  1392        if (RunIt) 
    000020B6 53F1                   MOV.L       @(4,R15),R3
    000020B8 2338                   TST         R3,R3
    000020BA 8B01                   BF          L1623
    000020BC A0B7                   BRA         L1494
    000020BE 0009                   NOP
    000020C0              L1623:                            
      expression  1393        { 
      expression  1394            /* run the function */
      expression  1395            if (ArgCount < FuncValue->Val->FuncDef.NumParams)
    000020C0 63F2                   MOV.L       @R15,R3
    000020C2 5231                   MOV.L       @(4,R3),R2
    000020C4 5121                   MOV.L       @(4,R2),R1
    000020C6 3C13                   CMP/GE      R1,R12
    000020C8 8905                   BT          L1495
      expression  1396                ProgramFail(Parser, "not enough arguments to '%s'", FuncName);
    000020CA 2F86                   MOV.L       R8,@-R15
    000020CC D228                   MOV.L       L1622+58,R2; L875
    000020CE 2F26                   MOV.L       R2,@-R15
    000020D0 4D0B                   JSR         @R13
    000020D2 64E3                   MOV         R14,R4
    000020D4 7F08                   ADD         #8,R15
    000020D6              L1495:                            
      expression  1397            
      expression  1398            if (FuncValue->Val->FuncDef.Intrinsic == NULL)
    000020D6 63F2                   MOV.L       @R15,R3
    000020D8 5231                   MOV.L       @(4,R3),R2
    000020DA 5125                   MOV.L       @(20,R2),R1
    000020DC 2118                   TST         R1,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  107


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000020DE 8901                   BT          L1624
    000020E0 A09A                   BRA         L1496
    000020E2 0009                   NOP
    000020E4              L1624:                            
      expression  1399            { 
      expression  1400                /* run a user-defined function */
      expression  1401                struct ParseState FuncParser;
      expression  1402                int Count;
      expression  1403                
      expression  1404                if (FuncValue->Val->FuncDef.Body.Pos == NULL)
    000020E4 61F2                   MOV.L       @R15,R1
    000020E6 5311                   MOV.L       @(4,R1),R3
    000020E8 5236                   MOV.L       @(24,R3),R2
    000020EA 2228                   TST         R2,R2
    000020EC 8B05                   BF          L1497
      expression  1405                    ProgramFail(Parser, "'%s' is undefined", FuncName);
    000020EE 2F86                   MOV.L       R8,@-R15
    000020F0 D320                   MOV.L       L1622+62,R3; L876
    000020F2 2F36                   MOV.L       R3,@-R15
    000020F4 4D0B                   JSR         @R13
    000020F6 64E3                   MOV         R14,R4
    000020F8 7F08                   ADD         #8,R15
    000020FA              L1497:                            
      expression  1406                
      expression  1407                ParserCopy(&FuncParser, &FuncValue->Val->FuncDef.Body);
    000020FA 64F3                   MOV         R15,R4
    000020FC D31E                   MOV.L       L1622+66,R3; _ParserCopy
    000020FE 65F2                   MOV.L       @R15,R5
    00002100 5551                   MOV.L       @(4,R5),R5
    00002102 7518                   ADD         #24,R5
    00002104 430B                   JSR         @R3
    00002106 7418                   ADD         #24,R4
      expression  1408                VariableStackFrameAdd(Parser, FuncName, FuncValue->Val->FuncDef.Intrinsic ? FuncValue->Val->Fu
                         +ncDef.NumParams : 0);
    00002108 66F2                   MOV.L       @R15,R6
    0000210A 5661                   MOV.L       @(4,R6),R6
    0000210C 1F64                   MOV.L       R6,@(16,R15)
    0000210E 5365                   MOV.L       @(20,R6),R3
    00002110 2338                   TST         R3,R3
    00002112 8D03                   BT/S        L1498
    00002114 6583                   MOV         R8,R5
    00002116 56F4                   MOV.L       @(16,R15),R6
    00002118 A001                   BRA         L1499
    0000211A 5661                   MOV.L       @(4,R6),R6
    0000211C              L1498:                            
    0000211C E600                   MOV         #0,R6
    0000211E              L1499:                            
    0000211E D217                   MOV.L       L1622+70,R2; _VariableStackFrameAdd
    00002120 420B                   JSR         @R2
    00002122 64E3                   MOV         R14,R4
      expression  1409                TopStackFrame->NumParams = ArgCount;
    00002124 D416                   MOV.L       L1622+74,R4; _TopStackFrame
    00002126 6342                   MOV.L       @R4,R3
      expression  1410                TopStackFrame->ReturnValue = ReturnValue;
      expression  1411                for (Count = 0; Count < FuncValue->Val->FuncDef.NumParams; Count++)
    00002128 D916                   MOV.L       L1622+78,R9; _VariableDefine
    0000212A 13CB                   MOV.L       R12,@(44,R3)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  108


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000212C 6242                   MOV.L       @R4,R2
    0000212E 53F3                   MOV.L       @(12,R15),R3
    00002130 1239                   MOV.L       R3,@(36,R2)
    00002132 A038                   BRA         L1500
    00002134 6CB3                   MOV         R11,R12
    00002136              L1622:                            
    00002136 0000                   .DATA.W     0
    00002138 <00000000>             .DATA.L     _LexGetToken
    0000213C <00000000>             .DATA.L     _ProgramFail
    00002140 <00000000>             .DATA.L     _VariableGet
    00002144 <00000000>             .DATA.L     L891
    00002148 <00000000>             .DATA.L     _ExpressionStackPushValueByType
    0000214C <00000000>             .DATA.L     _HeapPushStackFrame
    00002150 <00000000>             .DATA.L     _HeapAllocStack
    00002154 <00000000>             .DATA.L     L863
    00002158 <00000000>             .DATA.L     _ExpressionPushInt
    0000215C <00000000>             .DATA.L     _VariableAllocValueFromType
    00002160 <00000000>             .DATA.L     _ExpressionAssign
    00002164 <00000000>             .DATA.L     _VariableStackPop
    00002168 <00000000>             .DATA.L     L867
    0000216C <00000000>             .DATA.L     L868
    00002170 <00000000>             .DATA.L     L875
    00002174 <00000000>             .DATA.L     L876
    00002178 <00000000>             .DATA.L     _ParserCopy
    0000217C <00000000>             .DATA.L     _VariableStackFrameAdd
    00002180 <00000000>             .DATA.L     _TopStackFrame
    00002184 <00000000>             .DATA.L     _VariableDefine
    00002188              L1501:                            
      expression  1412                    VariableDefine(Parser, FuncValue->Val->FuncDef.ParamName[Count], ParamArray[Count], NULL, 
                         +TRUE);
    00002188 E301                   MOV         #1,R3
    0000218A E700                   MOV         #0,R7
    0000218C 2F36                   MOV.L       R3,@-R15
    0000218E 6BC3                   MOV         R12,R11
    00002190 55F1                   MOV.L       @(4,R15),R5
    00002192 4B08                   SHLL2       R11
    00002194 5551                   MOV.L       @(4,R5),R5
    00002196 60B3                   MOV         R11,R0
    00002198 06AE                   MOV.L       @(R0,R10),R6
    0000219A 5054                   MOV.L       @(16,R5),R0
    0000219C 05BE                   MOV.L       @(R0,R11),R5
    0000219E 490B                   JSR         @R9
    000021A0 64E3                   MOV         R14,R4
    000021A2 7F04                   ADD         #4,R15
    000021A4 7C01                   ADD         #1,R12
    000021A6              L1500:                            
    000021A6 63F2                   MOV.L       @R15,R3
    000021A8 5231                   MOV.L       @(4,R3),R2
    000021AA 5121                   MOV.L       @(4,R2),R1
    000021AC 3C13                   CMP/GE      R1,R12
    000021AE 8BEB                   BF          L1501
      expression  1413                    
      expression  1414                if (ParseStatement(&FuncParser, TRUE) != ParseResultOk)
    000021B0 D240                   MOV.L       L1625,R2   ; _ParseStatement
    000021B2 E501                   MOV         #1,R5
    000021B4 64F3                   MOV         R15,R4
    000021B6 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  109


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000021B8 7418                   ADD         #24,R4
    000021BA 8802                   CMP/EQ      #2,R0
    000021BC 8905                   BT          L1502
      expression  1415                    ProgramFail(&FuncParser, "function body expected");
    000021BE D23E                   MOV.L       L1625+4,R2 ; L903
    000021C0 2F26                   MOV.L       R2,@-R15
    000021C2 64F3                   MOV         R15,R4
    000021C4 4D0B                   JSR         @R13
    000021C6 741C                   ADD         #28,R4
    000021C8 7F04                   ADD         #4,R15
    000021CA              L1502:                            
      expression  1416            
      expression  1417                if (RunIt)
    000021CA 53F1                   MOV.L       @(4,R15),R3
    000021CC 2338                   TST         R3,R3
    000021CE 891E                   BT          L1503
    000021D0 54F9                   MOV.L       @(36,R15),R4
    000021D2 2448                   TST         R4,R4
    000021D4 8B10                   BF          L1504
    000021D6 62F2                   MOV.L       @R15,R2
    000021D8 D138                   MOV.L       L1625+8,R1 ; _VoidType
    000021DA 5321                   MOV.L       @(4,R2),R3
    000021DC 6032                   MOV.L       @R3,R0
    000021DE 3010                   CMP/EQ      R1,R0
    000021E0 890A                   BT          L1504
      expression  1418                {
      expression  1419                    if (FuncParser.Mode == RunModeRun && FuncValue->Val->FuncDef.ReturnType != &VoidType)
      expression  1420                        ProgramFail(&FuncParser, "no value returned from a function returning %t", FuncValue->
                         +Val->FuncDef.ReturnType);
    000021E2 62F2                   MOV.L       @R15,R2
    000021E4 5321                   MOV.L       @(4,R2),R3
    000021E6 6132                   MOV.L       @R3,R1
    000021E8 D235                   MOV.L       L1625+12,R2; L905
    000021EA 2F16                   MOV.L       R1,@-R15
    000021EC 2F26                   MOV.L       R2,@-R15
    000021EE 64F3                   MOV         R15,R4
    000021F0 4D0B                   JSR         @R13
    000021F2 7420                   ADD         #32,R4
    000021F4 A00B                   BRA         L1503
    000021F6 7F08                   ADD         #8,R15
    000021F8              L1504:                            
      expression  1421    
      expression  1422                    else if (FuncParser.Mode == RunModeGoto)
    000021F8 6043                   MOV         R4,R0
    000021FA 8806                   CMP/EQ      #6,R0
    000021FC 8B07                   BF          L1503
      expression  1423                        ProgramFail(&FuncParser, "couldn't find goto label '%s'", FuncParser.SearchGotoLabel);
    000021FE 53FB                   MOV.L       @(44,R15),R3
    00002200 D230                   MOV.L       L1625+16,R2; L906
    00002202 2F36                   MOV.L       R3,@-R15
    00002204 2F26                   MOV.L       R2,@-R15
    00002206 64F3                   MOV         R15,R4
    00002208 4D0B                   JSR         @R13
    0000220A 7420                   ADD         #32,R4
    0000220C 7F08                   ADD         #8,R15
    0000220E              L1503:                            
      expression  1424                }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  110


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression  1425                
      expression  1426                VariableStackFramePop(Parser);
    0000220E D32E                   MOV.L       L1625+20,R3; _VariableStackFramePop
    00002210 430B                   JSR         @R3
    00002212 64E3                   MOV         R14,R4
    00002214 A008                   BRA         L1507
    00002216 0009                   NOP
    00002218              L1496:                            
      expression  1427            }
      expression  1428            else
      expression  1429                FuncValue->Val->FuncDef.Intrinsic(Parser, ReturnValue, ParamArray, ArgCount);
    00002218 63F2                   MOV.L       @R15,R3
    0000221A 67C3                   MOV         R12,R7
    0000221C 55F3                   MOV.L       @(12,R15),R5
    0000221E 66A3                   MOV         R10,R6
    00002220 5231                   MOV.L       @(4,R3),R2
    00002222 5125                   MOV.L       @(20,R2),R1
    00002224 410B                   JSR         @R1
    00002226 64E3                   MOV         R14,R4
    00002228              L1507:                            
      expression  1430    
      expression  1431            HeapPopStackFrame();
    00002228 D328                   MOV.L       L1625+24,R3; _HeapPopStackFrame
    0000222A 430B                   JSR         @R3
    0000222C 0009                   NOP
    0000222E              L1494:                            
      expression  1432        }
      expression  1433    
      expression  1434        Parser->Mode = OldMode;
    0000222E 52F5                   MOV.L       @(20,R15),R2
    00002230 1E23                   MOV.L       R2,@(12,R14)
      expression  1435    }
    00002232              L1480:                            
    00002232 7F38                   ADD         #56,R15
    00002234 4F26                   LDS.L       @R15+,PR
    00002236 68F6                   MOV.L       @R15+,R8
    00002238 69F6                   MOV.L       @R15+,R9
    0000223A 6AF6                   MOV.L       @R15+,R10
    0000223C 6BF6                   MOV.L       @R15+,R11
    0000223E 6CF6                   MOV.L       @R15+,R12
    00002240 6DF6                   MOV.L       @R15+,R13
    00002242 000B                   RTS
    00002244 6EF6                   MOV.L       @R15+,R14
      expression  1436    
      expression  1437    /* parse an expression */
      expression  1438    long ExpressionParseInt(struct ParseState *Parser)
    00002246              _ExpressionParseInt:             ; function: ExpressionParseInt
                                                           ; frame size=28
    00002246 2FE6                   MOV.L       R14,@-R15
    00002248 2FD6                   MOV.L       R13,@-R15
    0000224A 6E43                   MOV         R4,R14
    0000224C 4F22                   STS.L       PR,@-R15
      expression  1439    {
      expression  1440        struct Value *Val;
      expression  1441        long Result = 0;
    0000224E ED00                   MOV         #0,R13
    00002250 7FF8                   ADD         #-8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  111


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      expression  1442        
      expression  1443        if (!ExpressionParse(Parser, &Val))
    00002252 BABD                   BSR         _ExpressionParse
    00002254 65F3                   MOV         R15,R5
    00002256 2008                   TST         R0,R0
    00002258 8B05                   BF          L1508
      expression  1444            ProgramFail(Parser, "expression expected");
    0000225A D31D                   MOV.L       L1625+28,R3; L839
    0000225C D21D                   MOV.L       L1625+32,R2; _ProgramFail
    0000225E 2F36                   MOV.L       R3,@-R15
    00002260 420B                   JSR         @R2
    00002262 64E3                   MOV         R14,R4
    00002264 7F04                   ADD         #4,R15
    00002266              L1508:                            
      expression  1445        
      expression  1446        if (Parser->Mode == RunModeRun)
    00002266 53E3                   MOV.L       @(12,R14),R3
    00002268 2338                   TST         R3,R3
    0000226A 8B1D                   BF          L1509
      expression  1447        { 
      expression  1448            if (!IS_NUMERIC_COERCIBLE(Val))
    0000226C 64F2                   MOV.L       @R15,R4
    0000226E E301                   MOV         #1,R3
    00002270 6442                   MOV.L       @R4,R4
    00002272 1F41                   MOV.L       R4,@(4,R15)
    00002274 6442                   MOV.L       @R4,R4
    00002276 3433                   CMP/GE      R3,R4
    00002278 8B02                   BF          L1511
    0000227A E107                   MOV         #7,R1
    0000227C 3417                   CMP/GT      R1,R4
    0000227E 8B0B                   BF          L1510
    00002280              L1511:                            
    00002280 6043                   MOV         R4,R0
    00002282 8808                   CMP/EQ      #8,R0
    00002284 8908                   BT          L1510
      expression  1449                ProgramFail(Parser, "integer value expected instead of %t", Val->Typ);
    00002286 62F2                   MOV.L       @R15,R2
    00002288 D113                   MOV.L       L1625+36,R1; L912
    0000228A 6322                   MOV.L       @R2,R3
    0000228C 2F36                   MOV.L       R3,@-R15
    0000228E 2F16                   MOV.L       R1,@-R15
    00002290 D310                   MOV.L       L1625+32,R3; _ProgramFail
    00002292 430B                   JSR         @R3
    00002294 64E3                   MOV         R14,R4
    00002296 7F08                   ADD         #8,R15
    00002298              L1510:                            
      expression  1450        
      expression  1451            Result = ExpressionCoerceInteger(Val);
    00002298 D310                   MOV.L       L1625+40,R3; _ExpressionCoerceInteger
    0000229A 430B                   JSR         @R3
    0000229C 64F2                   MOV.L       @R15,R4
    0000229E 6D03                   MOV         R0,R13
      expression  1452            VariableStackPop(Parser, Val);
    000022A0 65F2                   MOV.L       @R15,R5
    000022A2 D30F                   MOV.L       L1625+44,R3; _VariableStackPop
    000022A4 430B                   JSR         @R3
    000022A6 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  112


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000022A8              L1509:                            
      expression  1453        }
      expression  1454        
      expression  1455        return Result;
    000022A8 60D3                   MOV         R13,R0
      expression  1456    }
    000022AA 7F08                   ADD         #8,R15
    000022AC 4F26                   LDS.L       @R15+,PR
    000022AE 6DF6                   MOV.L       @R15+,R13
    000022B0 000B                   RTS
    000022B2 6EF6                   MOV.L       @R15+,R14
    000022B4              L1625:                            
    000022B4 <00000000>             .DATA.L     _ParseStatement
    000022B8 <00000000>             .DATA.L     L903
    000022BC <00000000>             .DATA.L     _VoidType
    000022C0 <00000000>             .DATA.L     L905
    000022C4 <00000000>             .DATA.L     L906
    000022C8 <00000000>             .DATA.L     _VariableStackFramePop
    000022CC <00000000>             .DATA.L     _HeapPopStackFrame
    000022D0 <00000000>             .DATA.L     L839
    000022D4 <00000000>             .DATA.L     _ProgramFail
    000022D8 <00000000>             .DATA.L     L912
    000022DC <00000000>             .DATA.L     _ExpressionCoerceInteger
    000022E0 <00000000>             .DATA.L     _VariableStackPop
      expression  1457    
D   00000000              __$OperatorPrecedence:           ; static: OperatorPrecedence
    00000000 00000000               .DATA.L     H'00000000
    00000004 <00000000>             .DATA.L     L494
    00000008 00000000               .DATA.L     H'00000000
    0000000C <00000000>             .DATA.L     L495
    00000010 00200000               .DATA.L     H'00200000
    00000014 <00000000>             .DATA.L     L496
    00000018 00200000               .DATA.L     H'00200000
    0000001C <00000000>             .DATA.L     L497
    00000020 00200000               .DATA.L     H'00200000
    00000024 <00000000>             .DATA.L     L498
    00000028 00200000               .DATA.L     H'00200000
    0000002C <00000000>             .DATA.L     L499
    00000030 00200000               .DATA.L     H'00200000
    00000034 <00000000>             .DATA.L     L500
    00000038 00200000               .DATA.L     H'00200000
    0000003C <00000000>             .DATA.L     L501
    00000040 00200000               .DATA.L     H'00200000
    00000044 <00000000>             .DATA.L     L502
    00000048 00200000               .DATA.L     H'00200000
    0000004C <00000000>             .DATA.L     L503
    00000050 00200000               .DATA.L     H'00200000
    00000054 <00000000>             .DATA.L     L504
    00000058 00200000               .DATA.L     H'00200000
    0000005C <00000000>             .DATA.L     L505
    00000060 00200000               .DATA.L     H'00200000
    00000064 <00000000>             .DATA.L     L506
    00000068 00300000               .DATA.L     H'00300000
    0000006C <00000000>             .DATA.L     L507
    00000070 00300000               .DATA.L     H'00300000
    00000074 <00000000>             .DATA.L     L508
    00000078 00400000               .DATA.L     H'00400000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  113


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000007C <00000000>             .DATA.L     L509
    00000080 00500000               .DATA.L     H'00500000
    00000084 <00000000>             .DATA.L     L510
    00000088 00600000               .DATA.L     H'00600000
    0000008C <00000000>             .DATA.L     L511
    00000090 00700000               .DATA.L     H'00700000
    00000094 <00000000>             .DATA.L     L512
    00000098 E0800000               .DATA.L     H'E0800000
    0000009C <00000000>             .DATA.L     L513
    000000A0 00900000               .DATA.L     H'00900000
    000000A4 <00000000>             .DATA.L     L514
    000000A8 00900000               .DATA.L     H'00900000
    000000AC <00000000>             .DATA.L     L515
    000000B0 00A00000               .DATA.L     H'00A00000
    000000B4 <00000000>             .DATA.L     L516
    000000B8 00A00000               .DATA.L     H'00A00000
    000000BC <00000000>             .DATA.L     L517
    000000C0 00A00000               .DATA.L     H'00A00000
    000000C4 <00000000>             .DATA.L     L518
    000000C8 00A00000               .DATA.L     H'00A00000
    000000CC <00000000>             .DATA.L     L519
    000000D0 00B00000               .DATA.L     H'00B00000
    000000D4 <00000000>             .DATA.L     L520
    000000D8 00B00000               .DATA.L     H'00B00000
    000000DC <00000000>             .DATA.L     L521
    000000E0 E0C00000               .DATA.L     H'E0C00000
    000000E4 <00000000>             .DATA.L     L522
    000000E8 E0C00000               .DATA.L     H'E0C00000
    000000EC <00000000>             .DATA.L     L523
    000000F0 E0D00000               .DATA.L     H'E0D00000
    000000F4 <00000000>             .DATA.L     L524
    000000F8 00D00000               .DATA.L     H'00D00000
    000000FC <00000000>             .DATA.L     L525
    00000100 00D00000               .DATA.L     H'00D00000
    00000104 <00000000>             .DATA.L     L526
    00000108 EF000000               .DATA.L     H'EF000000
    0000010C <00000000>             .DATA.L     L527
    00000110 EF000000               .DATA.L     H'EF000000
    00000114 <00000000>             .DATA.L     L528
    00000118 E0000000               .DATA.L     H'E0000000
    0000011C <00000000>             .DATA.L     L529
    00000120 E0000000               .DATA.L     H'E0000000
    00000124 <00000000>             .DATA.L     L530
    00000128 E0000000               .DATA.L     H'E0000000
    0000012C <00000000>             .DATA.L     L531
    00000130 E0000000               .DATA.L     H'E0000000
    00000134 <00000000>             .DATA.L     L532
    00000138 00F00000               .DATA.L     H'00F00000
    0000013C <00000000>             .DATA.L     L533
    00000140 0F000000               .DATA.L     H'0F000000
    00000144 <00000000>             .DATA.L     L534
    00000148 00F00000               .DATA.L     H'00F00000
    0000014C <00000000>             .DATA.L     L535
    00000150 00F00000               .DATA.L     H'00F00000
    00000154 <00000000>             .DATA.L     L536
    00000158 F0000000               .DATA.L     H'F0000000
    0000015C <00000000>             .DATA.L     L537




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  114


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000160 0F000000               .DATA.L     H'0F000000
    00000164 <00000000>             .DATA.L     L538
C   00000000              L558:
    00000000 63616E2774             .SDATA      "can't assign to this"
             2061737369   
             676E20746F   
             2074686973   
    00000014 00                     .DATA.B     H'00
    00000015 00000001               .RES.B      1
    00000016 00000002               .RES.W      1
    00000018              L601:
    00000018 4E554C4C20             .SDATA      "NULL pointer dereference"
             706F696E74   
             6572206465   
             7265666572   
             656E6365     
    00000030 00                     .DATA.B     H'00
    00000031 00000001               .RES.B      1
    00000032 00000002               .RES.W      1
    00000034              L628:
    00000034 2574206672             .SDATA      "%t from %t"
             6F6D202574   
    0000003E 00                     .DATA.B     H'00
    0000003F 00000001               .RES.B      1
    00000040              L637:
    00000040 6E6F742061             .SDATA      "not an lvalue"
             6E206C7661   
             6C7565       
    0000004D 00                     .DATA.B     H'00
    0000004E 00000002               .RES.W      1
    00000050              L639:
    00000050 66726F6D20             .SDATA      "from an array of size %d to one of size %d"
             616E206172   
             726179206F   
             662073697A   
             6520256420   
             746F206F6E   
             65206F6620   
             73697A6520   
             2564         
    0000007A 00                     .DATA.B     H'00
    0000007B 00000001               .RES.B      1
    0000007C              L640:
    0000007C 2574                   .SDATA      "%t"
    0000007E 00                     .DATA.B     H'00
    0000007F 00000001               .RES.B      1
    00000080              L647:
    00000080 6669727374             .SDATA      "first argument to '?' should be a number"
             2061726775   
             6D656E7420   
             746F20273F   
             272073686F   
             756C642062   
             652061206E   
             756D626572   
    000000A8 00                     .DATA.B     H'00
    000000A9 00000001               .RES.B      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  115


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000AA 00000002               .RES.W      1
    000000AC              L667:
    000000AC 63616E2774             .SDATA      "can't get the address of this"
             2067657420   
             7468652061   
             6464726573   
             73206F6620   
             74686973     
    000000C9 00                     .DATA.B     H'00
    000000CA 00000002               .RES.W      1
    000000CC              L671:
    000000CC 696E76616C             .SDATA      "invalid operation"
             6964206F70   
             6572617469   
             6F6E         
    000000DD 00                     .DATA.B     H'00
    000000DE 00000002               .RES.W      1
    000000E0              L680:
    000000E0 696E76616C             .SDATA      "invalid use of a NULL pointer"
             6964207573   
             65206F6620   
             61204E554C   
             4C20706F69   
             6E746572     
    000000FD 00                     .DATA.B     H'00
    000000FE 00000002               .RES.W      1
    00000100              L692:
    00000100 6E6F742073             .SDATA      "not supported"
             7570706F72   
             746564       
    0000010D 00                     .DATA.B     H'00
    0000010E 00000002               .RES.W      1
    00000110              L708:
    00000110 696E76616C             .SDATA      "invalid expression"
             6964206578   
             7072657373   
             696F6E       
    00000122 00                     .DATA.B     H'00
    00000123 00000001               .RES.B      1
    00000124              L712:
    00000124 6172726179             .SDATA      "array index must be an integer"
             20696E6465   
             78206D7573   
             7420626520   
             616E20696E   
             7465676572   
    00000142 00                     .DATA.B     H'00
    00000143 00000001               .RES.B      1
    00000144              L714:
    00000144 7468697320             .SDATA      "this %t is not an array"
             2574206973   
             206E6F7420   
             616E206172   
             726179       
    0000015B 00                     .DATA.B     H'00
    0000015C              L761:
    0000015C 4153534552             .SDATA      "ASSERTION FAILED: TopOperatorNode->Order != OrderNone FILE %s,LINE %d "




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  116


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             54494F4E20   
             4641494C45   
             443A20546F   
             704F706572   
             61746F724E   
             6F64652D3E   
             4F72646572   
             20213D204F   
             726465724E   
             6F6E652046   
             494C452025   
             732C4C494E   
             4520256420   
    000001A2 0A00                   .DATA.B     H'0A,H'00
    000001A4              L762:
    000001A4 453A5C416E             .SDATA      "E:\Anderain\fx-9860\dPicoc\expression.c"
             6465726169   
             6E5C66782D   
             393836305C   
             645069636F   
             635C657870   
             7265737369   
             6F6E2E63     
    000001CB 00                     .DATA.B     H'00
    000001CC              L778:
    000001CC 6E65656420             .SDATA      "need an structure or union member after '%s'"
             616E207374   
             7275637475   
             7265206F72   
             20756E696F   
             6E206D656D   
             6265722061   
             6674657220   
             27257327     
    000001F8 00                     .DATA.B     H'00
    000001F9 00000001               .RES.B      1
    000001FA 00000002               .RES.W      1
    000001FC              L786:
    000001FC 63616E2774             .SDATA      "can't use '%s' on something that's not a struct or union %s : it's a %t"
             2075736520   
             2725732720   
             6F6E20736F   
             6D65746869   
             6E67207468   
             6174277320   
             6E6F742061   
             2073747275   
             6374206F72   
             20756E696F   
             6E20257320   
             3A20697427   
             7320612025   
             74           
    00000243 00                     .DATA.B     H'00
    00000244              L787:
    00000244 706F696E74             .SDATA      "pointer"
             6572         




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  117


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000024B 00                     .DATA.B     H'00
    0000024C              L788:
    0000024C 00                     .DATA.B     H'00
    0000024D 00000001               .RES.B      1
    0000024E 00000002               .RES.W      1
    00000250              L789:
    00000250 646F65736E             .SDATA      "doesn't have a member called '%s'"
             2774206861   
             7665206120   
             6D656D6265   
             722063616C   
             6C65642027   
             257327       
    00000271 00                     .DATA.B     H'00
    00000272 00000002               .RES.W      1
    00000274              L807:
    00000274 6F70657261             .SDATA      "operator not expected here"
             746F72206E   
             6F74206578   
             7065637465   
             6420686572   
             65           
    0000028E 00                     .DATA.B     H'00
    0000028F 00000001               .RES.B      1
    00000290              L814:
    00000290 627261636B             .SDATA      "brackets not closed"
             657473206E   
             6F7420636C   
             6F736564     
    000002A3 00                     .DATA.B     H'00
    000002A4              L830:
    000002A4 6964656E74             .SDATA      "identifier not expected here"
             6966696572   
             206E6F7420   
             6578706563   
             7465642068   
             657265       
    000002C0 00                     .DATA.B     H'00
    000002C1 00000001               .RES.B      1
    000002C2 00000002               .RES.W      1
    000002C4              L838:
    000002C4 6D6163726F             .SDATA      "macro arguments missing"
             2061726775   
             6D656E7473   
             206D697373   
             696E67       
    000002DB 00                     .DATA.B     H'00
    000002DC              L839:
    000002DC 6578707265             .SDATA      "expression expected"
             7373696F6E   
             2065787065   
             63746564     
    000002EF 00                     .DATA.B     H'00
    000002F0              L840:
    000002F0 6120766F69             .SDATA      "a void value isn't much use here"
             642076616C   
             7565206973   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  118


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             6E2774206D   
             7563682075   
             7365206865   
             7265         
    00000310 00                     .DATA.B     H'00
    00000311 00000001               .RES.B      1
    00000312 00000002               .RES.W      1
    00000314              L842:
    00000314 76616C7565             .SDATA      "value not expected here"
             206E6F7420   
             6578706563   
             7465642068   
             657265       
    0000032B 00                     .DATA.B     H'00
    0000032C              L847:
    0000032C 7479706520             .SDATA      "type not expected here"
             6E6F742065   
             7870656374   
             6564206865   
             7265         
    00000342 00                     .DATA.B     H'00
    00000343 00000001               .RES.B      1
    00000344              L863:
    00000344 6F7574206F             .SDATA      "out of memory"
             66206D656D   
             6F7279       
    00000351 00                     .DATA.B     H'00
    00000352 00000002               .RES.W      1
    00000354              L867:
    00000354 746F6F206D             .SDATA      "too many arguments to %s()"
             616E792061   
             7267756D65   
             6E74732074   
             6F20257328   
             29           
    0000036E 00                     .DATA.B     H'00
    0000036F 00000001               .RES.B      1
    00000370              L868:
    00000370 636F6D6D61             .SDATA      "comma expected"
             2065787065   
             63746564     
    0000037E 00                     .DATA.B     H'00
    0000037F 00000001               .RES.B      1
    00000380              L870:
    00000380 6261642061             .SDATA      "bad argument"
             7267756D65   
             6E74         
    0000038C 00                     .DATA.B     H'00
    0000038D 00000001               .RES.B      1
    0000038E 00000002               .RES.W      1
    00000390              L875:
    00000390 6E6F742065             .SDATA      "not enough arguments to '%s'"
             6E6F756768   
             2061726775   
             6D656E7473   
             20746F2027   
             257327       




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  119


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003AC 00                     .DATA.B     H'00
    000003AD 00000001               .RES.B      1
    000003AE 00000002               .RES.W      1
    000003B0              L876:
    000003B0 2725732720             .SDATA      "'%s' is undefined"
             697320756E   
             646566696E   
             6564         
    000003C1 00                     .DATA.B     H'00
    000003C2 00000002               .RES.W      1
    000003C4              L891:
    000003C4 2574206973             .SDATA      "%t is not a function - can't call"
             206E6F7420   
             612066756E   
             6374696F6E   
             202D206361   
             6E27742063   
             616C6C       
    000003E5 00                     .DATA.B     H'00
    000003E6 00000002               .RES.W      1
    000003E8              L903:
    000003E8 66756E6374             .SDATA      "function body expected"
             696F6E2062   
             6F64792065   
             7870656374   
             6564         
    000003FE 00                     .DATA.B     H'00
    000003FF 00000001               .RES.B      1
    00000400              L905:
    00000400 6E6F207661             .SDATA      "no value returned from a function returning %t"
             6C75652072   
             657475726E   
             6564206672   
             6F6D206120   
             66756E6374   
             696F6E2072   
             657475726E   
             696E672025   
             74           
    0000042E 00                     .DATA.B     H'00
    0000042F 00000001               .RES.B      1
    00000430              L906:
    00000430 636F756C64             .SDATA      "couldn't find goto label '%s'"
             6E27742066   
             696E642067   
             6F746F206C   
             6162656C20   
             27257327     
    0000044D 00                     .DATA.B     H'00
    0000044E 00000002               .RES.W      1
    00000450              L912:
    00000450 696E746567             .SDATA      "integer value expected instead of %t"
             6572207661   
             6C75652065   
             7870656374   
             656420696E   
             7374656164   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  120


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             206F662025   
             74           
    00000474 00                     .DATA.B     H'00
    00000475 00000001               .RES.B      1
    00000476 00000002               .RES.W      1
    00000478              L494:
    00000478 6E6F6E65               .SDATA      "none"
    0000047C 00                     .DATA.B     H'00
    0000047D 00000001               .RES.B      1
    0000047E 00000002               .RES.W      1
    00000480              L495:
    00000480 2C                     .SDATA      ","
    00000481 00                     .DATA.B     H'00
    00000482 00000002               .RES.W      1
    00000484              L496:
    00000484 3D                     .SDATA      "="
    00000485 00                     .DATA.B     H'00
    00000486 00000002               .RES.W      1
    00000488              L497:
    00000488 2B3D                   .SDATA      "+="
    0000048A 00                     .DATA.B     H'00
    0000048B 00000001               .RES.B      1
    0000048C              L498:
    0000048C 2D3D                   .SDATA      "-="
    0000048E 00                     .DATA.B     H'00
    0000048F 00000001               .RES.B      1
    00000490              L499:
    00000490 2A3D                   .SDATA      "*="
    00000492 00                     .DATA.B     H'00
    00000493 00000001               .RES.B      1
    00000494              L500:
    00000494 2F3D                   .SDATA      "/="
    00000496 00                     .DATA.B     H'00
    00000497 00000001               .RES.B      1
    00000498              L501:
    00000498 253D                   .SDATA      "%="
    0000049A 00                     .DATA.B     H'00
    0000049B 00000001               .RES.B      1
    0000049C              L502:
    0000049C 3C3C3D                 .SDATA      "<<="
    0000049F 00                     .DATA.B     H'00
    000004A0              L503:
    000004A0 3E3E3D                 .SDATA      ">>="
    000004A3 00                     .DATA.B     H'00
    000004A4              L504:
    000004A4 263D                   .SDATA      "&="
    000004A6 00                     .DATA.B     H'00
    000004A7 00000001               .RES.B      1
    000004A8              L505:
    000004A8 7C3D                   .SDATA      "|="
    000004AA 00                     .DATA.B     H'00
    000004AB 00000001               .RES.B      1
    000004AC              L506:
    000004AC 5E3D                   .SDATA      "^="
    000004AE 00                     .DATA.B     H'00
    000004AF 00000001               .RES.B      1
    000004B0              L507:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  121


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004B0 3F                     .SDATA      "?"
    000004B1 00                     .DATA.B     H'00
    000004B2 00000002               .RES.W      1
    000004B4              L508:
    000004B4 3A                     .SDATA      ":"
    000004B5 00                     .DATA.B     H'00
    000004B6 00000002               .RES.W      1
    000004B8              L509:
    000004B8 7C7C                   .SDATA      "||"
    000004BA 00                     .DATA.B     H'00
    000004BB 00000001               .RES.B      1
    000004BC              L510:
    000004BC 2626                   .SDATA      "&&"
    000004BE 00                     .DATA.B     H'00
    000004BF 00000001               .RES.B      1
    000004C0              L511:
    000004C0 7C                     .SDATA      "|"
    000004C1 00                     .DATA.B     H'00
    000004C2 00000002               .RES.W      1
    000004C4              L512:
    000004C4 5E                     .SDATA      "^"
    000004C5 00                     .DATA.B     H'00
    000004C6 00000002               .RES.W      1
    000004C8              L513:
    000004C8 26                     .SDATA      "&"
    000004C9 00                     .DATA.B     H'00
    000004CA 00000002               .RES.W      1
    000004CC              L514:
    000004CC 3D3D                   .SDATA      "=="
    000004CE 00                     .DATA.B     H'00
    000004CF 00000001               .RES.B      1
    000004D0              L515:
    000004D0 213D                   .SDATA      "!="
    000004D2 00                     .DATA.B     H'00
    000004D3 00000001               .RES.B      1
    000004D4              L516:
    000004D4 3C                     .SDATA      "<"
    000004D5 00                     .DATA.B     H'00
    000004D6 00000002               .RES.W      1
    000004D8              L517:
    000004D8 3E                     .SDATA      ">"
    000004D9 00                     .DATA.B     H'00
    000004DA 00000002               .RES.W      1
    000004DC              L518:
    000004DC 3C3D                   .SDATA      "<="
    000004DE 00                     .DATA.B     H'00
    000004DF 00000001               .RES.B      1
    000004E0              L519:
    000004E0 3E3D                   .SDATA      ">="
    000004E2 00                     .DATA.B     H'00
    000004E3 00000001               .RES.B      1
    000004E4              L520:
    000004E4 3C3C                   .SDATA      "<<"
    000004E6 00                     .DATA.B     H'00
    000004E7 00000001               .RES.B      1
    000004E8              L521:
    000004E8 3E3E                   .SDATA      ">>"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  122


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004EA 00                     .DATA.B     H'00
    000004EB 00000001               .RES.B      1
    000004EC              L522:
    000004EC 2B                     .SDATA      "+"
    000004ED 00                     .DATA.B     H'00
    000004EE 00000002               .RES.W      1
    000004F0              L523:
    000004F0 2D                     .SDATA      "-"
    000004F1 00                     .DATA.B     H'00
    000004F2 00000002               .RES.W      1
    000004F4              L524:
    000004F4 2A                     .SDATA      "*"
    000004F5 00                     .DATA.B     H'00
    000004F6 00000002               .RES.W      1
    000004F8              L525:
    000004F8 2F                     .SDATA      "/"
    000004F9 00                     .DATA.B     H'00
    000004FA 00000002               .RES.W      1
    000004FC              L526:
    000004FC 25                     .SDATA      "%"
    000004FD 00                     .DATA.B     H'00
    000004FE 00000002               .RES.W      1
    00000500              L527:
    00000500 2B2B                   .SDATA      "++"
    00000502 00                     .DATA.B     H'00
    00000503 00000001               .RES.B      1
    00000504              L528:
    00000504 2D2D                   .SDATA      "--"
    00000506 00                     .DATA.B     H'00
    00000507 00000001               .RES.B      1
    00000508              L529:
    00000508 21                     .SDATA      "!"
    00000509 00                     .DATA.B     H'00
    0000050A 00000002               .RES.W      1
    0000050C              L530:
    0000050C 7E                     .SDATA      "~"
    0000050D 00                     .DATA.B     H'00
    0000050E 00000002               .RES.W      1
    00000510              L531:
    00000510 73697A656F             .SDATA      "sizeof"
             66           
    00000516 00                     .DATA.B     H'00
    00000517 00000001               .RES.B      1
    00000518              L532:
    00000518 63617374               .SDATA      "cast"
    0000051C 00                     .DATA.B     H'00
    0000051D 00000001               .RES.B      1
    0000051E 00000002               .RES.W      1
    00000520              L533:
    00000520 5B                     .SDATA      "["
    00000521 00                     .DATA.B     H'00
    00000522 00000002               .RES.W      1
    00000524              L534:
    00000524 5D                     .SDATA      "]"
    00000525 00                     .DATA.B     H'00
    00000526 00000002               .RES.W      1
    00000528              L535:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE  123


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000528 2E                     .SDATA      "."
    00000529 00                     .DATA.B     H'00
    0000052A 00000002               .RES.W      1
    0000052C              L536:
    0000052C 2D3E                   .SDATA      "->"
    0000052E 00                     .DATA.B     H'00
    0000052F 00000001               .RES.B      1
    00000530              L537:
    00000530 28                     .SDATA      "("
    00000531 00                     .DATA.B     H'00
    00000532 00000002               .RES.W      1
    00000534              L538:
    00000534 29                     .SDATA      ")"
    00000535 00                     .DATA.B     H'00















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 05-May-2013 20:25:19  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     1457



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000022E4 Byte(s)
CONSTANT SECTION (C):                               00000536 Byte(s)
DATA     SECTION (D):                               00000168 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00002982 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           54
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          26
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           596






























*** COMMAND PARAMETER ***


  -subcommand=C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\hmk340.tmp 

